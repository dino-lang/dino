/* This file contains execution (run-time) objects description. */

/*
   Copyright (C) 1997-2015 Vladimir Makarov.

   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>

   This file is part of interpreter of DINO.

   This is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This software is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GNU CC; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.

*/

/* Don't use -flat-structure for generation SPI from this description. */

%extend d_extern

%import {

#include "d_bc.h"
#include "d_runtab.h"

}

%export {

#ifdef __GNUC__
#define expect(e) __builtin_expect (e, 1)
#define doubt(e) __builtin_expect (e, 0)
#define d_restrict __restrict__
#else
#define expect(e) (e)
#define doubt(e) (e)
#define d_restrict
#endif

#define INCREMENT_PC() (cpc = BC_next (cpc))

/* The macro call returns optimal allocation number for vector
   elements.  Remember vector can grow.  Remember also about string
   end char. */
#define OPTIMAL_ELS_NUM(n) (((n) + 1) * 3 / 2)

extern int sync_flag;

extern d_restrict pc_t cpc;
extern d_restrict pc_t ifun_call_pc;
extern ER_node_t cstack;
extern ER_node_t uppest_stack;
extern d_restrict ER_node_t tvars;
extern d_restrict ER_node_t cvars;
extern ER_node_t ctop;
extern int tvar_num1, tvar_num2;

static BC_node_t do_always_inline
get_another_block_decl (BC_node_t block, BC_node_t decl)
{
  return LV_BLOCK_IDENT_DECL (block, BC_fldid_num (decl));
}

/* Return source position of byte code BC.  */
static position_t do_always_inline
get_pos (BC_node_t bc)
{
  d_assert (BC_IS_OF_TYPE (bc, BC_NM_bcode));
  return BC_pos (BC_info (bc));
}

/* Return source position of current executed byte code.  */
static position_t do_always_inline
get_cpos (void)
{
  return get_pos (cpc);
}

/* Return source position of last implementation function call.  */
static position_t do_always_inline
call_pos (void)
{
  return get_pos (ifun_call_pc);
}

#define TOP_UP   DECR_CTOP (-1)
#define TOP_DOWN DECR_CTOP (1)

extern vlo_t heap_temp_refs;

#define CREATE_TEMP_REF() VLO_CREATE (heap_temp_refs, 256)
#define FINISH_TEMP_REF() VLO_DELETE (heap_temp_refs)
#define EMPTY_TEMP_REF() VLO_NULLIFY (heap_temp_refs)

#define PUSH_TEMP_REF(ref)\
 do\
   {\
     ER_node_t r = ref;\
     VLO_ADD_MEMORY (heap_temp_refs, &r, sizeof (r));\
   }\
 while (0)

#define POP_TEMP_REF(n) VLO_SHORTEN (heap_temp_refs, (n) * sizeof (ER_node_t))

#define GET_TEMP_REF(depth)\
  (((ER_node_t *) VLO_BEGIN (heap_temp_refs))\
   [VLO_LENGTH (heap_temp_refs) / sizeof (ER_node_t) - (depth) - 1])

#define TEMP_REFS_LENGTH() (VLO_LENGTH (heap_temp_refs) / sizeof (ER_node_t))

extern vlo_t temp_vlobj;
extern vlo_t temp_vlobj2;

/* Structure for storing info about called function/class.  */
struct trace_stack_elem
{
  BC_node_t block;
  pc_t pc; /* Pc of the call */
};

extern vlo_t trace_stack;

extern ER_node_t cprocess;
extern int context_number;
extern int process_number;
extern ER_node_t first_process_not_started;

#define GO_THROUGH_REDIR(ref)\
 while (ER_NODE_MODE (ref) == ER_NM_heap_redir) (ref) = ER_redir (ref)

extern void initiate_int_tables (void);

extern unsigned int gc_number;
extern int free_gc_memory_percent;
extern size_t heap_size, max_heap_size;
extern size_t free_heap_memory;
extern int heap_chunks_number, max_heap_chunks_number;
extern int in_gc_p;
#ifndef NO_CONTAINER_CACHE
extern int current_cached_container_tick;
#endif
#ifndef NO_PROFILE
#if HAVE_SETITIMER
extern int gc_interrupts_number;
#else
extern ticker_t gc_ticker;
#endif
#endif

extern pc_t real_fun_call_pc;

#if ! defined (NO_PROFILE) && HAVE_SETITIMER
extern int all_interrupts_number; 
extern void profile_interrupt (void);
#endif

extern int GC_executed_stmts_count;
extern int no_gc_p;

extern void *heap_allocate (size_t size, int stack_p);
extern void initiate_heap (void);
extern void final_call_destroy_functions (void);
extern void finish_heap (void);
extern void GC (void);
extern void update_profile (BC_node_t block_node);
extern ER_node_t alloc_new_stack (BC_node_t block_node, int vars_num);
extern void heap_push (BC_node_t block_node_ptr, ER_node_t context,
		       int offset);
extern void heap_pop (void);
extern void create_uppest_stack (BC_node_t block_node);
extern void expand_uppest_stack (void);
extern void clear_c_stack_flags (void);

extern unsigned int tab_collisions;
extern unsigned int tab_expansions;

extern void initiate_tables (void);

extern int executed_stmts_count;
extern int process_quantum;

extern ER_node_t create_process (pc_t start_process_pc, BC_node_t fun,
	                         ER_node_t fun_context);
extern void interrupt (pc_t first_resume_pc);
extern void block_cprocess (pc_t first_resume_pc, int wait_stmt_flag);
extern void delete_cprocess (void);
extern int delete_cprocess_during_exception (void);
extern void initiate_processes (pc_t start_pc);

extern void *external_address (BC_node_t decl);

extern void process_system_errors (const char *function_name);

extern void call_fun_class (BC_node_t fun, ER_node_t context,
			    int pars_number, int from_c_code_p);


extern void switch_to_bcode (void);

extern void evaluate_code (void);

#ifdef __GNUC__
extern void eval_error (BC_node_t error_decl, position_t position,
		        const char *format, ...) __attribute__ ((noreturn));
#else
extern void eval_error (BC_node_t error_decl, position_t position,
			const char *format, ...);
#endif

extern const char *er_type_name (int);

/* Return type from val mode.  For code we return only type_fun.  It
   can be made more accurately later.  */
static inline type_val_t
mode_to_type (ER_node_mode_t mode)
{
  switch (mode)
    {
    case ER_NM_nil: return type_nil;
    case ER_NM_char:
    case ER_NM_byte:
      return type_char;
    case ER_NM_int: return type_int;
    case ER_NM_long: return type_long;
    case ER_NM_float: return type_float;
    case ER_NM_hide: return type_hide;
    case ER_NM_hideblock: return type_hideblock;
    case ER_NM_vect: return type_vect;
    case ER_NM_tab: return type_tab;
    case ER_NM_code: return type_fun;
    case ER_NM_stack: return type_obj;
    case ER_NM_process: return type_process;
    case ER_NM_type: return type_type;
    default:
      d_unreachable ();
    }
}

/* Return type of CODE.  */
static inline type_val_t
code_type (BC_node_t code)
{
  d_assert (BC_NODE_MODE (code) == BC_NM_fblock);

  if (BC_fun_p (code))
    return type_fun;
  else if (BC_class_p (code))
    return type_class;
  else
    {
      d_assert (BC_thread_p (code));
      return type_thread;
    }
}

/* Return true if it is non-external function.  */
static inline int
function_p (ER_node_t val)
{
  BC_node_t code;

  if (ER_NODE_MODE (val) != ER_NM_code)
    return FALSE;
  code = ID_TO_CODE (ER_code_id (val));
  return BC_fun_p (code);
}

/* Set up variable FROM to BOUND (no including) to nil.  */
static void do_always_inline
reset_vars (ER_node_t from, ER_node_t bound)
{
  for (; from < bound; from = IVAL (from, 1))
    ER_SET_MODE (from, ER_NM_undef);
}

/* Return pc for the 1st stmt of FBLOCK.  If there is no one (abstract
   function case), generate error.  */
static BC_node_t do_always_inline
get_fblock_pc (BC_node_t fblock)
{
  BC_node_t pc;

  d_assert (BC_NODE_MODE (fblock) == BC_NM_fblock);
  pc = BC_next (fblock);
  if (pc != NULL)
    return pc;
  eval_error (abstrcall_bc_decl, get_cpos (),
	      DERR_unfinished_fun_class_call, BC_ident (BC_fdecl (fblock)));
}

extern unsigned int generated_c_functions_num, generated_c_function_calls_num;

/* Make FBLOCK call itself.  It might be C code generation and its
   call.  */
static void do_always_inline
do_call (BC_node_t fblock, int from_c_code_p)
{
  if (BC_fmode (fblock) == BC_gen)
    {
      void *addr;
      
      d_assert (! BC_thread_p (fblock));
      if ((addr = BC_implementation_fun (fblock)) == NULL)
	{
	  addr = gen_cfblock (fblock);
	  if (addr == NULL)
	    BC_set_fmode (fblock, BC_no_gen);
	  else
	    {
	      generated_c_functions_num++;
	      BC_set_implementation_fun (fblock, addr);
	    }
	}
      if (addr != NULL)
	{
	  generated_c_function_calls_num++;
	  ((void (*) (ER_node_t, ER_node_t)) addr) (cvars, tvars);
	  return;
	}
    }
  cpc = get_fblock_pc (fblock);
  if (from_c_code_p)
    evaluate_code ();
}

/* Make STACK with VARS_NUM as the current stack.  Make vars starting
   with OFFSET undefined. */
static void do_always_inline
setup_new_cstack (ER_node_t stack, int vars_num, int offset)
{
  d_assert (BC_vars_num (ER_block_node (stack)) == vars_num);
  if (cstack != NULL)
    ER_set_ctop (cstack, (char *) ctop);
  cstack = stack;
  cvars = ER_stack_vars (cstack);
  ctop = (ER_node_t) ((char *) cvars + (vars_num - 1) * sizeof (val_t));
  if (offset >= 0)
    reset_vars (IVAL (cvars, offset), IVAL (ctop, 1));
  /* We set them only here because we need to set mode before.
     Remeber about possible field checking. */
  if (cprocess != NULL)
    ER_set_saved_cstack (cprocess, cstack);
}

/* The following func allocates heap memory for stack frame (heap
   stack header and vars) of the block given as BLOCK_NODE.  The func
   initiates all fields of stack and returns pointer to it.  The func
   also sets up value of cstack.  The func sets up mode of all
   permanent stack vars as ER_NM_undef starting from offset.  If
   offset is negative, stack vars are not set.  */
static void do_always_inline
heap_push_without_profile_update (BC_node_t block_node, ER_node_t context,
				  int vars_num, int offset)
{
  ER_node_t stack;

  if ((stack = BC_free_stacks (block_node)) != NULL)
    BC_set_free_stacks (block_node, ER_prev_stack (stack));
  else
    stack = alloc_new_stack (block_node, vars_num);
#ifndef NO_CONTAINER_CACHE
  current_cached_container_tick++;
#endif
  ER_set_c_stack_p (stack, FALSE);
  ER_set_call_pc (stack, cpc);
  ER_set_context (stack, context);
  ER_set_prev_stack (stack, cstack);
  setup_new_cstack (stack, vars_num, offset);
}

}

%%

/* Because objects can change their places (growing mutable objects or
   unpacking vector), we need the following nodes which are placed on
   place of first place of the object and refers for current place of
   the object (or another redirection).  The redirections do not
   survive GC.  Heap objects on which redirection refers for has the
   same (unique)number as original object. */
heap_redir :: heap_vect_tab
%other
  /* new_place, immutable, els_number are not used here. */
  redir : heap_vect_tab /* referenced object */
;

/* Don't add fields for nodes here as we have different structures in
   the interpriter and in the external functions.  */

%%

/* Return name of ER type T.  */
const char *
er_type_name (int t)
{
  return ER_node_name[t];
}


/*
Local Variables:
mode:c
End:
*/
