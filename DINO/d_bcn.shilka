/*
   Copyright (C) 2014 Vladimir Makarov.

   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>

   This file is part of interpreter of DINO.

   This is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This software is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GNU CC; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.

*/

%type BC_node_mode_t

%%
vdecl		{return BC_NM_vdecl;}
fdecl		{return BC_NM_fdecl;}
evdecl		{return BC_NM_evdecl;}
efdecl		{return BC_NM_efdecl;}
block		{return BC_NM_block;}
fblock		{return BC_NM_fblock;}
stinc		{return BC_NM_stinc;}
stdecm		{return BC_NM_stdecm;}
stdecu		{return BC_NM_stdecu;}
ldnil		{return BC_NM_ldnil;}
ldthis		{return BC_NM_ldthis;}
flat		{return BC_NM_flat;}
ldi		{return BC_NM_ldi;}
ldbi		{return BC_NM_ldbi;}
ldl		{return BC_NM_ldl;}
ldch		{return BC_NM_ldch;}
ldtp		{return BC_NM_ldtp;}
ldf		{return BC_NM_ldf;}
lds		{return BC_NM_lds;}
ldus		{return BC_NM_ldus;}
var		{return BC_NM_var;}
lvar		{return BC_NM_lvar;}
lvarv		{return BC_NM_lvarv;}
evar		{return BC_NM_evar;}
levar		{return BC_NM_levar;}
levarv		{return BC_NM_levarv;}
fun		{return BC_NM_fun;}
ofun		{return BC_NM_ofun;}
efun		{return BC_NM_efun;}
class		{return BC_NM_class;}
oclass		{return BC_NM_oclass;}
ind		{return BC_NM_ind;}
sl		{return BC_NM_sl;}
lslv		{return BC_NM_lslv;}
ind2		{return BC_NM_ind2;}
fld		{return BC_NM_fld;}
lfld		{return BC_NM_lfld;}
lfldv		{return BC_NM_lfldv;}
ovfld		{return BC_NM_ovfld;}
lovfld		{return BC_NM_lovfld;}
lovfldv		{return BC_NM_lovfldv;}
const		{return BC_NM_const;}
new		{return BC_NM_new;}
not		{return BC_NM_not;}
plus		{return BC_NM_plus;}
minus		{return BC_NM_minus;}
bnot		{return BC_NM_bnot;}
inot		{return BC_NM_inot;}
iplus		{return BC_NM_iplus;}
iminus		{return BC_NM_iminus;}
ibnot		{return BC_NM_ibnot;}
fplus		{return BC_NM_fplus;}
fminus		{return BC_NM_fminus;}
length		{return BC_NM_length;}
fold_add	{return BC_NM_fold_add;}
fold_mult	{return BC_NM_fold_mult;}
fold_and	{return BC_NM_fold_and;}
fold_or		{return BC_NM_fold_or;}
fold_xor	{return BC_NM_fold_xor;}
tpof		{return BC_NM_tpof;}
chof		{return BC_NM_chof;}
iof		{return BC_NM_iof;}
lof		{return BC_NM_lof;}
fof		{return BC_NM_fof;}
vecof		{return BC_NM_vecof;}
tabof		{return BC_NM_tabof;}
fmtvecof	{return BC_NM_fmtvecof;}
in		{return BC_NM_in;}
or		{return BC_NM_or;}
xor		{return BC_NM_xor;}
and		{return BC_NM_and;}
ior		{return BC_NM_ior;}
ixor		{return BC_NM_ixor;}
iand		{return BC_NM_iand;}
eq		{return BC_NM_eq;}
ieq		{return BC_NM_ieq;}
ne		{return BC_NM_ne;}
ine		{return BC_NM_ine;}
id		{return BC_NM_id;}
unid		{return BC_NM_unid;}
lt		{return BC_NM_lt;}
ilt		{return BC_NM_ilt;}
gt		{return BC_NM_gt;}
igt		{return BC_NM_igt;}
le		{return BC_NM_le;}
ile		{return BC_NM_ile;}
ge		{return BC_NM_ge;}
ige		{return BC_NM_ige;}
lsh		{return BC_NM_lsh;}
rsh		{return BC_NM_rsh;}
ash		{return BC_NM_ash;}
ilsh		{return BC_NM_ilsh;}
irsh		{return BC_NM_irsh;}
iash		{return BC_NM_iash;}
concat		{return BC_NM_concat;}
add		{return BC_NM_add;}
sub		{return BC_NM_sub;}
mult		{return BC_NM_mult;}
div		{return BC_NM_div;}
mod		{return BC_NM_mod;}
addi		{return BC_NM_addi;}
multi		{return BC_NM_multi;}
madd		{return BC_NM_madd;}
iadd		{return BC_NM_iadd;}
isub		{return BC_NM_isub;}
imult		{return BC_NM_imult;}
idiv		{return BC_NM_idiv;}
imod		{return BC_NM_imod;}
fadd		{return BC_NM_fadd;}
fsub		{return BC_NM_fsub;}
fmult		{return BC_NM_fmult;}
fdiv		{return BC_NM_fdiv;}
fmodop		{return BC_NM_fmodop;}
ifadd		{return BC_NM_ifadd;}
ifsub		{return BC_NM_ifsub;}
fisub		{return BC_NM_fisub;}
ifmult		{return BC_NM_ifmult;}
ifdiv		{return BC_NM_ifdiv;}
fidiv		{return BC_NM_fidiv;}
iaddi		{return BC_NM_iaddi;}
faddi		{return BC_NM_faddi;}
imulti		{return BC_NM_imulti;}
fmulti		{return BC_NM_fmulti;}
eqi		{return BC_NM_eqi;}
ieqi		{return BC_NM_ieqi;}
nei		{return BC_NM_nei;}
inei		{return BC_NM_inei;}
lti		{return BC_NM_lti;}
ilti		{return BC_NM_ilti;}
gti		{return BC_NM_gti;}
igti		{return BC_NM_igti;}
lei		{return BC_NM_lei;}
ilei		{return BC_NM_ilei;}
gei		{return BC_NM_gei;}
igei		{return BC_NM_igei;}
b		{return BC_NM_b;}
btdef		{return BC_NM_btdef;}
bt		{return BC_NM_bt;}
bf		{return BC_NM_bf;}
bfni		{return BC_NM_bfni;}
ibt		{return BC_NM_ibt;}
ibf		{return BC_NM_ibf;}
ibfni		{return BC_NM_ibfni;}
brts		{return BC_NM_brts;}
brfs		{return BC_NM_brfs;}
bteq		{return BC_NM_bteq;}
btne		{return BC_NM_btne;}
btge		{return BC_NM_btge;}
btlt		{return BC_NM_btlt;}
btle		{return BC_NM_btle;}
btgt		{return BC_NM_btgt;}
ibteq		{return BC_NM_ibteq;}
ibtne		{return BC_NM_ibtne;}
ibtge		{return BC_NM_ibtge;}
ibtlt		{return BC_NM_ibtlt;}
ibtle		{return BC_NM_ibtle;}
ibtgt		{return BC_NM_ibtgt;}
fbteq		{return BC_NM_fbteq;}
fbtne		{return BC_NM_fbtne;}
fbtge		{return BC_NM_fbtge;}
fbtlt		{return BC_NM_fbtlt;}
fbtle		{return BC_NM_fbtle;}
fbtgt		{return BC_NM_fbtgt;}
bteqi		{return BC_NM_bteqi;}
btnei		{return BC_NM_btnei;}
btgei		{return BC_NM_btgei;}
btlti		{return BC_NM_btlti;}
btlei		{return BC_NM_btlei;}
btgti		{return BC_NM_btgti;}
ibteqi		{return BC_NM_ibteqi;}
ibtnei		{return BC_NM_ibtnei;}
ibtgei		{return BC_NM_ibtgei;}
ibtlti		{return BC_NM_ibtlti;}
ibtlei		{return BC_NM_ibtlei;}
ibtgti		{return BC_NM_ibtgti;}
bteqinc		{return BC_NM_bteqinc;}
btneinc		{return BC_NM_btneinc;}
btgeinc		{return BC_NM_btgeinc;}
btltinc		{return BC_NM_btltinc;}
btleinc		{return BC_NM_btleinc;}
btgtinc		{return BC_NM_btgtinc;}
ibteqinc	{return BC_NM_ibteqinc;}
ibtneinc	{return BC_NM_ibtneinc;}
ibtgeinc	{return BC_NM_ibtgeinc;}
ibtltinc	{return BC_NM_ibtltinc;}
ibtleinc	{return BC_NM_ibtleinc;}
ibtgtinc	{return BC_NM_ibtgtinc;}
lconv		{return BC_NM_lconv;}
foreach		{return BC_NM_foreach;}
foreach2	{return BC_NM_foreach2;}
vec		{return BC_NM_vec;}
tab		{return BC_NM_tab;}
move		{return BC_NM_move;}
imove		{return BC_NM_imove;}
fmove		{return BC_NM_fmove;}
stvt		{return BC_NM_stvt;}
stvtu		{return BC_NM_stvtu;}
sts		{return BC_NM_sts;}
stsu		{return BC_NM_stsu;}
ste		{return BC_NM_ste;}
steu		{return BC_NM_steu;}
slst		{return BC_NM_slst;}
mult_st		{return BC_NM_mult_st;}
div_st		{return BC_NM_div_st;}
mod_st		{return BC_NM_mod_st;}
add_st		{return BC_NM_add_st;}
sub_st		{return BC_NM_sub_st;}
concat_st	{return BC_NM_concat_st;}
lsh_st		{return BC_NM_lsh_st;}
rsh_st		{return BC_NM_rsh_st;}
ash_st		{return BC_NM_ash_st;}
and_st		{return BC_NM_and_st;}
xor_st		{return BC_NM_xor_st;}
or_st		{return BC_NM_or_st;}
mult_slst	{return BC_NM_mult_slst;}
div_slst	{return BC_NM_div_slst;}
mod_slst	{return BC_NM_mod_slst;}
add_slst	{return BC_NM_add_slst;}
sub_slst	{return BC_NM_sub_slst;}
concat_slst	{return BC_NM_concat_slst;}
lsh_slst	{return BC_NM_lsh_slst;}
rsh_slst	{return BC_NM_rsh_slst;}
ash_slst	{return BC_NM_ash_slst;}
and_slst	{return BC_NM_and_slst;}
xor_slst	{return BC_NM_xor_slst;}
or_slst		{return BC_NM_or_slst;}
out		{return BC_NM_out;}
call		{return BC_NM_call;}
tcall		{return BC_NM_tcall;}
ibcall		{return BC_NM_ibcall;}
icall		{return BC_NM_icall;}
itcall		{return BC_NM_itcall;}
ticall		{return BC_NM_ticall;}
titcall		{return BC_NM_titcall;}
cicall		{return BC_NM_cicall;}
citcall		{return BC_NM_citcall;}
mcall		{return BC_NM_mcall;}
omcall		{return BC_NM_omcall;}
omicall		{return BC_NM_omicall;}
omitcall	{return BC_NM_omitcall;}
stpop		{return BC_NM_stpop;}
leave		{return BC_NM_leave;}
bend		{return BC_NM_bend;}
fbend		{return BC_NM_fbend;}
ret		{return BC_NM_ret;}
throw		{return BC_NM_throw;}
waitcond	{return BC_NM_waitcond;}
waitend		{return BC_NM_waitend;}
except		{return BC_NM_except;}
chvec		{return BC_NM_chvec;}
chvlen		{return BC_NM_chvlen;}
chvel		{return BC_NM_chvel;}
chvend		{return BC_NM_chvend;}
chtab		{return BC_NM_chtab;}
chtel		{return BC_NM_chtel;}
chtend		{return BC_NM_chtend;}
chst		{return BC_NM_chst;}
chstel		{return BC_NM_chstel;}
chstend		{return BC_NM_chstend;}
rmatch		{return BC_NM_rmatch;}
rmatchs		{return BC_NM_rmatchs;}
%other {return 0;}
