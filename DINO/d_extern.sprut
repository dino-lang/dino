/* This file contains execution (run-time) objects description which
   can be used for external functions.  Not all nodes fields are
   described here. */

/*
   Copyright (C) 1997-2016 Vladimir Makarov.

   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>

   This file is part of interpreter of DINO.

   This is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This software is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GNU CC; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.

*/

/* Don't use -flat-structure for generation SPI from this description. */

%type bool_t size_t hide_t ucode_t int_t rint_t unsigned_rint_t rfloat_t char_ptr_t
      entry_t entry_ptr_t bcid_t stack_state_t BC_hidden_node_t ER_node_mode_t type_val_t
      thread_status_t stack_ptr_t hidden_pc_t gmp_t

%import {

#include "d_types.h"

typedef int int_t;

typedef void *hide_t;

typedef struct BC_node *BC_hidden_node_t;

typedef struct BC_node *hidden_pc_t;

typedef char *char_ptr_t;

/* The hash table entry.  */
typedef unsigned int entry_t;
/* The pointer to hash table entry.  */
typedef entry_t *entry_ptr_t;

typedef int bcid_t;

/* This enumeration declares all possible states of of heap stack
   which contains function destroy.  Don't change it.  */
enum stack_state
{
  IS_initial = 0,
  IS_to_be_destroyed,
  IS_destroyed
};

typedef enum stack_state stack_state_t;

/* This enumeration declares all possible states of thread. */
enum thread_status
{
  /* Thread is not blocked.  Created thread has also this status.
     Remember that we automatically zero all free memory.  Maximum one
     thread can have status PS_READY or PS_STARTED.  This state can
     come only from the 3 last states. */
  PS_READY = 1,
  /* It can come from only PS_READY after execution of a stmt. */
  PS_STARTED,
  /* Thread is blocked because its quantum has been exhausted.  It can
     come from only PS_STARTED after execution of a stmt. */
  PS_BLOCKED_BY_QUANTUM_SWITCH,
  /* Thread is blocked by wait-stmt. It can come from only
     PS_STARTED. */
  PS_BLOCKED_BY_WAIT,
  /* Thread is blocked by wait-stmt.  It can come from only PS_READY. */
  PS_NOT_STARTED
};

typedef enum thread_status thread_status_t;

typedef struct ER_node **stack_ptr_t;

/* Type value.  It is more compact and more elobarate than ER_node_mode_t.  */
enum type_val
{
  type_undef,
  type_nil,
  type_char,
  type_int,
  type_long,
  type_float,
  type_hide,
  type_hideblock,
  type_vect,
  type_tab,
  type_fun,
  type_class,
  type_fiber,
  type_obj,
  type_thread,
  type_type
};

typedef enum type_val type_val_t;

}

%export {

#include <string.h>
#include <assert.h>

#define d_assert assert

#ifdef __GNUC__
#define __always__ __attribute__ ((__always_inline__))
#else
#define __always__
#endif

#define do_always_inline inline __always__

/* Container for all kind of variables. */
typedef union
  {
    _ER_undef undef;
    _ER_nil nil;
    _ER_hide hide;
    _ER_hideblock hideblock;
    _ER_char ch;
    _ER_int i;
    _ER_long l;
    _ER_float f;
    _ER_type type;
    _ER_vect vect;
    _ER_tab tab;
    _ER_empty_el ee;
    _ER_stack stack;
    _ER_thread thread;
    _ER_external_var_ref external_var_ref;
  } val_t;

/* Type of all external functions. */
typedef val_t external_fun_t (int, val_t *);

/* This function must be used only when dynamic libarary is not
   implemented.  In this case, provide get_library_search_function
   (and main) and link it with the dino library to make an extended
   dino interpriter. */

extern void *get_library_search_function (const char *name);

/* This is trick (usage that ER_NODE_MODE is macro)!!!  Therefore the
   following macro must apply to make new node or to make redirections
   or unpacked vector <-> unpacked vector. */
#define ER_SET_MODE(v, m) (ER_NODE_MODE (v) = (m))

#if defined(NDEBUG)
#define ER_mpz_ptr(s) (&ER_gmp_(s).mpz)
#else
#define ER_mpz_ptr(s) (&((_ER_heap_gmp *) s)->gmp_.mpz)
#endif

/* Align of heap objects. */
#define MAX_ALIGNMENT sizeof (double)

#if defined(NDEBUG)
/* The macro call value is size of memory allocated for the heap
   object with size S accounting for aligning. */
#define ALLOC_SIZE(s) ((((s)+MAX_ALIGNMENT-1)/MAX_ALIGNMENT)*MAX_ALIGNMENT)
#else
#define ALLOC_SIZE(s) _alloc_size (s)
#endif

#if defined(NDEBUG)
#define ER_hideblock_start(hideblock)\
  ((char *) (hideblock) + ALLOC_SIZE (sizeof (_ER_heap_hideblock)))
#else
#define ER_hideblock_start(hideblock) _hideblock_start (hideblock)
#endif

#if defined(NDEBUG)
#define ER_pack_els(vect)\
  ((char *) (vect) + ALLOC_SIZE (sizeof (_ER_heap_pack_vect)) + ER_disp (vect))
#else
#define ER_pack_els(vect) _pack_els (vect)
#endif

#if defined(NDEBUG)
#define ER_unpack_els(vect)\
  ((ER_node_t) ((char *) (vect) + ALLOC_SIZE (sizeof (_ER_heap_unpack_vect))\
                + ER_disp (vect)))
#else
#define ER_unpack_els(vect) _unpack_els (vect)
#endif

/* Reserved values of the entries.  */
static const entry_t EMPTY_ENTRY = UINT_MAX - 1;
static const entry_t DELETED_ENTRY = UINT_MAX;
/* Maximal number of elements in the hash table.  */
static const entry_t MAX_TAB_ELS_NUMBER = UINT_MAX - 1;

#if defined(NDEBUG)
#define ER_tab_els(tab)\
  ((ER_node_t) ((char *) (tab) + ALLOC_SIZE (sizeof (_ER_heap_tab))))
#else
#define ER_tab_els(tab) _tab_els (tab)
#endif

#if defined(NDEBUG)
#define ER_tab_entries(tab)\
  ((entry_ptr_t) ((char *) (tab) + ALLOC_SIZE (sizeof (_ER_heap_tab))	\
                  + 2 * ER_els_space_bound (tab) * sizeof (val_t)))
#else
#define ER_tab_entries(tab) _tab_entries (tab)
#endif

#if defined(NDEBUG)
#define ER_stack_vars(stack)\
  ((ER_node_t) ((char *) (stack) + ALLOC_SIZE (sizeof (_ER_heap_stack))))
#else
#define ER_stack_vars(stack) _stack_vars (stack)
#endif

#if defined(NDEBUG)
#define ER_stack_block(stack) ER_block_node (stack)
#else
#define ER_stack_block(stack) _stack_block (stack)
#endif

#if defined(NDEBUG)
#define ER_stacks_table(thread)\
  ((stack_ptr_t) ((char *) (thread) + ALLOC_SIZE (sizeof (_ER_heap_thread))))
#else
#define ER_stacks_table(thread) _stacks_table (thread)
#endif

#if defined(NDEBUG)
#define IVAL(first_var, index)\
   ((ER_node_t) ((val_t *) (first_var) + (index)))
#else
#define IVAL(first_var, index)\
  _indexed_val ((ER_node_t) (first_var), index)
#endif

#if defined(NDEBUG)
#define INDEXED_EL_KEY(first_el, index) ((ER_node_t) ((val_t *) (first_el) + 2 * (index)))
#else
#define INDEXED_EL_KEY(first_el, index) _indexed_el_key (first_el, index)
#endif

#if defined(NDEBUG)
#define INDEXED_EL_VAL(first_el, index) ((ER_node_t) ((val_t *) (first_el) + (2 * (index) + 1)))
#else
#define INDEXED_EL_VAL(first_el, index) _indexed_el_val (first_el, index)
#endif

#define DECR_TOP(stack, decr)\
   ER_set_ctop ((stack), ER_ctop (stack) - (decr) * (int) sizeof (val_t))

#define DECR_CTOP(decr) (ctop = IVAL (ctop, -(decr)))

#ifndef NDEBUG
extern size_t _alloc_size(size_t s);

extern char *_hideblock_start (ER_node_t hideblock);

extern char *_pack_els (ER_node_t vect);

extern ER_node_t _unpack_els (ER_node_t vect);

extern ER_node_t _tab_els (ER_node_t tab);

extern entry_ptr_t _tab_entries (ER_node_t tab);

extern ER_node_t _stack_vars (ER_node_t stack);

extern BC_hidden_node_t _stack_block (ER_node_t stack);

extern stack_ptr_t _stacks_table (ER_node_t thread);

extern ER_node_t _indexed_val (ER_node_t first_var, int index);

extern ER_node_t _indexed_el_key (ER_node_t first_entry, int index);

extern ER_node_t _indexed_el_val (ER_node_t first_entry, int index);

#endif

extern int eq_val (val_t *val1_ptr, val_t *val2_ptr, size_t number);

extern size_t stack_size (ER_node_t stack);

extern size_t type_size_table [];
extern size_t val_displ_table [];

extern ER_node_t create_hideblock (size_t length);
extern ER_node_t create_gmp (void);
extern ER_node_t copy_gmp (ER_node_t gmp);

extern ER_node_t create_empty_vector (void);
extern ER_node_t create_unpack_vector (size_t els_number);
extern ER_node_t create_pack_vector (size_t els_number, ER_node_mode_t eltype);
extern ER_node_t expand_vector (ER_node_t vect, size_t el_number);
extern ER_node_t unpack_vector (ER_node_t vect);
extern int eq_vector (ER_node_t v1, ER_node_t v2);
extern ER_node_t copy_vector (ER_node_t vect);
extern ER_node_t create_empty_string (size_t min_length);
extern ER_node_t create_string (const char *string);
extern ER_node_t create_ucodestr (const ucode_t *str);
extern ER_node_t bytevect_to_ucodevect (ER_node_t vect);
extern void try_full_pack (ER_node_t obj);

extern int eq_stack (ER_node_t i1, ER_node_t i2);

extern int eq_table (ER_node_t t1, ER_node_t t2);
extern ER_node_t create_tab (size_t size);
 extern ER_node_t find_tab_el (ER_node_t tab, ER_node_t key, int reserve);
extern int remove_tab_el (ER_node_t tab, ER_node_t key);
extern ER_node_t copy_tab (ER_node_t tab);
extern ER_node_t find_next_key (ER_node_t tab, int start);
extern ER_node_t table_to_vector_conversion (ER_node_t tab);
extern ER_node_t vector_to_table_conversion (ER_node_t vect);

extern void make_immutable (ER_node_t obj);

static void do_always_inline
set_vect_dim (ER_node_t v, ER_node_t vect, int dim)
{
  ER_set_vect (v, vect);
  ER_set_dim (v, dim);
}

static void do_always_inline
set_packed_vect_el (ER_node_t vect, size_t i, ER_node_t vect_el)
{
  d_assert (ER_NODE_MODE (vect) == ER_NM_heap_pack_vect);
  d_assert (ER_NODE_MODE (vect_el) == ER_NM_heap_pack_vect
	    || ER_NODE_MODE (vect_el) == ER_NM_heap_unpack_vect);
  ((ER_node_t *) ER_pack_els (vect)) [i] = vect_el;
}

}

%%

/* This page contains definitions of heap objects. */

/* We could use multiple inheritance to simplify description but it
   hurts interpreter speed, so we use single inheritance here. */

%abstract
heap_obj :: %root
%other
  /* Is it immutable object (immutable object can not be changed).
     The filed is used fo vectors, tables, stacks, and
     hideblocks. */
  immutable : bool_t
  /* These three members are used during garbage collection. */
  it_was_processed : bool_t
  state : stack_state_t
  new_place : char_ptr_t
  unique_number : size_t
;

%abstract
heap_vect_tab :: heap_obj
%other
  allocated_length : size_t  /* actual allocated length of the object. */
  /* Number of elements (vector or table).  It is not used in redirection. */
  els_number : size_t
;

/* The following node represent packed or unpacked representation of
   the vector. */
%abstract
heap_vect :: heap_vect_tab
%other
  /* Type of packed elements.  Used only for packed vector.  We need
     to have the same size of packed and unpacked vector header
     representation.  This is used during transformation unpacked
     vector into packed vector (see heap allocator and GC). */
  pack_vect_el_mode : ER_node_mode_t
  /* Offset in bytes of the zero element of the vector.  When we
     remove 0-th element, we only change this offset.  */
  disp : size_t
;

/* The vector can be stored in packed and unpacked state.  The packed
   storing is possible only when all element have the same type. */
heap_pack_vect :: heap_vect
;

/* Unpack representation of the vector. */
heap_unpack_vect :: heap_vect
;

/* Dino hash table.  The hash table has space for elements.  All new
   elements are placed after already added elements in the space.  The
   table has also space for entries which contains indexes in element
   space.  Entries are actually the hash table.  The number of entries
   is more than possible number of elements in the element space.
   When element space are full (it still can contains removed
   elements), the table is rebuilt.  */
heap_tab :: heap_vect_tab
%other
  entries_number : size_t /* number of all entries in the table */
  /* Current number of deleted elements in the table */
  deleted_els_number : size_t
  /* Bounds of elements and element space.  */
  els_bound, els_space_bound : entry_t
  /* Element index of the last accessed key or EMPTY_ENTRY if
     undefined.  It is used to speed up the repeated access.  */
  last_accessed_el_index : entry_t
  /* The first element is placed immediately after this node in the
     heap.  Element is a pair of values: element key and element val.
     Some element keys can be empty.  It happens after element
     deletions. */
  /* After the elements we have the hash table entries containing the
     element indexes for the corresponding key hash. */
;

/* Code which may have the context (parent environment). */
%abstract
context_heap_obj :: heap_obj
%other
  context_number : int_t        /* Unique number */
  /* May contains more vars than it is really necessary for the block.  */
  all_block_vars_num : int_t
  /* Context in which the variables are searched for.  See also
     comment for heap_thread. */
  context : context_heap_obj
  block_node : BC_hidden_node_t /* Pointer to corresponding block node. */
;

/* Stack of a block. */
heap_stack :: context_heap_obj
%other
  /* Flag of existence of C stack corresponding to given stack.  */
  c_stack_p : bool_t
  /* The stack which will be after execution code in the stack.  Chain
     `context' contains the chain `prev_stack'.  But between
     prev_stack - cstack may be additional environments (stacks). */
  prev_stack : heap_stack
  /* Pointer to the last temporary var of the block at the
     current time.  We use char_ptr_t to prevent the checking. */
  ctop : char_ptr_t
  call_pc : hidden_pc_t
  /* The first var is placed immediately after this node in the heap.
     Temporary vars are placed after all permanent vars. */
;

heap_thread :: context_heap_obj
%other
  /* Here context is context of the function (fiber) which is called
     during thread creation. */
  thread_block : BC_hidden_node_t
  thread_status : thread_status_t
  /* Pointer to the thread which immediatelly started this thread. */
  father : heap_thread
  /* All threades form double linked loop list with these members. */
  prev, next : heap_thread
  /* Value of cstack which will be after the resuming the thread. */
  saved_cstack : heap_stack
  /* Unique thread number. */
  thread_number : int_t
  /* Program counter which will be first after the resuming the thread. */
  saved_pc : hidden_pc_t
;

heap_hideblock :: heap_obj
%other
  /* Length of the block without the header. */
  hideblock_length : rint_t
  /* The data are placed immediately after this node in the heap. */
;

/* Unfortunately gmp is a bit bigger to be in val.  */
heap_gmp :: heap_obj
%other
  /* Don't use directly gmp_ for performance reasons.  Only use ER_mpz_ptr
     instead.  */
  gmp_ : gmp_t
;



/* This page describes values.  All values are allocated as a
   part of heap objects. */
%abstract
val :: %root
;

/*%final*/
undef :: val
;

/*%final*/
nil :: val
;

/*%final*/
hide :: val
%other
  hide : hide_t
;

/*%final*/
hideblock :: val
%other
  hideblock : heap_hideblock
;

/*%final*/
char :: val
%other
  ch : ucode_t
;

/* The following never exist as a separate value, only as a packed
   vector element.  */
/*%final*/
byte :: val
;

/*%final*/
int :: val
%other
  i : rint_t
;

/*%final*/
long :: val
%other
  l : heap_gmp
;

/*%final*/
float :: val
%other
  f : rfloat_t
;

/*%final*/
type :: val
%other
  type : type_val_t
;

/*%final*/
vect :: val
%other
  dim : int_t
  vect : heap_vect
;

/*%final*/
tab :: val
%other
  tab : heap_tab
;

/* The following node can used only as key in a table element. */
/*%final*/
empty_el :: val
;

/*%final*/
code :: val /* fun/class blocks, imlementation funcs */
%other
  code_id : bcid_t
  code_context : context_heap_obj
;

/*%final*/
efun :: val /* external function */
%other
  efdecl : BC_hidden_node_t
;

/*%final*/
stack :: val
%other
  stack : heap_stack
;

/*%final*/
thread :: val
%other
  thread : heap_thread
;

/* The following may be stored only in temporary vars (in left side of
   assignment): */

/* It is a reference for external var.  It is used only in left side
   of assignment stmt. */
/*%final*/
external_var_ref :: val
%other
  external_var_ref : char_ptr_t /* Address of external variable. */
;

%%

/*
Local Variables:
mode:c
End:
*/
