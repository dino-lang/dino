#!/bin/sh

#
# Script to test of MSTA.
#

#
# Usage: msta.tst
#
# The script outputs self-explanatory messages and returns zero exit code if 
# it is all ok.
#

CC='@CC@ @CFLAGS@ @DEFS@'
#CC='gcc'
AWK='@AWK@'
ygram=temp.y
ygramout=temp.output
cgram=temp.c
outputf=_output
outfile=./a.out

echo +++++++++++ Testing MSTA ++++++++++++++++++++++++++++++++

if test x$1 = x
then
    start_test_number=1
else
    if expr $1 + 0 >/dev/null
    then
        start_test_number=`expr $1 + 0`
    else
        echo $script_file:invalid argument $1 2>&1
        exit 1
    fi
fi

result=ok

# Test 1.
if test $result = ok -a $start_test_number -le 1; then
    echo test 1: calculator
    result=fail
    echo ./msta @srcdir@/fcalc.y
    if ./msta @srcdir@/fcalc.y; then
	    echo $CC fcalc.c -lm
	    if $CC fcalc.c -o $outfile -lm; then
	            echo $outfile ">$outputf"
		    if $outfile >$outputf <<'INPUT1'; then
10+10*5
(10 - 5) *3
INPUT1
                        if cmp $outputf - <<'EOF1'; then
	60
	15
EOF1
                                result=ok
                        fi
		    fi
	    fi
    fi
fi

# Test 2.
if test $result = ok -a $start_test_number -le 2; then
    echo test 2: Basile bug
    cat >$ygram <<'TEST2'
/* file QISH/qbootgram.y for MSTA (a super Yacc in Cocom) -*- C -*- */
/* I lost my first qbootgram.y! */
%{

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <strings.h>
#include <string.h>
#include <dlfcn.h>
#include <assert.h>

#include "qish.h"

#define yyerror fatalerr

#warning qbootgram.y is very incomplete
%}

%union {
  /* union describing semantic value */
  int ival;
  double floval;
  struct { int cod; int i; } icodval;
  struct { int cod; unsigned u; } ucodval;
}

%token INT 

%token FLOAT

%token STRING

%token IDENT

%token NIL EXPORT CODE SPEC PARAM SAY OBJ VAR ARG LABEL FORWARD

%token CODELEM_INT CODELEM_VAR CODELEM_OPER CODELEM_OPUB CODELEM_OPSB 
%token CODELEM_OPUH CODELEM_OPSH CODELEM_OPUL CODELEM_OPSL


%type <ival> INT
%type <icodval> CODELEM_INT CODELEM_VAR CODELEM_OPSB  CODELEM_OPSH CODELEM_OPSL
%type <ucodval> CODELEM_OPER CODELEM_OPUB CODELEM_OPUH CODELEM_OPUL 

%start top_level

%% 
/* this use MSTA (Ebnf) extensions for repetition, option, ... */

top_level:  ( directive | definition ) * ;

directive: 
  EXPORT STRING object objval ';'
| SAY STRING ';'
  ;

definition: OBJ IDENT '='  object ';'
| VAR IDENT + ';'
| ARG IDENT + ';'
| LABEL IDENT + ';'
| FORWARD IDENT + ';'
;

objval: INT | object | IDENT | NIL ;

object: code_object | special_object | plain_object;

code_object: CODE '{' [ spec_header ] [ code_param ] code '}' ;

spec_header: '+' objval [ objval [ objval ] ] ';' ;

special_object: SPEC '{' [ spec_header ] spec_content * '}' ;

spec_content: INT | STRING | FLOAT ;

code_param: PARAM objval * ';' ;

code: code_element + ;

code_element:
   CODELEM_INT  
 | CODELEM_VAR 
 | CODELEM_OPER 
 | CODELEM_OPUB INT
 | CODELEM_OPSB INT
 | CODELEM_OPUH INT
 | CODELEM_OPSH INT 
 | CODELEM_OPUL INT
 | CODELEM_OPSL INT
   :

plain_object: [ '!' INT ] '[' objval * ']' ;
%%

/* trailer */
TEST2
    result=fail
    echo ./msta $ygram "2>$outputf"
    if ./msta $ygram 2>$outputf; then
       echo >/dev/null
    else
      if cmp $outputf - <<'EOF2'; then
temp.y:95:17: nonterminal `INT' is declared as token early
temp.y:33:8: here definition of token `INT'
EOF2
	result=ok
      fi
    fi
fi

# Test 3.
if test $result = ok -a $start_test_number -le 3; then
    echo test 3: Cliff Lyons bug
    cat >$ygram <<'TEST3'
%{
int yylex ();
int yyerror (char *s);
%}

%%
h :          {printf ("reduce `h:'\n");}
  | h h 'x'  {printf ("reduce `h: h h 'x''\n");}
  ;
%%

static char input [] = "xxxxxxx";
static int curr_ch = 0;
int yylex ()
{
  if (curr_ch >= sizeof (input) / sizeof (char) - 1)
    return 0;
 printf ("input: %d=%c\n", curr_ch, input [curr_ch]);
 return input [curr_ch++];
}
  
int yyerror (s)  /* Called by yyparse on error */
     char *s;
{
  printf ("%s\n", s);
}

int main ()
{
  exit (yyparse ());
}

TEST3
    result=fail
    echo ./msta $ygram "2>$outputf"
    if ./msta -lr $ygram 2>$outputf && cmp $outputf - <<'EOF3'; then
  Max look ahead is 1 token
  Real look ahead is 1 token
  1 shift/reduce conflict.
EOF3
	    echo $CC $cgram
	    if $CC $cgram -o $outfile; then
	            echo $outfile ">$outputf"
		    if $outfile >$outputf && cmp $outputf - <<'EOF3'; then
reduce `h:'
input: 0=x
reduce `h:'
reduce `h: h h 'x''
input: 1=x
reduce `h:'
reduce `h: h h 'x''
input: 2=x
reduce `h:'
reduce `h: h h 'x''
input: 3=x
reduce `h:'
reduce `h: h h 'x''
input: 4=x
reduce `h:'
reduce `h: h h 'x''
input: 5=x
reduce `h:'
reduce `h: h h 'x''
input: 6=x
reduce `h:'
reduce `h: h h 'x''
EOF3
                                result=ok
		    fi
	    fi
    fi
fi

# Test 4.
if test $result = ok -a $start_test_number -le 4; then
    echo test 4: Cliff Lyons bug
    cat >$ygram <<'TEST4'
%{
int yylex ();
int yyerror (char *s);
%}

%%
h :          {printf ("reduce `h:'\n");}
  | h h 'x'  {printf ("reduce `h: h h 'x''\n");}
  ;
%%

static char input [] = "xxxxxxx";
static int curr_ch = 0;
int yylex ()
{
  if (curr_ch >= sizeof (input) / sizeof (char) - 1)
    return 0;
 printf ("input: %d=%c\n", curr_ch, input [curr_ch]);
 return input [curr_ch++];
}
  
int yyerror (s)  /* Called by yyparse on error */
     char *s;
{
  printf ("%s\n", s);
}

int main ()
{
  exit (yyparse ());
}

TEST4
    result=fail
    echo ./msta -lr $ygram "2>$outputf"
    if ./msta -lr $ygram 2>$outputf && cmp $outputf - <<'EOF4'; then
  Max look ahead is 1 token
  Real look ahead is 1 token
  1 shift/reduce conflict.
EOF4
	    echo $CC $cgram
	    if $CC $cgram -o $outfile; then
	            echo $outfile ">$outputf"
		    if $outfile >$outputf && cmp $outputf - <<'EOF4'; then
reduce `h:'
input: 0=x
reduce `h:'
reduce `h: h h 'x''
input: 1=x
reduce `h:'
reduce `h: h h 'x''
input: 2=x
reduce `h:'
reduce `h: h h 'x''
input: 3=x
reduce `h:'
reduce `h: h h 'x''
input: 4=x
reduce `h:'
reduce `h: h h 'x''
input: 5=x
reduce `h:'
reduce `h: h h 'x''
input: 6=x
reduce `h:'
reduce `h: h h 'x''
EOF4
                                result=ok
		    fi
	    fi
    fi
fi

# Test 5.
if test $result = ok -a $start_test_number -le 5; then
    echo test 5: Conflict on error
    cat >$ygram <<'TEST5'
%token ident var
%%
start : var idlist ':' ident
      | var idlist error
      ;
idlist : idseq
       ;
idseq : ident
      | idseq ',' ident
      | idseq error
      ;
TEST5
    result=fail
    echo ./msta $ygram "2>$outputf"
    if ./msta $ygram 2>$outputf && cmp $outputf - <<'EOF5'; then
  Max look ahead is 1 token
  Real look ahead is 1 token
  1 shift/reduce conflict.
EOF5
      result=ok
    fi
fi

# Test 6.
if test $result = ok -a $start_test_number -le 6; then
    echo test 6: Default reduce on error
    cat >$ygram <<'TEST6'
%%
var : idlist '.'
    ;
idlist : idseq
       ;
idseq :
      | idseq 'a'
      | idseq error
      ;
TEST6
    result=fail
    echo ./msta -v -no-regular-optimization $ygram "2>$outputf"
    if ./msta -v -no-regular-optimization $ygram 2>$outputf && cmp $outputf - <<'EOF6'; then
  Max look ahead is 1 token
  Real look ahead is 1 token
EOF6
      if $AWK '/State 3/ {i = 1}  /State 4/ {i =0} i {print}' $ygramout >$outputf && cmp $outputf - <<'EOF6'; then
State 3

	idlist : idseq .  (2)
	idseq : idseq . 'a'(97)  (4)
	idseq : idseq . error  (5)

	'a'(97)  shift 4
	error  shift 5
	.  reduce 2


EOF6
        result=ok
      fi
    fi
fi

# Test 7.
if test $result = ok -a $start_test_number -le 7; then
    echo test 7: Default reduce on error
    cat >$ygram <<'TEST7'
%%
var : idlist '.'
    ;
idlist : idseq
       ;
idseq :
      | idseq 'a'
      | idseq error
      ;
TEST7
    result=fail
    echo ./msta -v -no-error-reduce -no-regular-optimization $ygram "2>$outputf"
    if ./msta -v -no-error-reduce -no-regular-optimization $ygram 2>$outputf && cmp $outputf - <<'EOF7'; then
  Max look ahead is 1 token
  Real look ahead is 1 token
EOF7
      if $AWK '/State 3/ {i = 1}  /State 4/ {i =0} i {print}' $ygramout >$outputf && cmp $outputf - <<'EOF7';then
State 3

	idlist : idseq .  (2)
	idseq : idseq . 'a'(97)  (4)
	idseq : idseq . error  (5)

	'.'(46)  reduce 2
	'a'(97)  shift 4
	error  shift 5
	.  error


EOF7
        result=ok
      fi
    fi
fi

# Test 8.
if test $result = ok -a $start_test_number -le 8; then
    echo test 8: Conflict on error without reporting
    cat >$ygram <<'TEST8'
%token identifier
%%
start : formal_parameter_section_list
      ;
formal_parameter_section_list
  : formal_parameter_section
  | formal_parameter_section_list ';' formal_parameter_section
  | formal_parameter_section_list error
  | error
  ;
formal_parameter_section : identifier_list ':' identifier
                         | identifier_list error identifier
                         | identifier_list error
                         ;
identifier_list : identifier_sequence
identifier_sequence : identifier
                    | error
                    | identifier_sequence ',' identifier
                    | identifier_sequence ',' error
                    ;
TEST8
    result=fail
    echo ./msta -no-error-conflict $ygram "2>$outputf"
    if ./msta -no-error-conflict $ygram 2>$outputf && cmp $outputf - <<'EOF8'; then
  Max look ahead is 1 token
  Real look ahead is 1 token
EOF8
      result=ok
    fi
fi

# Test 9.
if test $result = ok -a $start_test_number -le 9; then
    echo test 9: Conflict on error with reporting
    cat >$ygram <<'TEST9'
%token identifier
%%
start : formal_parameter_section_list
      ;
formal_parameter_section_list
  : formal_parameter_section
  | formal_parameter_section_list ';' formal_parameter_section
  | formal_parameter_section_list error
  | error
  ;
formal_parameter_section : identifier_list ':' identifier
                         | identifier_list error identifier
                         | identifier_list error
                         ;
identifier_list : identifier_sequence
identifier_sequence : identifier
                    | error
                    | identifier_sequence ',' identifier
                    | identifier_sequence ',' error
                    ;
TEST9
    result=fail
    echo ./msta $ygram "2>$outputf"
    if ./msta $ygram 2>$outputf && cmp $outputf - <<'EOF9'; then
  Max look ahead is 1 token
  Real look ahead is 1 token
  1 reduce/reduce conflict.
EOF9
      result=ok
    fi
fi

# Test 10.
if test $result = ok -a $start_test_number -le 10; then
    echo test 10: "H. Basten's grammar (generated a buggy parser)."
    cat >$ygram <<'TEST10'
%token a
%token b
%token c

%%
START : S
;

S : A C
| B C b
;

C : c C b
| c b
;

A : a
;

B : a
;
TEST10
    result=fail
    echo ./msta -la 9 -lr -full-lr-set -no-lalr-optimization -no-regular-optimization -no-error-conflict -no-error-reduce -lr-situation-context $ygram "2>$outputf"
    if ./msta -la 9 -lr -full-lr-set -no-lalr-optimization -no-regular-optimization -no-error-conflict -no-error-reduce -lr-situation-context $ygram 2>$outputf && cmp $outputf - <<'EOF10'; then
  Max look ahead is 9 tokens
  Real look ahead is 9 tokens
  5 reduce/reduce conflicts.
EOF10
      result=ok
    fi
fi

# Test 11.
if test $result = ok -a $start_test_number -le 11; then
    echo test 11: "Another H. Basten's grammar (looping)."
    cat >$ygram <<'TEST11'
%token b
%token a

%%

S : b A
| a B
;

A : b b A A a
| b a A
| a S
| a
;

B : a B B
| b S
| b
;
TEST11
    result=fail
    echo ./msta -la 7 -lr -full-lr-set -no-lalr-optimization -no-regular-optimization -no-error-conflict -no-error-reduce -lr-situation-context $ygram "2>$outputf"
    if ./msta -la 7 -lr -full-lr-set -no-lalr-optimization -no-regular-optimization -no-error-conflict -no-error-reduce -lr-situation-context $ygram 2>$outputf && cmp $outputf - <<'EOF11'; then
  Max look ahead is 7 tokens
  Real look ahead is 7 tokens
  33878 shift/reduce conflicts.
EOF11
      result=ok
    fi
fi

# Test 12.
if test $result = ok -a $start_test_number -le 12; then
    echo test 12: "One more H. Basten's grammar (looping)."
    cat >$ygram <<'TEST12'
%token a
%token b
%token c
%token d

%%

START : S ;

S : B C | A B ;

A : a | B A D ;

B : b D | C C ;

C : c | A B ;

D : d ;
TEST12
    result=fail
    echo ./msta -la 2 -lr -full-lr-set -no-lalr-optimization -no-regular-optimization -no-error-conflict -no-error-reduce -lr-situation-context $ygram "2>$outputf"
    if ./msta -la 2 -lr -full-lr-set -no-lalr-optimization -no-regular-optimization -no-error-conflict -no-error-reduce -lr-situation-context $ygram 2>$outputf && cmp $outputf - <<'EOF12'; then
  Max look ahead is 2 tokens
  Real look ahead is 2 tokens
  73 shift/reduce conflicts.
EOF12
      result=ok
    fi
fi

# Final message

if test $result = ok; then
	echo it is all ok
        rm -f $outfile fcalc.c $outputf $ygram $ygramout $cgram
	exit 0
else
	echo '***' test is failed see $ygram $ygramout $outputf
	exit 1
fi
