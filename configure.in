dnl Process this file with autoconf to produce a configure script.
AC_INIT(DINO/d_main.c)
AC_CONFIG_HEADER(AMMUNITION/cocom-config.h)

dnl AC_CONFIG_SUBDIRS(REGEX)

AC_CONFIG_SUBDIRS(ONIGURUMA)

dnl Checks for programs.
AC_PROG_AWK
dnl Try C++ before C because configure reports cros-compiler for CXX sometimes.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_YACC
AC_PROG_LEX
AC_PROG_SED
AC_PROG_EGREP

AC_AIX
AC_FUNC_GETMNTENT
AC_ISC_POSIX
AC_MINIX
AC_STDC_HEADERS
AC_HAVE_HEADERS(string.h)

AC_ALLOCA
AC_CONST

dnl Checks for libraries.
AC_CHECK_LIB(gmp, __gmpz_init, found=yes,found=no)
if test $found = yes; then
  AC_CHECK_LIB(gmp, __gmpz_init)
else
  echo +++DINO requires gmp library -- Good bye.
  exit 1
fi
AC_CHECK_LIB(m, log)
AC_CHECK_LIB(dl, dlopen)

dnl Checks for header files.
AC_CHECK_HEADERS(assert.h limits.h errno.h float.h time.h dlfcn.h unistd.h sys/time.h sys/socket.h gmp.h iconv.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_CHECK_SIZEOF(size_t)
AC_TYPE_GETGROUPS
AC_CHECK_SIZEOF(char *)
dnl There is no clock_t `sys/types.h', or `stdlib.h' or `stddef.h' on Linux
dnl I think checking time.h will be sufficient.
dnl AC_CHECK_TYPES([clock_t], [], AC_DEFINE([clock_t], [long], []))

AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/socket.h>], [socklen_t l;], socklen=yes, socklen=no)
AC_MSG_CHECKING([whether socklen_t was defined])
if test $socklen = no; then
 AC_MSG_RESULT([no])
 AC_DEFINE([socklen_t], [size_t], [Define to `size_t' if socklen_t is not defined in <sys/socket.h>.])
else
 AC_MSG_RESULT([yes])
fi

dnl Checks for library functions.
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(strerror memcpy memset memcmp memmove vsprintf dlopen getgroups\
               strtol strtoll strtoull strtod setitimer sigaction sigemptyset)

AC_SUBST(YAEPLIB)
AC_SUBST(YAEPDIR)
YAEPLIB=cocom
YAEPDIR=../AMMUNITION

AC_SUBST(START_SPRUT_OPTIONS)
AC_SUBST(C_DEBUG_DEFINE)
if test x$cocom_debug = x -a x$dino_debug = x; then
  C_DEBUG_DEFINE=-DNDEBUG
  START_SPRUT_OPTIONS=-only-macro
else
  CFLAGS=-g3
  AC_MSG_CHECKING([whether CC supports -g3])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])],
      [AC_MSG_RESULT([yes])]
      [g3=yes],
      [AC_MSG_RESULT([no])]
  )

  if test "$g3" = yes; then
    CFLAGS='-O0 -g3'
    CXXFLAGS='-O0 -g3'
  else
    CFLAGS='-O0 -g'
    CXXFLAGS='-O0 -g'
  fi
  C_DEBUG_DEFINE=
  START_SPRUT_OPTIONS=-debug
fi

AC_SUBST(DINO_GCC_FPIC)
AC_SUBST(EXTERN_GCC_FPIC)
AC_SUBST(DINO_LIB_SUFFIX)
AC_SUBST(EXTERN_LIB_SUFFIX)
AC_SUBST(DINO_MAKELIB)
AC_SUBST(EXTERN_MAKELIB)
AC_SUBST(DINO_AFTER_MAKELIB)
AC_SUBST(EXTERN_AFTER_MAKELIB)

AC_SUBST(DINO_ADDITIONAL_LINK_OPTION)

AC_SUBST(DINO_LIB_NAME)
AC_SUBST(DINO_ADDITIONAL_LIBS)

dnl if test x$no_shlib != x -o x$cocom_debug != x -o x$dino_debug != x; then
dnl   no_extern_shlib=yes
dnl   dino_shlib=
dnl fi

system=`uname`.`uname -r`

DINO_LIB_NAME=libdino
DINO_ADDITIONAL_LIBS=

GCC_FPIC=
case $system in
	Linux*)
	  GCC_FPIC=-fPIC
	  LIB_SUFFIX=so
	  MAKELIB="\$(CC) -shared -Wl,-soname,\\\$\$0 -o \\\$\$0"
	  AFTER_MAKELIB="echo \\\$\$0"
# The following option is needed if we use no shared dino library but
# shared external library
          SPECIAL_LINK_OPTION=-rdynamic
          ;;
	Darwin*)
	  GCC_FPIC=-fPIC
	  LIB_SUFFIX=so
	  MAKELIB="\$(CC) -shared -Wl,-undefined,dynamic_lookup -Wl,-install_name,\\\$\$0 -o \\\$\$0"
	  AFTER_MAKELIB="echo \\\$\$0"
# The following option is needed if we use no shared dino library but
# shared external library
          SPECIAL_LINK_OPTION=-rdynamic
          ;;
	SunOS.5*)
	  GCC_FPIC=-fPIC
	  LIB_SUFFIX=so
	  MAKELIB="/usr/ccs/bin/ld -G -z text -o \\\$\$0"
	  AFTER_MAKELIB="echo \\\$\$0"
# Export symbols. (this is GNU ld).
# So Yo should have gcc and GNU loader.
          save=$CFLAGS
          CFLAGS=-Wl,-E
          AC_TRY_RUN(int i;main(){exit(0);}, gnu_ld=yes, gnu_ld=)
          CFLAGS=$save
          if test x$gnu_ld != x; then
            SPECIAL_LINK_OPTION=-Wl,-E
          else
	    SPECIAL_LINK_OPTION=
          fi
	  ;;
	IRIX.5*)
	  LIB_SUFFIX=so
	  MAKELIB="ld -shared -rdata_shared -o \\\$\$0"
	  AFTER_MAKELIB="echo \\\$\$0"
          SPECIAL_LINK_OPTION=
	  ;;
	IRIX.6*|IRIX64*)
	  LIB_SUFFIX=so
	  MAKELIB="ld -n32 -shared -rdata_shared -o \\\$\$0"
	  AFTER_MAKELIB="echo \\\$\$0"
          SPECIAL_LINK_OPTION=
	  ;;
	OSF1*)
	  GCC_FPIC=-fPIC
	  LIB_SUFFIX=so
	  MAKELIB="ld -shared -expect_unresolved \"*\" -o \\\$\$0"
	  AFTER_MAKELIB="echo \\\$\$0"
          SPECIAL_LINK_OPTION=
          if test x$no_extern_shlib = x -a x$dino_shlib = x; then
            dino_shlib=yes
          fi
	  ;;
	AIX*)
	  GCC_FPIC=-DAIX_DLOPEN
	  LIB_SUFFIX=so
	  MAKELIB="$top_srcdir/DINO/ldAix /bin/ld -bhalt:4 -bM:SRE -bE:lib.exp -H512 -T512 -o \\\$\$0 -lc -lld"
	  AFTER_MAKELIB="echo \\\$\$0"
	  DINO_ADDITIONAL_LIBS='-lld'
          SPECIAL_LINK_OPTION=
# The following line prohibits shlibs because AIX implementation
# requires to link all external libraries during building interpreter.
# This is useless.  So better use dino library and link it with
# call_extern and main to make an extended interpreter.
	  dino_shlib=
	  no_extern_shlib=yes
	  no_shlib=yes
	  ;;
	*)
	  dino_shlib=
	  no_extern_shlib=yes
	  no_shlib=yes
	  ;;
esac


if test "$GCC" = yes && test x$cocom_debug = x -a x$dino_debug = x; then
  my_save_cflags="$CFLAGS"
  CFLAGS=-Ofast
  AC_MSG_CHECKING([whether CC supports -Ofast])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])],
      [AC_MSG_RESULT([yes])]
      [fast=yes],
      [AC_MSG_RESULT([no])]
  )
  CFLAGS="$my_save_cflags"
  if test "$fast" = yes; then
    CFLAGS="`echo $CFLAGS|sed s/-O2//` -Ofast"
    CXXFLAGS="`echo $CXXFLAGS|sed s/-O2//` -Ofast"
  else
    CFLAGS="`echo $CFLAGS|sed s/-O2//` -O3"
    CXXFLAGS="`echo $CXXFLAGS|sed s/-O2//` -O3"
  fi

  my_save_cflags="$CFLAGS"
  CFLAGS=-flto
  AC_MSG_CHECKING([whether CC supports -flto])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])],
      [AC_MSG_RESULT([yes])]
      [lto=yes],
      [AC_MSG_RESULT([no])]
  )

  CFLAGS="$my_save_cflags"

  fatlto=no
  if test "$lto" = yes; then
      CFLAGS="-flto -ffat-lto-objects"
      AC_MSG_CHECKING([whether CC supports -ffat-lto-objects])
      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])],
            [AC_MSG_RESULT([yes])]
	    [fatlto=yes],
	    [AC_MSG_RESULT([no])]
      )
      CFLAGS="$my_save_cflags"
  fi
  
  if test "$lto" = yes; then
    CFLAGS="`echo $CFLAGS` -flto"
    CXXFLAGS="`echo $CXXFLAGS` -flto"
    if test "$fatlto" = yes; then
        CFLAGS="`echo $CFLAGS` -ffat-lto-objects"
	CXXFLAGS="`echo $CXXFLAGS` -ffat-lto-objects"
    fi
  fi

  system=`uname -m`
  case $system in
	i386*|i486*|i586*|i686*)
  	  CFLAGS="$CFLAGS -fomit-frame-pointer"
  	  CXXFLAGS="$CXXFLAGS -fomit-frame-pointer"
          ;;
	*)
	  ;;
  esac
fi

AC_CHECK_LIB(xnet, inet_ntoa, xnet=yes, xnet=not)

if test $xnet = yes; then
   SPECIAL_LINK_OPTION="$SPECIAL_LINK_OPTION -lxnet"
fi

AC_TRY_RUN([#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
main () {struct in_addr i;inet_aton ("127.0.0.1", &i);return 0;}], inet_aton=yes, inet_aton=no)
AC_MSG_CHECKING([whether inet_aton was defined])
if test $inet_aton = yes; then
 AC_MSG_RESULT([yes])
 AC_DEFINE([HAVE_INET_ATON], [], [inet_aton is present.])
else
 AC_MSG_RESULT([no])
fi

DINO_LIB_SUFFIX=$LIB_SUFFIX
EXTERN_LIB_SUFFIX=$LIB_SUFFIX
DINO_GCC_FPIC=$GCC_FPIC
EXTERN_GCC_FPIC=$GCC_FPIC
DINO_MAKELIB=$MAKELIB
EXTERN_MAKELIB=$MAKELIB
DINO_AFTER_MAKELIB=$AFTER_MAKELIB
EXTERN_AFTER_MAKELIB=$AFTER_MAKELIB

DINO_ADDITIONAL_LINK_OPTION=

if test x$dino_shlib = x; then
  echo +++We will not use DINO shared library
  DINO_GCC_FPIC=-DNO_DINO_SHLIB
  DINO_LIB_SUFFIX=a
  DINO_MAKELIB="ar rc \\\$\$0"
  DINO_AFTER_MAKELIB="$RANLIB \\\$\$0;echo \\\$\$0"
  DINO_ADDITIONAL_LIBS="$DINO_LIB_NAME.$DINO_LIB_SUFFIX"
  if test x$no_extern_shlib = x; then
    DINO_ADDITIONAL_LINK_OPTION=$SPECIAL_LINK_OPTION
  fi
else
  echo +++We will use DINO shared library
fi

if test x$no_extern_shlib != x; then
  echo +++We will not use shared library for externals
  EXTERN_GCC_FPIC=-DNO_EXTERN_SHLIB
  DINO_GCC_FPIC="$DINO_GCC_FPIC -DNO_EXTERN_SHLIB"
  EXTERN_LIB_SUFFIX=a
  EXTERN_MAKELIB="ar rc \\\$\$0"
  EXTERN_AFTER_MAKELIB="$RANLIB \\\$\$0;echo \\\$\$0"
  DINO_ADDITIONAL_LIBS="$DINO_ADDITIONAL_LIBS d_mpi.$EXTERN_LIB_SUFFIX d_ieee.$EXTERN_LIB_SUFFIX d_ipcerr.$EXTERN_LIB_SUFFIX d_socket.$EXTERN_LIB_SUFFIX"
else
  echo +++We will use shared library for externals
fi

output_files="DINO/Makefile DINO/dino.tst\
          SHILKA/Makefile MSTA/Makefile SPRUT/Makefile\
          AMMUNITION/Makefile AMMUNITION/allocate.tst AMMUNITION/vlobject.tst\
          AMMUNITION/objstack.tst AMMUNITION/hashtab.tst\
          AMMUNITION/spset.tst AMMUNITION/cspset.tst\
          AMMUNITION/commline.tst AMMUNITION/position.tst\
          AMMUNITION/errors.tst AMMUNITION/ticker.tst AMMUNITION/bits.tst\
          AMMUNITION/arithm.tst AMMUNITION/IEEE.tst AMMUNITION/yaep.tst\
          AMMUNITION/allocate++.tst AMMUNITION/vlobject++.tst\
          AMMUNITION/objstack++.tst AMMUNITION/hashtab++.tst\
          AMMUNITION/spset++.tst AMMUNITION/cspset++.tst\
          AMMUNITION/commline++.tst AMMUNITION/position++.tst\
          AMMUNITION/errors++.tst AMMUNITION/ticker++.tst\
          AMMUNITION/bits++.tst AMMUNITION/arithm++.tst AMMUNITION/IEEE++.tst\
          AMMUNITION/yaep++.tst AMMUNITION/compare_parsers.tst\
          MSTA/msta.tst MSTA/quality.tst\
	  SHILKA/shilka.tst SHILKA/compare.tst\
          Makefile"

# COCOM only start
output_files="$output_files OKA/Makefile\
             OKA/SCHEDULE/schedule.tst OKA/SCHEDULE/schedule++.tst\
 	     NONA/Makefile"
# COCOM only end

AC_OUTPUT($output_files)
