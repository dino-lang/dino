#!/bin/sh
# @configure_input@

#
# Script to test sparse set package (files `spset.h', `spset.c').
#
#   Copyright (C) 2014 Vladimir Makarov.
#
#   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>
#
#   This is part of package for work with hash tables; you can
#   redistribute it and/or modify it under the terms of the GNU Library
#   General Public License as published by the Free Software
#   Foundation; either version 2, or (at your option) any later
#   version.
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with GNU CC; see the file COPYING.  If not, write to
#   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
#   MA 02111-1307, USA.
#
#
# Usage: spset.tst [start_test_number]
#
# The script outputs self-explanatory messages and returns zero exit code if 
# it is all ok.
#

script_file=$0
prefix=`basename $script_file .tst`
CC='@CC@'
CC_options='@CFLAGS@ @DEFS@ -I. -I@srcdir@/'
source_addfiles='@srcdir@/allocate.c @srcdir@/ticker.c @srcdir@/spset.c'
addfiles="${prefix}_allocate.o ${prefix}_spset.o ${prefix}_ticker.o"
test_file=${prefix}_tspset.c
outfile=./${prefix}_a.out
include_file=${prefix}_temp.h

if test x$1 = x
then
    start_test_number=1
else
    if expr $1 + 0 >/dev/null
    then
        start_test_number=`expr $1 + 0`
    else
        echo $script_file:invalid argument $1 2>&1
        exit 1
    fi
fi

# Compilation of addfiles

for i in $source_addfiles; do
  echo '      ' $CC $CC_options -c $i -o ${prefix}_`basename $i .c`.o
  if $CC $CC_options -c $i -o ${prefix}_`basename $i .c`.o; then
        result=ok
  else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
  fi
done

cat <<EOF >${include_file}
#include <stdlib.h>
#include <string.h>
#include "spset.h"
static int
cmp (const void *p1, const void *p2)
{
   spset_elem_t el1 = *(const spset_elem_t *) p1;
   spset_elem_t el2 = *(const spset_elem_t *) p2;
   return (el1 == el2 ? 0 : el1 < el2 ? -1 : 1);
}

static spset_elem_t els_vec[1000];

static size_t
get_vec_set (spset_t *s)
{
   spset_iterator_t si;
   spset_elem_t el;
   size_t n = 0;

   EXECUTE_FOR_EACH_SPSET_ELEM (s, el, si)
     els_vec[n++] = el;

   qsort (els_vec, n, sizeof (spset_elem_t), cmp);
   return n;
}

static void
check (spset_t *s, spset_elem_t *els, size_t num)
{
  size_t n = get_vec_set (s);
  if (n != num || memcmp (els, els_vec, sizeof (spset_elem_t) * n) != 0)
    exit (1);
}
EOF

# Test 1.
if test $result = ok -a $start_test_number -le 1; then
        cat >$test_file <<'TEST1'
#include "spset_temp.h"
main ()
{
  spset_t s;
  spset_elem_t v[] = {1, 2, 3, 4};
  int i;

  spset_init (&s, 0);
  check (&s, v, 0);
  for (i = 0; i < sizeof (v) / sizeof (spset_elem_t); i++)
    if (! spset_insert (&s, v[i]))
      exit (1);
  check (&s, v, sizeof (v) / sizeof (spset_elem_t));
  if (spset_insert (&s, 1))
    exit (1);
  check (&s, v, sizeof (v) / sizeof (spset_elem_t));
  spset_finish (&s);
  exit (0);
}
TEST1
        echo test 1:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 2.
if test $result = ok -a $start_test_number -le 2; then
        cat >$test_file <<'TEST2'
#include "spset_temp.h"
main ()
{
  spset_t s;
  spset_elem_t v[] = {1, 2, 3, 4};
  int i;

  spset_init (&s, 0);
  check (&s, v, 0);
  for (i = 0; i < sizeof (v) / sizeof (spset_elem_t); i++)
    spset_insert (&s, v[i]);
  if (spset_remove (&s, 20))
    exit (1);
  if (spset_remove (&s, 10000))
    exit (1);
  check (&s, v, sizeof (v) / sizeof (spset_elem_t));
  for (i = 0; i < sizeof (v) / sizeof (spset_elem_t); i++)
    if (! spset_remove (&s, v[i]))
      exit (1);
  spset_shrink (&s);
  if (spset_size (&s) != 2)
    exit (1);
  check (&s, v, 0);
  spset_finish (&s);
  exit (0);
}

TEST2
        echo test 2:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 3.
if test $result = ok -a $start_test_number -le 3; then
        cat >$test_file <<'TEST3'
#include "spset_temp.h"
main ()
{
  spset_t s1, s2;
  spset_elem_t v[] = {1, 2, 3, 4};
  int i;

  spset_init (&s1, 0);
  spset_init (&s2, 0);
  spset_copy (&s1, &s1);
  check (&s1, v, 0);
  for (i = 0; i < sizeof (v) / sizeof (spset_elem_t); i++)
    spset_insert (&s2, v[i]);
  spset_copy (&s1, &s2);
  check (&s1, v, sizeof (v) / sizeof (spset_elem_t));
  check (&s2, v, sizeof (v) / sizeof (spset_elem_t));
  spset_finish (&s1);
  spset_finish (&s2);
  exit (0);
}

TEST3
        echo test 3:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 4.
if test $result = ok -a $start_test_number -le 4; then
        cat >$test_file <<'TEST4'
#include "spset_temp.h"
main ()
{
  spset_t s1, s2;
  spset_elem_t v1[] = {1, 2, 3, 4};
  spset_elem_t v2[] = {0, 2, 5};
  int i;

  spset_init (&s1, 0);
  spset_init (&s2, 0);
  spset_swap (&s1, &s1);
  check (&s1, v1, 0);
  check (&s2, v1, 0);
  for (i = 0; i < sizeof (v1) / sizeof (spset_elem_t); i++)
    spset_insert (&s1, v1[i]);
  for (i = 0; i < sizeof (v2) / sizeof (spset_elem_t); i++)
    spset_insert (&s2, v2[i]);
  spset_swap (&s1, &s2);
  check (&s1, v2, sizeof (v2) / sizeof (spset_elem_t));
  check (&s2, v1, sizeof (v1) / sizeof (spset_elem_t));
  if (spset_cardinality (&s1) != 3 || spset_cardinality (&s2) != 4)
    exit (1);
  spset_finish (&s1);
  spset_finish (&s2);
  exit (0);
}
TEST4
        echo test 4:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 5.
if test $result = ok -a $start_test_number -le 5; then
        cat >$test_file <<'TEST5'
#include "spset_temp.h"
main ()
{
  spset_t s;
  spset_elem_t v[] = {1, 2, 3, 4};
  int i;

  spset_init (&s, 0);
  if (spset_size (&s) != 2 || spset_cardinality (&s) != 0)
    exit (1);
  for (i = 0; i < sizeof (v) / sizeof (spset_elem_t); i++)
    spset_insert (&s, v[i]);
  if (spset_size (&s) != 8 || spset_cardinality (&s) != 4)
    exit (1);
  spset_finish (&s);
  exit (0);
}
TEST5
        echo test 5:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 6.
if test $result = ok -a $start_test_number -le 6; then
        cat >$test_file <<'TEST6'
#include "spset_temp.h"
main ()
{
  spset_t s;
  spset_elem_t v[] = {1, 2, 3, 4};
  int i;

  spset_init (&s, 0);
  if (spset_in_p (&s, 1) || spset_in_p (&s, 4) || spset_in_p (&s, 1000000))
    exit (1);
  for (i = 0; i < sizeof (v) / sizeof (spset_elem_t); i++)
    spset_insert (&s, v[i]);
  for (i = 0; i < sizeof (v) / sizeof (spset_elem_t); i++)
    if (! spset_in_p (&s, v[i]))
      exit (1);
  if (spset_in_p (&s, 0) || spset_in_p (&s, 5))
    exit (1);
  spset_finish (&s);
  exit (0);
}
TEST6
        echo test 6:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 7.
if test $result = ok -a $start_test_number -le 7; then
        cat >$test_file <<'TEST7'
#include "spset_temp.h"
main ()
{
  spset_t s;
  spset_elem_t v[] = {1, 2, 3, 4};
  int i;

  spset_init (&s, 0);
  if (spset_clear (&s))
    exit (1);
  for (i = 0; i < sizeof (v) / sizeof (spset_elem_t); i++)
    spset_insert (&s, v[i]);
  if (! spset_clear (&s))
    exit (1);
  if (spset_cardinality (&s) != 0)
    exit (1);
  check (&s, v, 0);
  spset_finish (&s);
  exit (0);
}
TEST7
        echo test 7:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 8.
if test $result = ok -a $start_test_number -le 8; then
        cat >$test_file <<'TEST8'
#include "spset_temp.h"
main ()
{
  spset_t s1, s2;
  spset_elem_t v1[] = {1, 2, 3, 4};
  spset_elem_t v2[] = {0, 2, 5};
  int i;

  spset_init (&s1, 0);
  spset_init (&s2, 0);
  if (! spset_equal_p (&s1, &s2))
    exit (1);
  for (i = 0; i < sizeof (v1) / sizeof (spset_elem_t); i++)
    spset_insert (&s1, v1[i]);
  if (! spset_equal_p (&s1, &s1))
    exit (1);
  for (i = 0; i < sizeof (v2) / sizeof (spset_elem_t); i++)
    spset_insert (&s2, v2[i]);
  if (spset_equal_p (&s1, &s2))
    exit (1);
  spset_finish (&s1);
  spset_finish (&s2);
  exit (0);
}
TEST8
        echo test 8:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 9.
if test $result = ok -a $start_test_number -le 9; then
        cat >$test_file <<'TEST9'
#include "spset_temp.h"
main ()
{
  spset_t s1, s2;
  spset_elem_t v1[] = {1, 2, 3, 4};
  spset_elem_t v2[] = {0, 2, 5};
  spset_elem_t v3[] = {0, 1, 2, 3, 4, 5};
  int i;

  spset_init (&s1, 0);
  spset_init (&s2, 0);
  if (spset_unity (&s2, &s1))
    exit (1);
  check (&s2, NULL, 0);
  for (i = 0; i < sizeof (v1) / sizeof (spset_elem_t); i++)
    spset_insert (&s1, v1[i]);
  if (spset_unity (&s1, &s2))
    exit (1);
  check (&s1, v1, sizeof (v1) / sizeof (spset_elem_t));
  check (&s2, NULL, 0);
  if (spset_unity (&s1, &s1))
    exit (1);
  check (&s1, v1, sizeof (v1) / sizeof (spset_elem_t));
  for (i = 0; i < sizeof (v2) / sizeof (spset_elem_t); i++)
    spset_insert (&s2, v2[i]);
  if (! spset_unity (&s1, &s2))
    exit (1);
  check (&s1, v3, sizeof (v3) / sizeof (spset_elem_t));
  check (&s2, v2, sizeof (v2) / sizeof (spset_elem_t));
  spset_finish (&s1);
  spset_finish (&s2);
  exit (0);
}
TEST9
        echo test 9:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 10.
if test $result = ok -a $start_test_number -le 10; then
        cat >$test_file <<'TEST10'
#include "spset_temp.h"
main ()
{
  spset_t s1, s2;
  spset_elem_t v1[] = {1, 2, 3, 4};
  spset_elem_t v2[] = {0, 2, 5};
  spset_elem_t v3[] = {2};
  int i;

  spset_init (&s1, 0);
  spset_init (&s2, 0);
  spset_intersect (&s2, &s1);
  check (&s2, NULL, 0);
  for (i = 0; i < sizeof (v1) / sizeof (spset_elem_t); i++)
    spset_insert (&s1, v1[i]);
  if (! spset_intersect (&s1, &s2))
    exit (1);
  check (&s1, NULL, 0);
  check (&s2, NULL, 0);
  for (i = 0; i < sizeof (v1) / sizeof (spset_elem_t); i++)
    spset_insert (&s1, v1[i]);
  if (spset_intersect (&s1, &s1))
    exit (1);
  check (&s1, v1, sizeof (v1) / sizeof (spset_elem_t));
  for (i = 0; i < sizeof (v2) / sizeof (spset_elem_t); i++)
    spset_insert (&s2, v2[i]);
  if (! spset_intersect (&s1, &s2))
    exit (1);
  check (&s1, v3, sizeof (v3) / sizeof (spset_elem_t));
  check (&s2, v2, sizeof (v2) / sizeof (spset_elem_t));
  for (i = 0; i < sizeof (v1) / sizeof (spset_elem_t); i++)
    spset_insert (&s1, v1[i]);
  if (! spset_intersect (&s2, &s1))
    exit (1);
  check (&s2, v3, sizeof (v3) / sizeof (spset_elem_t));
  check (&s1, v1, sizeof (v1) / sizeof (spset_elem_t));
  spset_finish (&s1);
  spset_finish (&s2);
  exit (0);
}
TEST10
        echo test 10:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 11.
if test $result = ok -a $start_test_number -le 11; then
        cat >$test_file <<'TEST11'
#include "spset_temp.h"
main ()
{
  spset_t s1, s2;
  spset_elem_t v1[] = {1, 2, 3, 4};
  spset_elem_t v2[] = {0, 2, 5};
  spset_elem_t v3[] = {1, 3, 4};
  spset_elem_t v4[] = {0, 5};
  int i;

  spset_init (&s1, 0);
  spset_init (&s2, 0);
  if (spset_diff (&s2, &s1))
    exit (1);
  check (&s2, NULL, 0);
  check (&s1, NULL, 0);
  for (i = 0; i < sizeof (v1) / sizeof (spset_elem_t); i++)
    spset_insert (&s1, v1[i]);
  if (spset_diff (&s1, &s2))
    exit (1);
  check (&s1, v1, sizeof (v1) / sizeof (spset_elem_t));
  check (&s2, NULL, 0);
  if (! spset_diff (&s1, &s1))
    exit (1);
  check (&s1, NULL, 0);
  for (i = 0; i < sizeof (v1) / sizeof (spset_elem_t); i++)
    spset_insert (&s1, v1[i]);
  for (i = 0; i < sizeof (v2) / sizeof (spset_elem_t); i++)
    spset_insert (&s2, v2[i]);
  if (! spset_diff (&s1, &s2))
    exit (1);
  check (&s1, v3, sizeof (v3) / sizeof (spset_elem_t));
  check (&s2, v2, sizeof (v2) / sizeof (spset_elem_t));
  for (i = 0; i < sizeof (v1) / sizeof (spset_elem_t); i++)
    spset_insert (&s1, v1[i]);
  if (! spset_diff (&s2, &s1))
    exit (1);
  check (&s2, v4, sizeof (v4) / sizeof (spset_elem_t));
  check (&s1, v1, sizeof (v1) / sizeof (spset_elem_t));
  spset_finish (&s1);
  spset_finish (&s2);
  exit (0);
}
TEST11
        echo test 11:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 12.
if test $result = ok -a $start_test_number -le 12; then
        cat >$test_file <<'TEST12'
#include "spset_temp.h"
#include "ticker.h"
#ifdef linux
#include <unistd.h>
#endif

int n;
main ()
{
  spset_t s1, s2, s3, s4;
  int i, iter;
  ticker_t t = create_ticker ();
#ifdef linux
  char *start = sbrk (0);
#endif

  for (iter = 0; iter < 1000; iter++)
    {
      spset_init (&s1, 0);
      spset_init (&s2, 0);
      spset_init (&s3, 0);
      spset_init (&s4, 0);
      if (spset_diff (&s2, &s1))
        exit (1);
      check (&s2, NULL, 0);
      check (&s1, NULL, 0);
      for (i = 0; i < 1000; i++)
        spset_insert (&s1, random () % 10000);
      for (i = 0; i < 10000; i++)
        if (spset_in_p (&s1, i))
          n++;
      for (i = 0; i < 10000; i += 3)
        spset_remove (&s1, i);
      spset_copy (&s3, &s1);
      for (i = 0; i < 1000; i++)
        spset_insert (&s2, random () % 10000);
      spset_copy (&s4, &s2);
      spset_intersect (&s4, &s1);
      for (i = 0; i < 10; i++)
       {
         spset_unity (&s1, &s2);
         spset_diff (&s1, &s2);
         spset_unity (&s1, &s4);
         spset_shrink (&s1);
         if (! spset_equal_p (&s1, &s3))
           exit (1);
      }
      spset_release_unused_memory ();
      spset_copy (&s4, &s1);
      spset_diff (&s4, &s2);
      for (i = 0; i < 10; i++)
       {
         spset_intersect (&s1, &s2);
         spset_unity (&s1, &s4);
         spset_shrink (&s1);
         if (! spset_equal_p (&s1, &s3))
           exit (1);
      }
      spset_finish (&s1);
      spset_finish (&s2);
      spset_finish (&s3);
      spset_finish (&s4);
      spset_release_unused_memory ();
    }
#ifdef linux
  printf ("all time %.2f, memory=%.1fkB\n", active_time (t),
          ((char *) sbrk (0) - start) / 1024.);
#else
  printf ("all time %.2f\n", active_time (t));
#endif
  exit (0);
}
TEST12
        echo test 12:
        echo '      ' $CC $CC_options $test_file $addfiles
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Final message

if test $result = ok; then
        echo $script_file: it is all ok
        rm -f $addfiles $test_file $outfile $include_file
        exit 0
else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
fi

