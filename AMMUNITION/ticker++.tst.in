#!/bin/sh
# @configure_input@

#
# Script to test of package for work with ticker (files `ticker.h',
# `tickercpp.C').
#
#   Copyright (C) 1997-2015 Vladimir Makarov.
#
#   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>
#
#   This is part of package for work with tickers; you can redistribute
#   it and/or modify it under the terms of the GNU Library General
#   Public License as published by the Free Software Foundation; either
#   version 2, or (at your option) any later version.
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with GNU CC; see the file COPYING.  If not, write to
#   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
#   MA 02111-1307, USA.
#
#
# Usage: ticker++.tst [start_test_number]
#
# The script outputs self-explanatory messages and returns zero exit code if 
# it is all ok.
#

script_file=$0
prefix=`basename $script_file .tst`
CXX='@CXX@'
CXX_options='@CXXFLAGS@ @DEFS@ -I. -I@srcdir@/'
source_addfiles='@srcdir@/tickercpp.C @srcdir@/allocatecpp.C'
addfiles="${prefix}_tickercpp.o ${prefix}_allocatecpp.o"
test_file=${prefix}_tticker.C
outfile=./${prefix}_ac.out

if test x$1 = x
then
    start_test_number=1
else
    if expr $1 + 0 >/dev/null
    then
        start_test_number=`expr $1 + 0`
    else
        echo $script_file:invalid argument $1 2>&1
        exit 1
    fi
fi

# Compilation of addfiles

for i in $source_addfiles; do
  echo '      ' $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o
  if $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o; then
        result=ok
  else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
  fi
done

# Test 1.
if test $result = ok -a $start_test_number -le 1; then
        cat >$test_file <<'TEST1'
#include <stdlib.h>
#include <stdio.h>
#include "ticker.h"
int main ()
{
  register int i, j;
  ticker_t first_ticker;
  ticker_t second_ticker;

  for (i = 0; i < 1000; i++)
    for (j = 0; j < 10000; j++)
      ;
  printf ("first ticker %s and %.2f (must be equal)\n",
          first_ticker.active_time_string (), first_ticker.active_time ());
  for (i = 0; i < 1000; i++)
    for (j = 0; j < 10000; j++)
      ;
  printf ("second ticker %s and %.2f (must be equal)\n",
          second_ticker.active_time_string (), second_ticker.active_time ());
  exit (0);
}
TEST1

        echo test 1:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 2.
if test $result = ok -a $start_test_number -le 2; then
        cat >$test_file <<'TEST2'
#include <stdlib.h>
#include <stdio.h>
#include "ticker.h"
int main ()
{
  register int i, j;
  ticker_t first_ticker;
  ticker_t second_ticker;

  for (i = 0; i < 1000; i++)
    for (j = 0; j < 10000; j++)
      ;
  first_ticker.ticker_off ();
  second_ticker.ticker_off ();
  for (i = 0; i < 1000; i++)
    for (j = 0; j < 10000; j++)
      ;
  second_ticker.ticker_off ();
  for (i = 0; i < 1000; i++)
    for (j = 0; j < 10000; j++)
      ;
  second_ticker.ticker_on ();
  first_ticker.ticker_on ();
  printf ("first ticker %s and second ticker ",
           second_ticker.active_time_string ());
  printf ("%s (must be approximately equal)\n",
          first_ticker.active_time_string ());
  exit (0);
}
TEST2

        echo test 2:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 3.
if test $result = ok -a $start_test_number -le 3; then
        cat >$test_file <<'TEST3'
#include <stdlib.h>
#include <stdio.h>
#include "ticker.h"
int main ()
{
  register int i, j;
  ticker_t first_ticker;
  ticker_t second_ticker;

  for (i = 0; i < 1000; i++)
    for (j = 0; j < 10000; j++)
      ;
  first_ticker.ticker_off ();
  second_ticker.ticker_off ();
  for (i = 0; i < 1000; i++)
    for (j = 0; j < 10000; j++)
      ;
  second_ticker.ticker_off ();
  for (i = 0; i < 1000; i++)
    for (j = 0; j < 10000; j++)
      ;
  second_ticker.ticker_on ();
  first_ticker.ticker_on ();
  for (i = 0; i < 1000; i++)
    for (j = 0; j < 10000; j++)
      ;
  first_ticker.ticker_off ();
  second_ticker.ticker_off ();
  for (i = 0; i < 1000; i++)
    for (j = 0; j < 10000; j++)
      ;
  first_ticker.ticker_on ();
  printf ("first ticker %s and second ticker ",
          second_ticker.active_time_string ());
  printf ("%s (must be approximately equal)\n",
          first_ticker.active_time_string ());
  exit (0);
}
TEST3

        echo test 3:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Final message

if test $result = ok; then
        echo $script_file: it is all ok
        rm -f $addfiles $test_file $outfile
        exit 0
else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
fi
