#!/bin/sh
# @configure_input@

#
# Script to test of arithmetic package (files `arithm.h', `arithm.c').
#
#   Copyright (C) 1997-2015 Vladimir Makarov.
#
#   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>
#
#   This is part of package of arbitrary precision integer arithmetic;
#   you can redistribute it and/or modify it under the terms of the GNU
#   Library General Public License as published by the Free Software
#   Foundation; either version 2, or (at your option) any later
#   version.
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with GNU CC; see the file COPYING.  If not, write to
#   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
#   MA 02111-1307, USA.
#
# Usage: arithm.tst [start_test_number]
#
# The script outputs self-explanatory messages and returns zero exit code if 
# it is all ok.
#

script_file=$0
prefix=`basename $script_file .tst`
CC='@CC@'
CC_options='@CFLAGS@ @DEFS@ -I. -I@srcdir@/'
source_addfiles='@srcdir@/arithm.c'
addfiles="${prefix}_arithm.o"
test_file=${prefix}_tarithm.c
outfile=./${prefix}_a.out

if test x$1 = x
then
    start_test_number=1
else
    if expr $1 + 0 >/dev/null
    then
        start_test_number=`expr $1 + 0`
    else
        echo $script_file:invalid argument $1 2>&1
        exit 1
    fi
fi

# Compilation of addfiles

for i in $source_addfiles; do
  echo '      ' $CC $CC_options -c $i -o ${prefix}_`basename $i .c`.o
  if $CC $CC_options -c $i -o ${prefix}_`basename $i .c`.o; then
        result=ok
  else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
  fi
done

# Test 1.
if test $result = ok -a $start_test_number -le 1; then
        cat >$test_file <<'TEST1'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>

int main()
{
  int i, b;
  char str [20], s[20], d[4], d1[4];

  integer_from_string (4, "-2147483649", d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN);
  integer_from_string (4, str, d);
  if (overflow_bit)
    exit (1);
  integer_to_string (4, d, s);
  if (strcmp (s, str) !=0)
    exit (1);

  integer_from_based_string (4, "-80000001", 16, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN);
  integer_from_string (4, str, d);
  if (overflow_bit)
    exit (1);
  integer_to_string (4, d, s);
  if (strcmp (s, str) !=0)
    exit (1);
  integer_to_based_string (4, d, 16, s);
  if (strcmp (s, "-80000000") !=0)
    exit (1);

  integer_from_based_string (4, "-800000Ff", 16, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN);
  integer_from_string (4, str, d);
  if (overflow_bit)
    exit (1);
  integer_to_string (4, d, s);
  if (strcmp (s, str) !=0)
    exit (1);
  integer_to_based_string (4, d, 16, s);
  if (strcmp (s, "-80000000") !=0)
    exit (1);

  integer_from_based_string (4, "-20000000001", 8, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN);
  integer_from_string (4, str, d);
  if (overflow_bit)
    exit (1);
  integer_to_string (4, d, s);
  if (strcmp (s, str) !=0)
    exit (1);
  integer_to_based_string (4, d, 8, s);
  if (strcmp (s, "-20000000000") !=0)
    exit (1);

  integer_from_string (4, "2147483648", d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX);
  integer_from_string (4, str, d);
  if (overflow_bit)
    exit (1);
  integer_to_string (4, d, s);
  if (strcmp (s, str) !=0)
    exit (1);  

  integer_from_based_string (4, "80000000", 16, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX);
  integer_from_string (4, str, d);
  if (overflow_bit)
    exit (1);
  integer_to_string (4, d, s);
  if (strcmp (s, str) !=0)
    exit (1);  
  integer_to_based_string (4, d, 16, s);
  if (strcmp (s, "7fffffff") != 0)
    exit (1);  

  integer_from_based_string (4, "20000000000", 8, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX);
  integer_from_string (4, str, d);
  if (overflow_bit)
    exit (1);
  integer_to_string (4, d, s);
  if (strcmp (s, str) !=0)
    exit (1);  
  integer_to_based_string (4, d, 8, s);
  if (strcmp (s, "17777777777") !=0)
    exit (1);  

  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      integer_from_string (4, str, d);
      if (overflow_bit)
        exit (1);
      integer_to_string (4, d, s);
      if (strcmp (s, str) !=0)
        exit (1);
    }
  for (b = 2; b <= 36; b++)
    for (i = -2000; i < 2000; i++)
      {
        sprintf (str, "%d", i);
        integer_from_string (4, str, d);
        if (overflow_bit)
          exit (1);
        integer_to_based_string (4, d, b, s);
        integer_from_based_string (4, s, b, d1);
        if (!eq_integer (4, d, d1))
          exit (1);
      }
  exit (0);
}
TEST1

        echo test 1:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 2.
if test $result = ok -a $start_test_number -le 2; then
        cat >$test_file <<'TEST2'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i, b;
  char str [20], s[20], d[4], d1[4];

  unsigned_integer_from_string (4, "4294967296", d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  unsigned_integer_from_string (4, str, d);
  if (overflow_bit)
    exit (1);
  unsigned_integer_to_string (4, d, s);
  if (strcmp (s, str) !=0)
    exit (1);

  unsigned_integer_from_based_string (4, "100000000", 16, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  unsigned_integer_from_string (4, str, d);
  if (overflow_bit)
    exit (1);
  unsigned_integer_to_based_string (4, d, 16, s);
  if (strcmp (s, "ffffffff") !=0)
    exit (1);

  unsigned_integer_from_based_string (4, "40000000000", 8, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  unsigned_integer_from_string (4, str, d);
  if (overflow_bit)
    exit (1);
  unsigned_integer_to_based_string (4, d, 8, s);
  if (strcmp (s, "37777777777") !=0)
    exit (1);

  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer_from_string (4, str, d);
      if (overflow_bit)
        exit (1);
      unsigned_integer_to_string (4, d, s);
      if (strcmp (s, str) !=0)
        exit (1);
    }
  for (b = 2; b <= 36; b++)
    for (i = 0; i < 4000 ; i++)
      {
        sprintf (str, "%u", i);
        unsigned_integer_from_string (4, str, d);
        if (overflow_bit)
          exit (1);
        unsigned_integer_to_based_string (4, d, b, s);
        unsigned_integer_from_based_string (4, s, b, d1);
        if (!eq_integer (4, d, d1))
          exit (1);
      }
  exit (0);
}
TEST2

        echo test 2:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 3.
if test $result = ok -a $start_test_number -le 3; then
        cat >$test_file <<'TEST3'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%d", INT_MAX);
  integer_from_string (4, str, d);
  integer_from_string (4, "1", e);
  add_integer (4, d, e, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX - 4);
  integer_from_string (4, str, d);
  sprintf (str, "%d", 4);
  integer_from_string (4, str, e);
  add_integer (4, d, e, d);
  if (overflow_bit)
    exit (1);
  integer_to_string (4, d, s);
  sprintf (str, "%d", INT_MAX);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      integer_from_string (4, str, d);
      sprintf (str, "%d", i + 1);
      integer_from_string (4, str, e);
      add_integer (4, d, e, d);
      if (overflow_bit)
        exit (1);
      integer_to_string (4, d, s);
      if (atoi (s) != i + i + 1)
        exit (1);
    }
  exit (0);
}
TEST3

        echo test 3:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 4.
if test $result = ok -a $start_test_number -le 4; then
        cat >$test_file <<'TEST4'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%u", UINT_MAX);
  unsigned_integer_from_string (4, str, d);
  unsigned_integer_from_string (4, "1", e);
  add_unsigned_integer (4, d, e, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX - 4);
  unsigned_integer_from_string (4, str, d);
  sprintf (str, "%u", 4);
  unsigned_integer_from_string (4, str, e);
  add_unsigned_integer (4, d, e, d);
  if (overflow_bit)
    exit (1);
  unsigned_integer_to_string (4, d, s);
  sprintf (str, "%u", UINT_MAX);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer_from_string (4, str, d);
      sprintf (str, "%u", i + 1);
      unsigned_integer_from_string (4, str, e);
      add_unsigned_integer (4, d, e, d);
      if (overflow_bit)
        exit (1);
      unsigned_integer_to_string (4, d, s);
      if (atoi (s) != i + i + 1)
        exit (1);
    }
  exit (0);
}
TEST4

        echo test 4:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 5.
if test $result = ok -a $start_test_number -le 5; then
        cat >$test_file <<'TEST5'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%d", INT_MIN);
  integer_from_string (4, str, d);
  integer_from_string (4, "1", e);
  subtract_integer (4, d, e, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN + 4);
  integer_from_string (4, str, d);
  sprintf (str, "%d", 4);
  integer_from_string (4, str, e);
  subtract_integer (4, d, e, d);
  if (overflow_bit)
    exit (1);
  integer_to_string (4, d, s);
  sprintf (str, "%d", INT_MIN);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      integer_from_string (4, str, d);
      sprintf (str, "%d", 10 - i);
      integer_from_string (4, str, e);
      subtract_integer (4, d, e, d);
      if (overflow_bit)
        exit (1);
      integer_to_string (4, d, s);
      if (atoi (s) != i + i - 10)
        exit (1);
    }
  exit (0);
}
TEST5

        echo test 5:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 6.
if test $result = ok -a $start_test_number -le 6; then
        cat >$test_file <<'TEST6'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%u", UINT_MAX - 2);
  unsigned_integer_from_string (4, str, d);
  sprintf (str, "%u", UINT_MAX - 1);
  unsigned_integer_from_string (4, str, e);
  subtract_unsigned_integer (4, d, e, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  unsigned_integer_from_string (4, str, d);
  subtract_unsigned_integer (4, d, d, d);
  if (overflow_bit)
    exit (1);
  unsigned_integer_to_string (4, d, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer_from_string (4, str, d);
      sprintf (str, "%u",  i / 2);
      unsigned_integer_from_string (4, str, e);
      subtract_unsigned_integer (4, d, e, d);
      if (overflow_bit)
        exit (1);
      unsigned_integer_to_string (4, d, s);
      if (atoi (s) != i - i/2)
        exit (1);
    }
  exit (0);
}
TEST6

        echo test 6:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 7.
if test $result = ok -a $start_test_number -le 7; then
        cat >$test_file <<'TEST7'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%d", INT_MAX / 2 + 1);
  integer_from_string (4, str, d);
  integer_from_string (4, "2", e);
  multiply_integer (4, d, e, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN / 2 - 1);
  integer_from_string (4, str, d);
  integer_from_string (4, "2", e);
  multiply_integer (4, d, e, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX / 3);
  integer_from_string (4, str, d);
  sprintf (str, "%d", 3);
  integer_from_string (4, str, e);
  multiply_integer (4, d, e, d);
  if (overflow_bit)
    exit (1);
  integer_to_string (4, d, s);
  sprintf (str, "%d", (INT_MAX / 3) * 3);
  if (strcmp (s, str) != 0)
    exit (1);
  sprintf (str, "%d", INT_MIN / 2);
  integer_from_string (4, str, d);
  sprintf (str, "%d", 2);
  integer_from_string (4, str, e);
  multiply_integer (4, d, e, d);
  if (overflow_bit)
    exit (1);
  integer_to_string (4, d, s);
  sprintf (str, "%d", (INT_MIN / 2) * 2);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      integer_from_string (4, str, d);
      sprintf (str, "%d", i + 1000);
      integer_from_string (4, str, e);
      multiply_integer (4, d, e, d);
      if (overflow_bit)
        exit (1);
      integer_to_string (4, d, s);
      if (atoi (s) != i * (i + 1000))
        exit (1);
    }
  exit (0);
}
TEST7

        echo test 7:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 8.
if test $result = ok -a $start_test_number -le 8; then
        cat >$test_file <<'TEST8'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%u", UINT_MAX / 5 + 1);
  unsigned_integer_from_string (4, str, d);
  sprintf (str, "%u", 5);
  unsigned_integer_from_string (4, str, e);
  multiply_unsigned_integer (4, d, e, d);
  if (!overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX / 2);
  unsigned_integer_from_string (4, str, d);
  sprintf (str, "%u", 2);
  unsigned_integer_from_string (4, str, e);
  multiply_unsigned_integer (4, d, e, d);
  if (overflow_bit)
    exit (1);
  unsigned_integer_to_string (4, d, s);
  sprintf (str, "%u", (UINT_MAX / 2) * 2);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer_from_string (4, str, d);
      sprintf (str, "%u",  i / 2);
      unsigned_integer_from_string (4, str, e);
      multiply_unsigned_integer (4, d, e, d);
      if (overflow_bit)
        exit (1);
      unsigned_integer_to_string (4, d, s);
      if (atoi (s) != i * (i/2))
        exit (1);
    }
  exit (0);
}
TEST8

        echo test 8:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 9.
if test $result = ok -a $start_test_number -le 9; then
        cat >$test_file <<'TEST9'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  integer_from_string (4, "10", d);
  integer_from_string (4, "0", e);
  divide_integer (4, d, e, d);
  if (!overflow_bit)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      integer_from_string (4, str, d);
      sprintf (str, "%d", (i<0? - i/20 + 1 : - i/20 - 1));
      integer_from_string (4, str, e);
      divide_integer (4, d, e, d);
      if (overflow_bit)
        exit (1);
      integer_to_string (4, d, s);
      if (atoi (s) != i / (i<0? - i/20 + 1 : - i/20 - 1))
        exit (1);
      sprintf (str, "%d", i);
      integer_from_string (4, str, d);
      divide_integer (4, d, e, e);
      if (overflow_bit)
        exit (1);
      integer_to_string (4, e, s);
      if (atoi (s) != i / (i<0? - i/20 + 1 : - i/20 - 1))
        exit (1);
    }
  exit (0);
}
TEST9

        echo test 9:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 10.
if test $result = ok -a $start_test_number -le 10; then
        cat >$test_file <<'TEST10'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  unsigned_integer_from_string (4, "10", d);
  unsigned_integer_from_string (4, "0", e);
  divide_unsigned_integer (4, d, e, d);
  if (!overflow_bit)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer_from_string (4, str, d);
      sprintf (str, "%u",  i / 20 + 1);
      unsigned_integer_from_string (4, str, e);
      divide_unsigned_integer (4, d, e, d);
      if (overflow_bit)
        exit (1);
      unsigned_integer_to_string (4, d, s);
      if (atoi (s) != i / (i/20 + 1))
        exit (1);
    }
  exit (0);
}
TEST10

        echo test 10:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 11.
if test $result = ok -a $start_test_number -le 11; then
        cat >$test_file <<'TEST11'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  unsigned_integer_from_string (4, "10", d);
  unsigned_integer_from_string (4, "0", e);
  unsigned_integer_remainder (4, d, e, d);
  if (!overflow_bit)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer_from_string (4, str, d);
      sprintf (str, "%u",  i / 20 + 1);
      unsigned_integer_from_string (4, str, e);
      unsigned_integer_remainder (4, d, e, d);
      if (overflow_bit)
        exit (1);
      unsigned_integer_to_string (4, d, s);
      if (atoi (s) != i % (i/20 + 1))
        exit (1);
    }
  exit (0);
}
TEST11

        echo test 11:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 12.
if test $result = ok -a $start_test_number -le 12; then
        cat >$test_file <<'TEST12'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_shift_right (4, d, 0, d);
  unsigned_integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_shift_right (4, d, 32, d);
  unsigned_integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "0") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_shift_right (4, d, 8, d);
  unsigned_integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "5") != 0)
    exit (1);
  unsigned_integer_from_string (4, "134890", d);
  unsigned_integer_shift_right (4, d, 13, d);
  unsigned_integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  unsigned_integer_from_string (4, "134890", d);
  unsigned_integer_shift_left (4, d, -13, d);
  unsigned_integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  exit (0);
}
TEST12

        echo test 12:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 13.
if test $result = ok -a $start_test_number -le 13; then
        cat >$test_file <<'TEST13'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  integer_from_string (4, "1348", d);
  integer_shift_right (4, d, 0, d);
  integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  integer_from_string (4, "1348", d);
  integer_shift_right (4, d, 32, d);
  integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "0") != 0)
    exit (1);
  integer_from_string (4, "1348", d);
  integer_shift_right (4, d, 8, d);
  integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "5") != 0)
    exit (1);
  integer_from_string (4, "134890", d);
  integer_shift_right (4, d, 13, d);
  integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  integer_from_string (4, "134890", d);
  integer_shift_left (4, d, -13, d);
  integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_shift_right (4, d, 0, d);
  integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "-1348") != 0)
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_shift_right (4, d, 32, d);
  integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "-1") != 0)
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_shift_right (4, d, 8, d);
  integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "-6") != 0)
    exit (1);
  integer_from_string (4, "-134890", d);
  integer_shift_right (4, d, 13, d);
  integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "-17") != 0)
    exit (1);
  integer_from_string (4, "-134890", d);
  integer_shift_left (4, d, -13, d);
  integer_to_string (4, d, s);
  if (!overflow_bit || strcmp (s, "-17") != 0)
    exit (1);
  exit (0);
}
TEST13

        echo test 13:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 14.
if test $result = ok -a $start_test_number -le 14; then
        cat >$test_file <<'TEST14'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_shift_left (4, d, 0, d);
  unsigned_integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_shift_left (4, d, 22, d);
  if (!overflow_bit)
    exit (1);
  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_shift_left (4, d, 8, d);
  unsigned_integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "345088") != 0)
    exit (1);
  unsigned_integer_from_string (4, "134890", d);
  unsigned_integer_shift_left (4, d, 13, d);
  unsigned_integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  unsigned_integer_from_string (4, "134890", d);
  unsigned_integer_shift_right (4, d, -13, d);
  unsigned_integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  exit (0);
}
TEST14

        echo test 14:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 15.
if test $result = ok -a $start_test_number -le 15; then
        cat >$test_file <<'TEST15'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  integer_from_string (4, "1348", d);
  integer_shift_left (4, d, 0, d);
  integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  integer_from_string (4, "1348", d);
  integer_shift_left (4, d, 21, d);
  if (!overflow_bit)
    exit (1);
  integer_from_string (4, "1348", d);
  integer_shift_left (4, d, 8, d);
  integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "345088") != 0)
    exit (1);
  integer_from_string (4, "134890", d);
  integer_shift_left (4, d, 13, d);
  integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  integer_from_string (4, "134890", d);
  integer_shift_right (4, d, -13, d);
  integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_shift_left (4, d, 0, d);
  integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "-1348") != 0)
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_shift_left (4, d, 21, d);
  if (!overflow_bit)
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_shift_left (4, d, 8, d);
  integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "-345088") != 0)
    exit (1);
  integer_from_string (4, "-134890", d);
  integer_shift_left (4, d, 13, d);
  integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "-1105018880") != 0)
    exit (1);
  integer_from_string (4, "-134890", d);
  integer_shift_right (4, d, -13, d);
  integer_to_string (4, d, s);
  if (overflow_bit || strcmp (s, "-1105018880") != 0)
    exit (1);
  exit (0);
}
TEST15

        echo test 15:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 16.
if test $result = ok -a $start_test_number -le 16; then
        cat >$test_file <<'TEST16'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  integer_from_string (4, "-10", d);
  integer_from_string (4, "1348", e);
  if (eq_integer (4, d, e))
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_from_string (4, "-1348", e);
  if (!eq_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST16

        echo test 16:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 17.
if test $result = ok -a $start_test_number -le 17; then
        cat >$test_file <<'TEST17'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer_from_string (4, "10", d);
  unsigned_integer_from_string (4, "1348", e);
  if (eq_unsigned_integer (4, d, e))
    exit (1);
  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_from_string (4, "1348", e);
  if (!eq_unsigned_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST17

        echo test 17:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 18.
if test $result = ok -a $start_test_number -le 18; then
        cat >$test_file <<'TEST18'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  integer_from_string (4, "-10", d);
  integer_from_string (4, "1348", e);
  if (!ne_integer (4, d, e))
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_from_string (4, "-1348", e);
  if (ne_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST18

        echo test 18:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 19.
if test $result = ok -a $start_test_number -le 19; then
        cat >$test_file <<'TEST19'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer_from_string (4, "10", d);
  unsigned_integer_from_string (4, "1348", e);
  if (!ne_unsigned_integer (4, d, e))
    exit (1);
  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_from_string (4, "1348", e);
  if (ne_unsigned_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST19

        echo test 19:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 20.
if test $result = ok -a $start_test_number -le 20; then
        cat >$test_file <<'TEST20'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  integer_from_string (4, "-10", d);
  integer_from_string (4, "1348", e);
  if (gt_integer (4, d, e))
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_from_string (4, "-1348", e);
  if (gt_integer (4, d, e))
    exit (1);
  integer_from_string (4, "-1000000", d);
  integer_from_string (4, "-1348", e);
  if (gt_integer (4, d, e))
    exit (1);
  integer_from_string (4, "1000000", d);
  integer_from_string (4, "1348", e);
  if (!gt_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST20

        echo test 20:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 21.
if test $result = ok -a $start_test_number -le 21; then
        cat >$test_file <<'TEST21'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer_from_string (4, "10", d);
  unsigned_integer_from_string (4, "1348", e);
  if (gt_unsigned_integer (4, d, e))
    exit (1);
  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_from_string (4, "1348", e);
  if (gt_unsigned_integer (4, d, e))
    exit (1);
  unsigned_integer_from_string (4, "1000000", d);
  unsigned_integer_from_string (4, "1348", e);
  if (!gt_unsigned_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST21

        echo test 21:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 22.
if test $result = ok -a $start_test_number -le 22; then
        cat >$test_file <<'TEST22'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  integer_from_string (4, "-10", d);
  integer_from_string (4, "1348", e);
  if (!lt_integer (4, d, e))
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_from_string (4, "-1348", e);
  if (lt_integer (4, d, e))
    exit (1);
  integer_from_string (4, "-1000000", d);
  integer_from_string (4, "-1348", e);
  if (!lt_integer (4, d, e))
    exit (1);
  integer_from_string (4, "1000000", d);
  integer_from_string (4, "1348", e);
  if (lt_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST22

        echo test 22:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 23.
if test $result = ok -a $start_test_number -le 23; then
        cat >$test_file <<'TEST23'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer_from_string (4, "10", d);
  unsigned_integer_from_string (4, "1348", e);
  if (!lt_unsigned_integer (4, d, e))
    exit (1);
  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_from_string (4, "1348", e);
  if (lt_unsigned_integer (4, d, e))
    exit (1);
  unsigned_integer_from_string (4, "1000000", d);
  unsigned_integer_from_string (4, "1348", e);
  if (lt_unsigned_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST23

        echo test 23:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 24.
if test $result = ok -a $start_test_number -le 24; then
        cat >$test_file <<'TEST24'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  integer_from_string (4, "-10", d);
  integer_from_string (4, "1348", e);
  if (ge_integer (4, d, e))
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_from_string (4, "-1348", e);
  if (!ge_integer (4, d, e))
    exit (1);
  integer_from_string (4, "-1000000", d);
  integer_from_string (4, "-1348", e);
  if (ge_integer (4, d, e))
    exit (1);
  integer_from_string (4, "1000000", d);
  integer_from_string (4, "1348", e);
  if (!ge_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST24

        echo test 24:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 25.
if test $result = ok -a $start_test_number -le 25; then
        cat >$test_file <<'TEST25'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer_from_string (4, "10", d);
  unsigned_integer_from_string (4, "1348", e);
  if (ge_unsigned_integer (4, d, e))
    exit (1);
  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_from_string (4, "1348", e);
  if (!ge_unsigned_integer (4, d, e))
    exit (1);
  unsigned_integer_from_string (4, "1000000", d);
  unsigned_integer_from_string (4, "1348", e);
  if (!ge_unsigned_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST25

        echo test 25:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 26.
if test $result = ok -a $start_test_number -le 26; then
        cat >$test_file <<'TEST26'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  integer_from_string (4, "-10", d);
  integer_from_string (4, "1348", e);
  if (!le_integer (4, d, e))
    exit (1);
  integer_from_string (4, "-1348", d);
  integer_from_string (4, "-1348", e);
  if (!le_integer (4, d, e))
    exit (1);
  integer_from_string (4, "-1000000", d);
  integer_from_string (4, "-1348", e);
  if (!le_integer (4, d, e))
    exit (1);
  integer_from_string (4, "1000000", d);
  integer_from_string (4, "1348", e);
  if (le_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST26

        echo test 26:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 27.
if test $result = ok -a $start_test_number -le 27; then
        cat >$test_file <<'TEST27'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer_from_string (4, "10", d);
  unsigned_integer_from_string (4, "1348", e);
  if (!le_unsigned_integer (4, d, e))
    exit (1);
  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_from_string (4, "1348", e);
  if (!le_unsigned_integer (4, d, e))
    exit (1);
  unsigned_integer_from_string (4, "1000000", d);
  unsigned_integer_from_string (4, "1348", e);
  if (le_unsigned_integer (4, d, e))
    exit (1);
  exit (0);
}
TEST27

        echo test 27:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 28.
if test $result = ok -a $start_test_number -le 28; then
        cat >$test_file <<'TEST28'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], g[6];

  unsigned_integer_from_string (4, "70000", d);
  change_unsigned_integer_size (4, d, 2, d);
  if (!overflow_bit)
    exit (1);
  unsigned_integer_from_string (4, "30000", d);
  change_unsigned_integer_size (4, d, 2, d);
  integer_to_string (2, d, s);
  if (overflow_bit || strcmp (s, "30000") != 0)
    exit (1);
  unsigned_integer_from_string (4, "11230000", g);
  change_unsigned_integer_size (4, g, 6, g);
  integer_to_string (6, g, s);
  if (overflow_bit || strcmp (s, "11230000") != 0)
    exit (1);
  exit (0);
}
TEST28

        echo test 28:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 29.
if test $result = ok -a $start_test_number -le 29; then
        cat >$test_file <<'TEST29'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], g[6];

  integer_from_string (4, "40000", d);
  change_integer_size (4, d, 2, d);
  if (!overflow_bit)
    exit (1);
  integer_from_string (4, "-33000", d);
  change_integer_size (4, d, 2, d);
  if (!overflow_bit)
    exit (1);
  integer_from_string (4, "30000", d);
  change_integer_size (4, d, 2, d);
  integer_to_string (2, d, s);
  if (overflow_bit || strcmp (s, "30000") != 0)
    exit (1);
  integer_from_string (4, "-30000", d);
  change_integer_size (4, d, 2, d);
  integer_to_string (2, d, s);
  if (overflow_bit || strcmp (s, "-30000") != 0)
    exit (1);
  integer_from_string (4, "11230000", g);
  change_integer_size (4, g, 6, g);
  integer_to_string (6, g, s);
  if (overflow_bit || strcmp (s, "11230000") != 0)
    exit (1);
  integer_from_string (4, "-11230000", g);
  change_integer_size (4, g, 6, g);
  integer_to_string (6, g, s);
  if (overflow_bit || strcmp (s, "-11230000") != 0)
    exit (1);
  exit (0);
}
TEST29

        echo test 29:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 30.
if test $result = ok -a $start_test_number -le 30; then
        cat >$test_file <<'TEST30'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "1348", d2);
  unsigned_integer_or (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "0", d2);
  unsigned_integer_or (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "4294967295", d2);
  unsigned_integer_or (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "4294967295") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "96", d2);
  unsigned_integer_or (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "1380") != 0)
    exit (1);
  exit (0);
}
TEST30

        echo test 30:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 31.
if test $result = ok -a $start_test_number -le 31; then
        cat >$test_file <<'TEST31'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  integer_from_string (4, "1348", d1);
  integer_from_string (4, "1348", d2);
  integer_or (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  integer_from_string (4, "1348", d1);
  integer_from_string (4, "0", d2);
  integer_or (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  integer_from_string (4, "1348", d1);
  integer_from_string (4, "-1", d2);
  integer_or (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "-1") != 0)
    exit (1);
  integer_from_string (4, "1348", d1);
  integer_from_string (4, "96", d2);
  integer_or (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "1380") != 0)
    exit (1);
  exit (0);
}
TEST31

        echo test 31:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 32.
if test $result = ok -a $start_test_number -le 32; then
        cat >$test_file <<'TEST32'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "1348", d2);
  unsigned_integer_and (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "0", d2);
  unsigned_integer_and (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "4294967295", d2);
  unsigned_integer_and (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "96", d2);
  unsigned_integer_and (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "64") != 0)
    exit (1);
  exit (0);
}
TEST32

        echo test 32:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 33.
if test $result = ok -a $start_test_number -le 33; then
        cat >$test_file <<'TEST33'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  integer_from_string (4, "1348", d1);
  integer_from_string (4, "1348", d2);
  integer_and (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  integer_from_string (4, "1348", d1);
  integer_from_string (4, "0", d2);
  integer_and (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  integer_from_string (4, "1348", d1);
  integer_from_string (4, "-1", d2);
  integer_and (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  integer_from_string (4, "1348", d1);
  integer_from_string (4, "96", d2);
  integer_and (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "64") != 0)
    exit (1);
  exit (0);
}
TEST33

        echo test 33:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 34.
if test $result = ok -a $start_test_number -le 34; then
        cat >$test_file <<'TEST34'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "1348", d2);
  unsigned_integer_xor (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "0", d2);
  unsigned_integer_xor (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "4294967295", d2);
  unsigned_integer_xor (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "4294965947") != 0)
    exit (1);
  unsigned_integer_from_string (4, "1348", d1);
  unsigned_integer_from_string (4, "96", d2);
  unsigned_integer_xor (4, d1, d2, d2);
  unsigned_integer_to_string (4, d2, s);
  if (strcmp (s, "1316") != 0)
    exit (1);
  exit (0);
}
TEST34

        echo test 34:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 35.
if test $result = ok -a $start_test_number -le 35; then
        cat >$test_file <<'TEST35'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  integer_from_string (4, "1348", d1);
  integer_from_string (4, "1348", d2);
  integer_xor (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  integer_from_string (4, "1348", d1);
  integer_from_string (4, "0", d2);
  integer_xor (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  integer_from_string (4, "1348", d1);
  integer_from_string (4, "-1", d2);
  integer_xor (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "-1349") != 0)
    exit (1);
  integer_from_string (4, "1348", d1);
  integer_from_string (4, "96", d2);
  integer_xor (4, d1, d2, d2);
  integer_to_string (4, d2, s);
  if (strcmp (s, "1316") != 0)
    exit (1);
  exit (0);
}
TEST35

        echo test 35:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 36.
if test $result = ok -a $start_test_number -le 36; then
        cat >$test_file <<'TEST36'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  unsigned_integer_from_string (4, "1348", d);
  unsigned_integer_not (4, d, d);
  unsigned_integer_to_string (4, d, s);
  if (strcmp (s, "4294965947") != 0)
    exit (1);
  unsigned_integer_from_string (4, "0", d);
  unsigned_integer_not (4, d, d);
  unsigned_integer_to_string (4, d, s);
  if (strcmp (s, "4294967295") != 0)
    exit (1);
  unsigned_integer_from_string (4, "4294967295", d);
  unsigned_integer_not (4, d, d);
  unsigned_integer_to_string (4, d, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  exit (0);
}
TEST36

        echo test 36:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 37.
if test $result = ok -a $start_test_number -le 37; then
        cat >$test_file <<'TEST37'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  integer_from_string (4, "1348", d);
  integer_not (4, d, d);
  integer_to_string (4, d, s);
  if (strcmp (s, "-1349") != 0)
    exit (1);
  integer_from_string (4, "0", d);
  integer_not (4, d, d);
  integer_to_string (4, d, s);
  if (strcmp (s, "-1") != 0)
    exit (1);
  integer_from_string (4, "-1", d);
  integer_not (4, d, d);
  integer_to_string (4, d, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  exit (0);
}
TEST37

        echo test 37:
        echo '      ' $CC $CC_options $test_file $addfiles -o $outfile
        if $CC $CC_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Final message

if test $result = ok; then
        echo $script_file: it is all ok
        rm -f $addfiles $test_file $outfile
        exit 0
else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
fi
