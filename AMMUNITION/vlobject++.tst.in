#!/bin/sh
# @configure_input@

#
# Script to test of allocation package (files `vlobject.h', `vlobjectcpp.C').
#
#   Copyright (C) 1997-2016 Vladimir Makarov.
#
#   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>
#
#   This is part of package for work with variable length objects; you
#   can redistribute it and/or modify it under the terms of the GNU
#   Library General Public License as published by the Free Software
#   Foundation; either version 2, or (at your option) any later
#   version.
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with GNU CC; see the file COPYING.  If not, write to
#   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
#   MA 02111-1307, USA.
#
#
# Usage: vlobject++.tst [start_test_number]
#
# The script outputs self-explanatory messages and returns zero exit code if 
# it is all ok.
#

script_file=$0
prefix=`basename $script_file .tst`
CXX='@CXX@'
CXX_options='@CXXFLAGS@ @DEFS@ -I. -I@srcdir@/'
source_addfiles='@srcdir@/allocatecpp.C @srcdir@/vlobjectcpp.C'
addfiles="${prefix}_allocatecpp.o ${prefix}_vlobjectcpp.o"
test_file=${prefix}_tvlobject.C
outfile=./${prefix}_a.out

if test x$1 = x
then
    start_test_number=1
else
    if expr $1 + 0 >/dev/null
    then
        start_test_number=`expr $1 + 0`
    else
        echo $script_file:invalid argument $1 2>&1
        exit 1
    fi
fi

# Compilation of addfiles

for i in $source_addfiles; do
  echo '      ' $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o
  if $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o; then
        result=ok
  else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
  fi
done

# Test 1.
if test $result = ok -a $start_test_number -le 1; then
        cat >$test_file <<'TEST1'
#include <stdlib.h>
#include "allocate.h"
#include "vlobject.h"
int main ()
{
  {
    vlo_t v;

    v.add_byte ('c');
    if (v.length () != 1 || v.begin () != v.end ()
        || (char *) v.begin () + 1 != (char *) v.bound ()
        || * (char *) v.begin () != 'c')
      exit (1);
  }
  exit (0);
}
TEST1

        echo test 1:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
                rm -f $outfile
        else
                result=fail
        fi
fi

# Test 2.
if test $result = ok -a $start_test_number -le 2; then
        cat >$test_file <<'TEST2'
#include <stdlib.h>
#include <string.h>
#include "allocate.h"
#include "vlobject.h"
int main ()
{
  {
    vlo_t v (1);

    v.add_byte ('c');
    v.shorten (10);
    v.add_string ("abc");
    v.add_string ("def");
    if (v.length () != 7 || strcmp ((char *) v.begin (), "abcdef") != 0)
      exit (1);
  }
  exit (0);
}
TEST2

        echo test 2:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
                rm -f $outfile
        else
                result=fail
        fi
fi

# Test 3.
if test $result = ok -a $start_test_number -le 3; then
        cat >$test_file <<'TEST3'

#ifdef HAVE_CONFIG_H
#include "config.h"
#else /* In this case we are oriented to ANSI C */
#endif /* #ifdef HAVE_CONFIG_H */

#include <stdlib.h>
#include <string.h>

#include "allocate.h"
#include "vlobject.h"
int main ()
{
  {
    vlo_t v (100);

    v.add_byte ('c');
    v.shorten (10);
    v.add_string ("abc");
    v.add_string ("def");
    v.shorten (5);
    v.add_memory ("ghi", 3);
    if (v.length () != 5 || memcmp (v.begin (), "abghi", 5) != 0)
      exit (1);
  }
  exit (0);
}
TEST3

        echo test 3:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
                rm -f $outfile
        else
                result=fail
        fi
fi

# Test 4.
if test $result = ok -a $start_test_number -le 4; then
        cat >$test_file <<'TEST4'
#include <stdlib.h>
#include "allocate.h"
#include "vlobject.h"
int main ()
{
  {
    vlo_t v (100);

    v.add_string ("abc");
    v.add_memory ("ghi", 4);
    v.tailor ();
    v.nullify ();
    if (v.length () != 0)
      exit (1);
  }
  exit (0);
}
TEST4

        echo test 4:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
                rm -f $outfile
        else
                result=fail
        fi
fi

# Test 5.
if test $result = ok -a $start_test_number -le 5; then
        cat >$test_file <<'TEST5'
#include <stdlib.h>
#include "allocate.h"
#include "vlobject.h"
int main ()
{
  {
    vlo_t v (1);

    v.expand (10);
    v.add_byte ('c');
    if (v.length () != 11 || ((char *) v.begin ())[10] != 'c')
      exit (1);
  }
  exit (0);
}
TEST5

        echo test 5:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
                rm -f $outfile
        else
                result=fail
        fi
fi

# Final message

if test $result = ok; then
        echo $script_file: it is all ok
        rm -f $test_file $addfiles $outfile
        exit 0
else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
fi
