#!/bin/sh
# @configure_input@

#
# Script to test of allocation package (files `hashtab.h', `hashtab.cpp').
#
#   Copyright (C) 1997-2015 Vladimir Makarov.
#
#   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>
#
#   This is part of package for work with hash tables; you can
#   redistribute it and/or modify it under the terms of the GNU Library
#   General Public License as published by the Free Software
#   Foundation; either version 2, or (at your option) any later
#   version.
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with GNU CC; see the file COPYING.  If not, write to
#   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
#   MA 02111-1307, USA.
#
#
# Usage: hashtab++.tst [start_test_number]
#
# The script outputs self-explanatory messages and returns zero exit code if 
# it is all ok.
#

script_file=$0
prefix=`basename $script_file .tst`
CXX='@CXX@'
CXX_options='@CXXFLAGS@ @DEFS@ -I. -I@srcdir@/'
source_addfiles='@srcdir@/allocate.cpp @srcdir@/hashtab.cpp'
addfiles="${prefix}_allocate.o ${prefix}_hashtab.o"
test_file=${prefix}_thashtab.cpp
outfile=./${prefix}_a.out

if test x$1 = x
then
    start_test_number=1
else
    if expr $1 + 0 >/dev/null
    then
        start_test_number=`expr $1 + 0`
    else
        echo $script_file:invalid argument $1 2>&1
        exit 1
    fi
fi

# Compilation of addfiles

for i in $source_addfiles; do
  echo '      ' $CXX $CXX_options -c $i -o ${prefix}_`basename $i .cpp`.o
  if $CXX $CXX_options -c $i -o ${prefix}_`basename $i .cpp`.o; then
        result=ok
  else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
  fi
done

# Test 1.
if test $result = ok -a $start_test_number -le 1; then
        cat >$test_file <<'TEST1'
#include <stdlib.h>
#include <string.h>
#include "allocate.h"
#include "hashtab.h"

static unsigned
hash_function (hash_table_entry_t entry)
{
  const char *str = (char *) entry;
  unsigned result, i;

  for (result = i = 0;*str++ != '\0'; i++)
    result += ((unsigned char) *str << (i % 8));
  return result;
}

static int
eq_function (hash_table_entry_t el1, hash_table_entry_t el2)
{
  return strcmp ((char *) el1, (char *) el2) == 0;
}

main ()
{
  hash_table_t htab;

  htab = new hash_table (10, hash_function, eq_function);
  delete htab;
  exit (0);
}
TEST1

        echo test 1:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 2.
if test $result = ok -a $start_test_number -le 2; then
        cat >$test_file <<'TEST2'
#include <stdlib.h>
#include <string.h>
#include "allocate.h"
#include "hashtab.h"

static unsigned
hash_function (hash_table_entry_t entry)
{
  const char *str = (char *) entry;
  unsigned result, i;

  for (result = i = 0;*str++ != '\0'; i++)
    result += ((unsigned char) *str << (i % 8));
  return result;
}

static int
eq_function (hash_table_entry_t el1, hash_table_entry_t el2)
{
  return strcmp ((char *) el1, (char *) el2) == 0;
}

main ()
{
  hash_table_t htab;

  htab = new hash_table (0, hash_function, eq_function);
  *htab->find_entry ("abcd", 1) = "abcd";
  *htab->find_entry ("ef", 1) = "ef";
  *htab->find_entry ("ghi", 1) = "ghi";
  *htab->find_entry ("j", 1) = "j";
  *htab->find_entry ("klm", 1) = "klm";
  *htab->find_entry ("nopqrst", 1) = "nopqrst";
  if (strcmp ((char *) *htab->find_entry ("ghi", 0), "ghi") != 0)
    exit (1);
  delete htab;
  exit (0);
}
TEST2

        echo test 2:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 3.
if test $result = ok -a $start_test_number -le 3; then
        cat >$test_file <<'TEST3'
#include <stdlib.h>
#include <string.h>
#include "allocate.h"
#include "hashtab.h"

static unsigned
hash_function (hash_table_entry_t entry)
{
  const char *str = (char *) entry;
  unsigned result, i;

  for (result = i = 0;*str++ != '\0'; i++)
    result += ((unsigned char) *str << (i % 8));
  return result;
}

static int
eq_function (hash_table_entry_t el1, hash_table_entry_t el2)
{
  return strcmp ((char *) el1, (char *) el2) == 0;
}

main ()
{
  hash_table_t htab;

  htab = new hash_table (0, hash_function, eq_function);
  *htab->find_entry ("abcd", 1) = "abcd";
  *htab->find_entry ("ef", 1) = "ef";
  *htab->find_entry ("ghi", 1) = "ghi";
  *htab->find_entry ("j", 1) = "j";
  *htab->find_entry ("klm", 1) = "klm";
  *htab->find_entry ("nopqrst", 1) = "nopqrst";
  if (*htab->find_entry ("kl", 0) != NULL)
    exit (1);
  delete htab;
  exit (0);
}
TEST3

        echo test 3:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 4.
if test $result = ok -a $start_test_number -le 4; then
        cat >$test_file <<'TEST4'
#include <stdlib.h>
#include <string.h>
#include "allocate.h"
#include "hashtab.h"

static unsigned
hash_function (hash_table_entry_t entry)
{
  const char *str = (char *) entry;
  unsigned result, i;

  for (result = i = 0;*str++ != '\0'; i++)
    result += ((unsigned char) *str << (i % 8));
  return result;
}

static int
eq_function (hash_table_entry_t el1, hash_table_entry_t el2)
{
  return strcmp ((char *) el1, (char *) el2) == 0;
}

main ()
{
  hash_table_t htab;

  htab = new hash_table (0, hash_function, eq_function);
  *htab->find_entry ("abcd", 1) = "abcd";
  *htab->find_entry ("ef", 1) = "ef";
  *htab->find_entry ("ghi", 1) = "ghi";
  *htab->find_entry ("j", 1) = "j";
  *htab->find_entry ("klm", 1) = "klm";
  *htab->find_entry ("nopqrst", 1) = "nopqrst";
  htab->remove_element_from_entry ("abcd");
  htab->remove_element_from_entry ("ef");
  htab->remove_element_from_entry ("ghi");
  htab->remove_element_from_entry ("nopqrst");
  if (strcmp ((char *) *htab->find_entry ("klm", 0), "klm") != 0)
    exit (1);
  delete htab;
  exit (0);
}
TEST4

        echo test 4:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 5.
if test $result = ok -a $start_test_number -le 5; then
        cat >$test_file <<'TEST5'
#include <stdlib.h>
#include <string.h>
#include "allocate.h"
#include "hashtab.h"

static unsigned
hash_function (hash_table_entry_t entry)
{
  const char *str = (char *) entry;
  unsigned result, i;

  for (result = i = 0;*str++ != '\0'; i++)
    result += ((unsigned char) *str << (i % 8));
  return result;
}

static int
eq_function (hash_table_entry_t el1, hash_table_entry_t el2)
{
  return strcmp ((char *) el1, (char *) el2) == 0;
}

main ()
{
  hash_table_t htab;

  htab = new hash_table (0, hash_function, eq_function);
  *htab->find_entry ("abcd", 1) = "abcd";
  *htab->find_entry ("ef", 1) = "ef";
  *htab->find_entry ("ghi", 1) = "ghi";
  *htab->find_entry ("j", 1) = "j";
  *htab->find_entry ("klm", 1) = "klm";
  *htab->find_entry ("nopqrst", 1) = "nopqrst";
  htab->remove_element_from_entry ("abcd");
  htab->remove_element_from_entry ("ef");
  htab->remove_element_from_entry ("ghi");
  htab->remove_element_from_entry ("nopqrst");
  if (*htab->find_entry ("abcd", 0) != NULL)
    exit (1);
  delete htab;
  exit (0);
}
TEST5

        echo test 5:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 6.
if test $result = ok -a $start_test_number -le 6; then
        cat >$test_file <<'TEST6'
#include <stdlib.h>
#include <string.h>
#include "allocate.h"
#include "hashtab.h"

static unsigned
hash_function (hash_table_entry_t entry)
{
  const char *str = (char *) entry;
  unsigned result, i;

  for (result = i = 0;*str++ != '\0'; i++)
    result += ((unsigned char) *str << (i % 8));
  return result;
}

static int
eq_function (hash_table_entry_t el1, hash_table_entry_t el2)
{
  return strcmp ((char *) el1, (char *) el2) == 0;
}

main ()
{
  hash_table_t htab;

  htab = new hash_table (0, hash_function, eq_function);
  *htab->find_entry ("abcd", 1) = "abcd";
  *htab->find_entry ("ef", 1) = "ef";
  *htab->find_entry ("ghi", 1) = "ghi";
  *htab->find_entry ("j", 1) = "j";
  *htab->find_entry ("klm", 1) = "klm";
  *htab->find_entry ("nopqrst", 1) = "nopqrst";
  htab->remove_element_from_entry ("abcd");
  htab->remove_element_from_entry ("ef");
  htab->remove_element_from_entry ("ghi");
  htab->remove_element_from_entry ("nopqrst");
  *htab->find_entry ("abcd", 1) = "abcd";
  *htab->find_entry ("ef", 1) = "ef";
  *htab->find_entry ("ghi", 1) = "ghi";
  *htab->find_entry ("j", 1) = "j";
  *htab->find_entry ("klm", 1) = "klm";
  *htab->find_entry ("nopqrst", 1) = "nopqrst";
  if (strcmp ((char *) *htab->find_entry ("abcd", 0), "abcd") != 0)
    exit (1);
  delete htab;
  exit (0);
}
TEST6

        echo test 6:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 7.
if test $result = ok -a $start_test_number -le 7; then
        cat >$test_file <<'TEST7'
#include <stdlib.h>
#include <string.h>
#include "allocate.h"
#include "hashtab.h"

static unsigned
hash_function (hash_table_entry_t entry)
{
  const char *str = (char *) entry;
  unsigned result, i;

  for (result = i = 0;*str++ != '\0'; i++)
    result += ((unsigned char) *str << (i % 8));
  return result;
}

static int
eq_function (hash_table_entry_t el1, hash_table_entry_t el2)
{
  return strcmp ((char *) el1, (char *) el2) == 0;
}

main ()
{
  hash_table_t htab;
  int c, ac;

  htab = new hash_table (0, hash_function, eq_function);
  *htab->find_entry ("abcd", 1) = "abcd";
  *htab->find_entry ("ef", 1) = "ef";
  *htab->find_entry ("ghi", 1) = "ghi";
  *htab->find_entry ("j", 1) = "j";
  *htab->find_entry ("klm", 1) = "klm";
  *htab->find_entry ("nopqrst", 1) = "nopqrst";
  c = htab->get_collisions ();
  ac = hash_table::get_all_collisions ();
  htab->empty ();
  if (c != htab->get_collisions () || ac != hash_table::get_all_collisions ())
    exit (1);
  if (*htab->find_entry ("abcd", 0) != NULL)
    exit (1);
  if (*htab->find_entry ("ef", 0) != NULL)
    exit (1);
  if (*htab->find_entry ("ghi", 0) != NULL)
    exit (1);
  if (*htab->find_entry ("j", 0) != NULL)
    exit (1);
  if (*htab->find_entry ("klm", 0) != NULL)
    exit (1);
  if (*htab->find_entry ("nopqrst", 0) != NULL)
    exit (1);
  *htab->find_entry ("abcd", 1) = "abcd";
  *htab->find_entry ("ef", 1) = "ef";
  *htab->find_entry ("ghi", 1) = "ghi";
  *htab->find_entry ("j", 1) = "j";
  *htab->find_entry ("klm", 1) = "klm";
  *htab->find_entry ("nopqrst", 1) = "nopqrst";
  if (strcmp ((char *) *htab->find_entry ("abcd", 0), "abcd") != 0)
    exit (1);
  delete htab;
  exit (0);
}
TEST7

        echo test 7:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Final message

if test $result = ok; then
        echo $script_file: it is all ok
        rm -f $addfiles $test_file $outfile
        exit 0
else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
fi
