#!/bin/sh
# @configure_input@

#
# Script to test of allocation package (files `bits.h', `bitscpp.C').
#
#   Copyright (C) 1997-2016 Vladimir Makarov.
#
#   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>
#
#   This is part of package for work with bits; you can redistribute it
#   and/or modify it under the terms of the GNU Library General Public
#   License as published by the Free Software Foundation; either
#   version 2, or (at your option) any later version.
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with GNU CC; see the file COPYING.  If not, write to
#   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
#   MA 02111-1307, USA.
#
# Usage: bits++.tst [start_test_number]
#
# The script outputs self-explanatory messages and returns zero exit code if 
# it is all ok.
#

script_file=$0
prefix=`basename $script_file .tst`
CXX='@CXX@'
CXX_options='@CXXFLAGS@ @DEFS@ -I. -I@srcdir@/'
source_addfiles='@srcdir@/bitscpp.C'
addfiles="${prefix}_bitscpp.o"
test_file=${prefix}_tbits.C
outfile=./${prefix}_a.out

if test x$1 = x
then
    start_test_number=1
else
    if expr $1 + 0 >/dev/null
    then
        start_test_number=`expr $1 + 0`
    else
        echo $script_file:invalid argument $1 2>&1
        exit 1
    fi
fi

# Compilation of addfiles

for i in $source_addfiles; do
  echo '      ' $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o
  if $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o; then
        result=ok
  else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
  fi
done

# Test 1.
if test $result = ok -a $start_test_number -le 1; then
        cat >$test_file <<'TEST1'
#include <stdlib.h>
#include "bits.h"
static char str [] = {0,0,0,0, 0,0,0,0};
int main ()
{
  int i, j;
  
  for (i = 0; i < sizeof (str) * CHAR_BIT; i++)
    if (bits::bit (str, i))
      exit (1);
  for (i = 0; i < sizeof (str) * CHAR_BIT; i++)
    {
      bits::set_bit (str, i, 1);
      for (j = 0; j < sizeof (str) * CHAR_BIT; j++)
        if (j <= i)
          {
            if (bits::bit (str, j) == 0)
              exit (1);
          }
        else if (bits::bit (str, j))
          exit (1);
    }
  exit (0);
}
TEST1

        echo test 1:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 2.
if test $result = ok -a $start_test_number -le 2; then
        cat >$test_file <<'TEST2'
#include <stdlib.h>
#include "bits.h"
static char str [] = {0,0,0,0, 0,0,0,0};
int main ()
{
  int i;
  
  for (i = 0; i < sizeof (str) * CHAR_BIT; i++)
    if (!bits::is_zero_bit_string (str, i,
                                   (sizeof (str) * CHAR_BIT - i) / 2 + 1))
      exit (1);
  bits::bit_string_set (str, 13, 1, 35);
  for (i = 0; i < 13; i++)
    if (!bits::is_zero_bit_string (str, i, 13 - i))
      exit (1);
  for (i = 13; i < 48; i++)
    if (bits::is_zero_bit_string (str, i, 48 - i))
      exit (1);
  for (i = 48; i < sizeof (str) * CHAR_BIT; i++)
    if (!bits::is_zero_bit_string (str, i, sizeof (str) * CHAR_BIT - i))
      exit (1);
  exit (0);
}
TEST2

        echo test 2:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 3.
if test $result = ok -a $start_test_number -le 3; then
        cat >$test_file <<'TEST3'
#include <stdlib.h>
#include "bits.h"
static char str [] = {0,0,0,0, 0,0,0,0};
int main ()
{
  int i;
  
  for (i = 0; i + i/2 + 1 < sizeof (str) * CHAR_BIT; i++)
    {
      bits::bit_string_set (str, i, 1, i/2 + 1);
      if (!bits::is_zero_bit_string (str, 0, i - 1))
        exit (1);
      if (bits::is_zero_bit_string (str, i, i/2 + 1))
        exit (1);
      if (!bits::is_zero_bit_string (str, i + i/2 + 1,
                                     sizeof (str) * CHAR_BIT - (i + i/2 + 1)))
        exit (1);
      bits::bit_string_set (str, 0, 0, sizeof (str) * CHAR_BIT);
    }
  exit (0);
}
TEST3

        echo test 3:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 4.
if test $result = ok -a $start_test_number -le 4; then
        cat >$test_file <<'TEST4'
#include <stdlib.h>
#include "bits.h"
static char str [] = {0,0,0,0, 0,0,0,0};
static char str1 [] = {0,0,0,0, 0,0,0,0};
int main ()
{
  int i;
  
  bits::bit_string_set (str, 2, 1, 43);
  bits::bit_string_set (str1, 2, 1, 40);
  for (i = 0; i < 42; i++)
    if (bits::bit_string_comparison (str, i, str1, i, 42 - i) != 0)
      exit (1);
  for (i = 0; i < 43; i++)
    if (bits::bit_string_comparison (str, i, str1, i,
                                     sizeof (str) * CHAR_BIT - i)
        <= 0)
      exit (1);
  for (i = 0; i < 43; i++)
    if (bits::bit_string_comparison (str1, i, str, i,
                                     sizeof (str) * CHAR_BIT - i)
        >= 0)
      exit (1);
  exit (0);
}
TEST4

        echo test 4:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 5.
if test $result = ok -a $start_test_number -le 5; then
        cat >$test_file <<'TEST5'
#include <stdlib.h>
#include "bits.h"
static char str [] = {0,0,0,0, 0,0,0,0};
static char str1 [] = {0,0,0,0, 0,0,0,0};
int main ()
{
  int i;
  
  bits::bit_string_set (str, 2, 1, 43);
  for (i = 0; i + 5 < sizeof (str) * CHAR_BIT; i++)
    {
      bits::bit_string_copy (str1, i + 5, str, i,
                             sizeof (str) * CHAR_BIT - i - 5);
      if (bits::bit_string_comparison (str1, i + 5, str, i,
                                       sizeof (str) * CHAR_BIT - i - 5) != 0)
        exit (1);
    }  
  exit (0);
}
TEST5

        echo test 5:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 6.
if test $result = ok -a $start_test_number -le 6; then
        cat >$test_file <<'TEST6'
#include <stdlib.h>
#include "bits.h"
static char str [] = {0,0,0,0, 0,0,0,0};
static char str1 [] = {0,0,0,0, 0,0,0,0};
int main ()
{
  int i;
  
  bits::bit_string_set (str, 2, 1, 43);
  bits::bit_string_set (str1, 2, 1, 43);
  for (i = 0; i + 5 < sizeof (str) * CHAR_BIT; i++)
    {
      bits::bit_string_set (str, 0, 0, sizeof (str) * CHAR_BIT);
      bits::bit_string_set (str, 2, 1, 43);
      bits::bit_string_move (str, i + 5, str, i,
                             sizeof (str) * CHAR_BIT - i - 5);
      if (bits::bit_string_comparison (str, i + 5, str1, i,
                                       sizeof (str) * CHAR_BIT - i - 5) != 0)
        exit (1);
    }  
  exit (0);
}
TEST6

        echo test 6:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 7.
if test $result = ok -a $start_test_number -le 7; then
        cat >$test_file <<'TEST7'
#include <stdlib.h>
#include "bits.h"
static char str [] = {0,0,0,0, 0,0,0,0};
static char str1 [] = {0,0,0,0, 0,0,0,0};
int main ()
{
  int i;
  
  bits::bit_string_set (str, 2, 1, 43);
  bits::bit_string_set (str1, 2, 1, 43);
  for (i = 0; i + 5 < sizeof (str) * CHAR_BIT; i++)
    {
      bits::bit_string_set (str, 0, 0, sizeof (str) * CHAR_BIT);
      bits::bit_string_set (str, 2, 1, 43);
      bits::bit_string_move (str, i, str, i + 5,
                             sizeof (str) * CHAR_BIT - i - 5);
      if (bits::bit_string_comparison (str, i, str1, i + 5,
                                       sizeof (str) * CHAR_BIT - i - 5) != 0)
        exit (1);
    }  
  exit (0);
}
TEST7

        echo test 7:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Final message

if test $result = ok; then
        echo $script_file: it is all ok
        rm -f $addfiles $test_file $outfile
        exit 0
else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
fi
