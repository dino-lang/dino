#!/bin/sh
# @configure_input@

#
# Script to test of package for output of errors (files `errors.h',
#                                                 `errorscpp.C').
#
#
#   Copyright (C) 1997-2016 Vladimir Makarov.
#
#   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>
#
#   This is part of package for output of compiler messages; you can
#   redistribute it and/or modify it under the terms of the GNU Library
#   General Public License as published by the Free Software
#   Foundation; either version 2, or (at your option) any later
#   version.
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with GNU CC; see the file COPYING.  If not, write to
#   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
#   MA 02111-1307, USA.
#
# Usage: errors++.tst [start_test_number]
#
# The script outputs self-explanatory messages and returns zero exit code if 
# it is all ok.
#

script_file=$0
prefix=`basename $script_file .tst`
CXX='@CXX@'
CXX_options='@CXXFLAGS@ @DEFS@ -I. -I@srcdir@/'
source_addfiles='@srcdir@/allocatecpp.C @srcdir@/vlobjectcpp.C @srcdir@/objstackcpp.C @srcdir@/positioncpp.C @srcdir@/errorscpp.C'
addfiles="${prefix}_allocatecpp.o ${prefix}_vlobjectcpp.o ${prefix}_objstackcpp.o ${prefix}_positioncpp.o ${prefix}_errorscpp.o"
test_file=${prefix}_terrors.C
temp_file=_${prefix}_temp.out
temp2_file=_${prefix}_temp2.out
temp3_file=_${prefix}_temp3.out
outfile=./${prefix}_a.out
cmp=cmp

if test x$1 = x
then
    start_test_number=1
else
    if expr $1 + 0 >/dev/null
    then
        start_test_number=`expr $1 + 0`
    else
        echo $script_file:invalid argument $1 2>&1
        exit 1
    fi
fi

# Compilation of addfiles

for i in $source_addfiles; do
  echo '      ' $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o
  if $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o; then
        result=ok
  else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
  fi
done

# Test 1.
if test $result = ok -a $start_test_number -le 1; then
        cat >$test_file <<'TEST1'
#include <stdlib.h>
#include "allocate.h"
#include "position.h"
#include "errors.h"
int main ()
{
  errors err (1 /*TRUE*/);

  positions::initiate ();
  err.error (1, positions::current, "fatal error 1");
  positions::finish ();
  exit (0);
}
TEST1

        echo test 1:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile "2>$temp_file"
                if $outfile 2>$temp_file; then
                        result=fail
                else
                        echo '      ' $cmp $temp_file $temp3_file
                        if cat <<'OUTPUT1' >$temp3_file && $cmp $temp_file $temp3_file; then
fatal error 1
OUTPUT1
                                result=ok
                        else
                                result=fail
                        fi
                fi
        else
                result=fail
        fi
fi

# Test 2.
if test $result = ok -a $start_test_number -le 2; then
        cat >$test_file <<'TEST2'
#include <stdlib.h>
#include <stdio.h>
#include "position.h"
#include "allocate.h"
#include "errors.h"
int main ()
{
  errors err (1 /*TRUE*/);

  positions::initiate ();
  positions::start_file ("file 1");
  positions::current.line_number += 5;
  fopen ("__28861", "r");
  err.system_error (1, positions::current, "fatal system error %d, %s:", 1,
                    "__28861");
  positions::finish ();
  exit (0);
}
TEST2

        echo test 2:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile "2>$temp_file"
                if $outfile 2>$temp_file; then
                        result=fail
                else
                        echo '      ' $cmp $temp_file $temp3_file
                        if cat <<'OUTPUT2' >$temp3_file && $cmp $temp_file $temp3_file; then
file 1:6:1: fatal system error 1, __28861:No such file or directory
OUTPUT2
                                result=ok
                        else
                                result=fail
                        fi
                fi
        else
                result=fail
        fi
fi

# Test 3.
if test $result = ok -a $start_test_number -le 3; then
        cat >$test_file <<'TEST3'
#include <stdlib.h>
#include <stdio.h>
#include "allocate.h"
#include "position.h"
#include "errors.h"
int main ()
{
  errors err (1 /*TRUE*/);

  positions::initiate ();
  err.error (0, positions::no_position, "error %d", 1);
  positions::start_file ("file 1");
  positions::current.line_number += 5;
  err.error (0, positions::current, "error %d", 2);
  positions::start_file ("file 2");
  err.error (0, positions::current, "error %d", 3);
  positions::current.line_number += 3;
  err.error (0, positions::current, "error %d", 4);
  positions::start_file ("file 3");
  err.error (0, positions::current, "error %d", 5);
  positions::current.line_number = 0;
  err.warning (positions::current, "warning %d", 1);
  positions::finish_file ();
  err.system_error (0, positions::current, "system error %d:", 1);
  fprintf (stderr, "%d\n%d\n",
           err.number_of_errors (), err.number_of_warnings ());
  positions::finish ();
  exit (0);
}
TEST3

        echo test 3:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile "2>$temp_file"
                if $outfile 2>$temp_file; then
                        echo '      ' $cmp $temp_file $temp3_file
                        if cat <<'OUTPUT3' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1:1: error 5
file 3:1: warning 1
In file processed from file 1:6:1:
file 2:4:1: system error 1:Unknown error
6
1
OUTPUT3
                                result=ok
                        elif cat <<'OUTPUT3-1' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1:1: error 5
file 3:1: warning 1
In file processed from file 1:6:1:
file 2:4:1: system error 1:Error 0
6
1
OUTPUT3-1
                                result=ok
                        elif cat <<'OUTPUT3-2' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1:1: error 5
file 3:1: warning 1
In file processed from file 1:6:1:
file 2:4:1: system error 1:Success
6
1
OUTPUT3-2
                                result=ok
                        elif cat <<'OUTPUT3-3' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1:1: error 5
file 3:1: warning 1
In file processed from file 1:6:1:
file 2:4:1: system error 1:error 0
6
1
OUTPUT3-3
                                result=ok
                        elif cat <<'OUTPUT3-4' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1:1: error 5
file 3:1: warning 1
In file processed from file 1:6:1:
file 2:4:1: system error 1:No error
6
1
OUTPUT3-4
                                result=ok
                        elif cat <<'OUTPUT3-5' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1:1: error 5
file 3:1: warning 1
In file processed from file 1:6:1:
file 2:4:1: system error 1:Undefined error: 0
6
1
OUTPUT3-5
                                result=ok
			else
				cat $temp2_file
                                result=fail
                        fi
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 4.
if test $result = ok -a $start_test_number -le 4; then
        cat >$test_file <<'TEST4'
#include <stdlib.h>
#include "allocate.h"
#include "position.h"
#include "errors.h"
int main ()
{
  errors err (1 /*TRUE*/);

  positions::initiate ();
  err.maximum_number_of_errors = 1;
  positions::start_file ("file 1");
  positions::current.line_number += 5;
  err.error (0, positions::current, "error %d", 1);
  positions::finish ();
  exit (0);
}
TEST4

        echo test 4:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile "2>$temp_file"
                if $outfile 2>$temp_file; then
                        result=fail
                else
                        echo '      ' $cmp $temp_file $temp3_file
                        if cat <<'OUTPUT4' >$temp3_file && $cmp $temp_file $temp3_file; then
file 1:6:1: fatal error -- too many errors
OUTPUT4
                                result=ok
                        else
                                result=fail
                        fi
                fi
        else
                result=fail
        fi
fi

# Test 5.
if test $result = ok -a $start_test_number -le 5; then
        cat >$test_file <<'TEST5'
#include <stdlib.h>
#include "allocate.h"
#include "position.h"
#include "errors.h"
int main ()
{
  errors err (0 /*TRUE*/);

  positions::initiate ();
  err.output ();
  err.output ();
  positions::finish ();
  exit (0);
}
TEST5

        echo test 5:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile "2>$temp_file"
                if $outfile 2>$temp_file; then
                        echo '      ' $cmp $temp_file $temp3_file
                        if cat <<'OUTPUT5' >$temp3_file && $cmp $temp_file $temp3_file; then
OUTPUT5
                                result=ok
                        else
                                result=fail
                        fi
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 6.
if test $result = ok -a $start_test_number -le 6; then
        cat >$test_file <<'TEST6'
#include <stdlib.h>
#include "allocate.h"
#include "position.h"
#include "errors.h"
int main ()
{
  errors err (0);

  positions::initiate ();
  positions::start_file ("file 1");  
  err.error (1, positions::current, "fatal error 1");
  positions::finish ();
  exit (0);
}
TEST6

        echo test 6:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile "2>$temp_file"
                if $outfile 2>$temp_file; then
                        result=fail
                else
                        echo '      ' $cmp $temp_file $temp3_file
                        if cat <<'OUTPUT6' >$temp3_file && $cmp $temp_file $temp3_file; then
file 1:1:1: fatal error 1
OUTPUT6
                                result=ok
                        else
                                result=fail
                        fi
                fi
        else
                result=fail
        fi
fi

# Test 7.
if test $result = ok -a $start_test_number -le 7; then
        cat >$test_file <<'TEST7'
#include <stdlib.h>
#include <stdio.h>
#include "allocate.h"
#include "position.h"
#include "errors.h"
int main ()
{
  errors err (0);

  positions::initiate ();
  err.error (0, positions::no_position, "error %d", 1);
  positions::start_file ("file 1");
  positions::current.line_number += 5;
  err.error (0, positions::current, "error %d", 2);
  positions::start_file ("file 2");
  err.error (0, positions::current, "error %d", 3);
  positions::current.line_number += 3;
  err.error (0, positions::current, "error %d", 4);
  positions::start_file ("file 3");
  err.error (0, positions::current, "error %d", 5);
  positions::current.line_number = 0;
  err.warning (positions::current, "warning %d", 1);
  positions::finish_file ();
  err.system_error (0, positions::current, "system error %d:", 1);
  fprintf (stderr, "%d\n%d\n",
           err.number_of_errors (), err.number_of_warnings ());
  err.output ();
  err.output ();
  fprintf (stderr, "%d\n%d\n",
           err.number_of_errors (), err.number_of_warnings ());
  positions::finish ();
  exit (0);
}
TEST7

        echo test 7:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile "2>$temp_file"
                if $outfile 2>$temp_file; then
                        echo '      ' $cmp $temp_file $temp3_file
                        if cat <<'OUTPUT7' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
6
1
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
file 2:4:1: system error 1:Unknown error
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
6
1
OUTPUT7
                                result=ok
                        elif cat <<'OUTPUT7-1' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
6
1
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
file 2:4:1: system error 1:Error 0
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
6
1
OUTPUT7-1
                                result=ok
                        elif cat <<'OUTPUT7-2' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
6
1
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
file 2:4:1: system error 1:Success
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
6
1
OUTPUT7-2
                                result=ok
                        elif cat <<'OUTPUT7-3' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
6
1
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
file 2:4:1: system error 1:error 0
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
6
1
OUTPUT7-3
                                result=ok
                        elif cat <<'OUTPUT7-4' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
6
1
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
file 2:4:1: system error 1:No error
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
6
1
OUTPUT7-4
                                result=ok
                        elif cat <<'OUTPUT7-5' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
6
1
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 3
file 2:4:1: error 4
file 2:4:1: system error 1:Undefined error: 0
In file processed from file 2:4:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
6
1
OUTPUT7-5
                                result=ok
                        else
				cat $temp2_file
                                result=fail
                        fi
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 8.
if test $result = ok -a $start_test_number -le 8; then
        cat >$test_file <<'TEST8'
#include <stdlib.h>
#include <stdio.h>
#include "allocate.h"
#include "position.h"
#include "errors.h"
int main ()
{
  errors err (0);

  positions::initiate ();
  err.error (0, positions::no_position, "error %d", 1);
  positions::start_file ("file 1");
  positions::current.line_number += 5;
  err.error (0, positions::current, "error %d", 2);
  positions::start_file ("file 2");
  positions::current.column_number += 3;
  err.error (0, positions::current, "error %d", 3);
  positions::current.column_number -= 3;
  err.error (0, positions::current, "error %d", 4);
  fprintf (stderr, "%d\n%d\n",
           err.number_of_errors (), err.number_of_warnings ());
  err.output ();
  positions::start_file ("file 3");
  err.error (0, positions::current, "error %d", 5);
  positions::current.line_number = 0;
  err.warning (positions::current, "warning %d", 1);
  positions::finish_file ();
  fprintf (stderr, "%d\n%d\n",
           err.number_of_errors (), err.number_of_warnings ());
  err.system_error (1, positions::current, "system error %d:", 1);
  positions::finish ();
  exit (0);
}
TEST8

        echo test 8:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile "2>$temp_file"
                if $outfile 2>$temp_file; then
                        result=fail
                else
                        echo '      ' $cmp $temp_file $temp3_file
                        if cat <<'OUTPUT8' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
5
1
file 2:1:1: system error 1:Unknown error
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
OUTPUT8
                                result=ok
                        elif cat <<'OUTPUT8-1' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
5
1
file 2:1:1: system error 1:Error 0
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
OUTPUT8-1
                                result=ok
                        elif cat <<'OUTPUT8-2' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
5
1
file 2:1:1: system error 1:Success
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
OUTPUT8-2
                                result=ok
                        elif cat <<'OUTPUT8-3' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
5
1
file 2:1:1: system error 1:error 0
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
OUTPUT8-3
                                result=ok
                        elif cat <<'OUTPUT8-4' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
5
1
file 2:1:1: system error 1:No error
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
OUTPUT8-4
                                result=ok
                        elif cat <<'OUTPUT8-5' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
5
1
file 2:1:1: system error 1:Undefined error: 0
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 3:1:1: error 5
OUTPUT8-5
                                result=ok
                        else
				cat $temp2_file
                                result=fail
                        fi
                fi
        else
                result=fail
        fi
fi

# Test 9.
if test $result = ok -a $start_test_number -le 9; then
        cat >$test_file <<'TEST9'
#include <stdlib.h>
#include <stdio.h>
#include "allocate.h"
#include "position.h"
#include "errors.h"
int main ()
{
  position_t appended_message_position;
  errors err (0);

  positions::initiate ();
  err.error (0, positions::no_position, "error %d", 1);
  positions::start_file ("file 1");
  positions::current.line_number += 5;
  appended_message_position = positions::current;
  err.error (0, positions::current, "error %d", 2);
  positions::start_file ("file 2");
  positions::current.column_number += 3;
  err.error (0, positions::current, "error %d", 3);
  positions::current.column_number -= 3;
  err.append_message (appended_message_position, "appended 1 to error %d", 3);
  err.append_message (appended_message_position, "appended 2 to error %d", 3);
  err.error (0, positions::current, "error %d", 4);
  fprintf (stderr, "%d\n%d\n",
           err.number_of_errors (), err.number_of_warnings ());
  err.output ();
  positions::start_file ("file 3");
  err.error (0, positions::current, "error %d", 5);
  positions::current.line_number = 0;
  err.warning (positions::current, "warning %d", 1);
  positions::current.line_number = 2;
  err.append_message (appended_message_position, "appended to warning %d", 1);
  positions::finish_file ();
  fprintf (stderr, "%d\n%d\n",
           err.number_of_errors (), err.number_of_warnings ());
  err.system_error (1, positions::current, "system error %d:", 1);
  positions::finish ();
  exit (0);
}
TEST9

        echo test 9:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile "2>$temp_file"
                if $outfile 2>$temp_file; then
                        result=fail
                else
                        echo '      ' $cmp $temp_file $temp3_file
                        if cat <<'OUTPUT9' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
file 1:6:1: appended 1 to error 3
file 1:6:1: appended 2 to error 3
5
1
file 2:1:1: system error 1:Unknown error
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 1:6:1: appended to warning 1
file 3:1:1: error 5
OUTPUT9
                                result=ok
                        elif cat <<'OUTPUT9-1' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
file 1:6:1: appended 1 to error 3
file 1:6:1: appended 2 to error 3
5
1
file 2:1:1: system error 1:Error 0
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 1:6:1: appended to warning 1
file 3:1:1: error 5
OUTPUT9-1
                                result=ok
                        elif cat <<'OUTPUT9-2' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
file 1:6:1: appended 1 to error 3
file 1:6:1: appended 2 to error 3
5
1
file 2:1:1: system error 1:Success
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 1:6:1: appended to warning 1
file 3:1:1: error 5
OUTPUT9-2
                                result=ok
                        elif cat <<'OUTPUT9-3' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
file 1:6:1: appended 1 to error 3
file 1:6:1: appended 2 to error 3
5
1
file 2:1:1: system error 1:error 0
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 1:6:1: appended to warning 1
file 3:1:1: error 5
OUTPUT9-3
                                result=ok
                        elif cat <<'OUTPUT9-4' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
file 1:6:1: appended 1 to error 3
file 1:6:1: appended 2 to error 3
5
1
file 2:1:1: system error 1:No error
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 1:6:1: appended to warning 1
file 3:1:1: error 5
OUTPUT9-4
                                result=ok
                        elif cat <<'OUTPUT9-5' >$temp3_file && $cmp $temp_file $temp3_file >$temp2_file; then
4
0
error 1
file 1:6:1: error 2
In file processed from file 1:6:1:
file 2:1:1: error 4
file 2:1:4: error 3
file 1:6:1: appended 1 to error 3
file 1:6:1: appended 2 to error 3
5
1
file 2:1:1: system error 1:Undefined error: 0
In file processed from file 2:1:1:, from file 1:6:1:
file 3:1: warning 1
file 1:6:1: appended to warning 1
file 3:1:1: error 5
OUTPUT9-5
                                result=ok
                        else
				cat $temp2_file
                                result=fail
                        fi
                fi
        else
                result=fail
        fi
fi

# Final message

if test $result = ok; then
        echo $script_file: it is all ok
        rm -f $addfiles $test_file $temp2_file $temp3_file $temp_file $outfile
        exit 0
else
        echo '***' $script_file:test is failed see files $test_file, $temp_file, $temp3_file
        exit 1
fi
