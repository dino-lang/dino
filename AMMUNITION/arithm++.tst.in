#!/bin/sh
# @configure_input@

#
# Script to test of arithmetic package (files `arithm.h', `arithmcpp.C').
#
#   Copyright (C) 1997-2015 Vladimir Makarov.
#
#   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>
#
#   This is part of package of arbitrary precision integer arithmetic;
#   you can redistribute it and/or modify it under the terms of the GNU
#   Library General Public License as published by the Free Software
#   Foundation; either version 2, or (at your option) any later
#   version.
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with GNU CC; see the file COPYING.  If not, write to
#   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
#   MA 02111-1307, USA.
#
# Usage: arithm++.tst [start_test_number]
#
# The script outputs self-explanatory messages and returns zero exit code if 
# it is all ok.
#

script_file=$0
prefix=`basename $script_file .tst`
CXX='@CXX@'
CXX_options='@CXXFLAGS@ @DEFS@ -I. -I@srcdir@/'
source_addfiles='@srcdir@/arithmcpp.C'
addfiles="${prefix}_arithmcpp.o"
test_file=${prefix}_tarithm.C
outfile=./${prefix}_a.out

if test x$1 = x
then
    start_test_number=1
else
    if expr $1 + 0 >/dev/null
    then
        start_test_number=`expr $1 + 0`
    else
        echo $script_file:invalid argument $1 2>&1
        exit 1
    fi
fi

# Compilation of addfiles

for i in $source_addfiles; do
  echo '      ' $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o
  if $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o; then
        result=ok
  else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
  fi
done

# Test 1.
if test $result = ok -a $start_test_number -le 1; then
        cat >$test_file <<'TEST1'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i, b;
  char str [20], s[20], d[4], d1[4];

  signed_integer::from_string (4, "-2147483649", d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN);
  signed_integer::from_string (4, str, d);
  if (integer::overflow_bit)
    exit (1);
  signed_integer::to_string (4, d, s);
  if (strcmp (s, str) !=0)
    exit (1);

  signed_integer::from_based_string (4, "-80000001", 16, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN);
  signed_integer::from_string (4, str, d);
  if (integer::overflow_bit)
    exit (1);
  signed_integer::to_based_string (4, d, 16, s);
  if (strcmp (s, "-80000000") !=0)
    exit (1);

  signed_integer::from_based_string (4, "-800000Ff", 16, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN);
  signed_integer::from_string (4, str, d);
  if (integer::overflow_bit)
    exit (1);
  signed_integer::to_based_string (4, d, 16, s);
  if (strcmp (s, "-80000000") !=0)
    exit (1);

  signed_integer::from_based_string (4, "-20000000001", 8, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN);
  signed_integer::from_string (4, str, d);
  if (integer::overflow_bit)
    exit (1);
  signed_integer::to_based_string (4, d, 8, s);
  if (strcmp (s, "-20000000000") !=0)
    exit (1);

  signed_integer::from_string (4, "2147483648", d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX);
  signed_integer::from_string (4, str, d);
  if (integer::overflow_bit)
    exit (1);
  signed_integer::to_string (4, d, s);
  if (strcmp (s, str) !=0)
    exit (1);  

  signed_integer::from_based_string (4, "80000000", 16, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX);
  signed_integer::from_string (4, str, d);
  if (integer::overflow_bit)
    exit (1);
  signed_integer::to_based_string (4, d, 16, s);
  if (strcmp (s, "7fffffff") !=0)
    exit (1);  

  signed_integer::from_based_string (4, "20000000000", 8, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX);
  signed_integer::from_string (4, str, d);
  if (integer::overflow_bit)
    exit (1);
  signed_integer::to_based_string (4, d, 8, s);
  if (strcmp (s, "17777777777") !=0)
    exit (1);  

  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      signed_integer::from_string (4, str, d);
      if (integer::overflow_bit)
        exit (1);
      signed_integer::to_string (4, d, s);
      if (strcmp (s, str) !=0)
        exit (1);
    }
  for (b = 2; b <= 36; b++)
    for (i = -2000; i < 2000; i++)
      {
        sprintf (str, "%d", i);
        signed_integer::from_string (4, str, d);
        if (integer::overflow_bit)
          exit (1);
        signed_integer::to_based_string (4, d, b, s);
        signed_integer::from_based_string (4, s, b, d1);
        if (!signed_integer::eq (4, d, d1))
          exit (1);
      }
  exit (0);
}
TEST1

        echo test 1:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 2.
if test $result = ok -a $start_test_number -le 2; then
        cat >$test_file <<'TEST2'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i, b;
  char str [20], s[20], d[4], d1[4];

  unsigned_integer::from_string (4, "4294967296", d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  unsigned_integer::from_string (4, str, d);
  if (integer::overflow_bit)
    exit (1);
  unsigned_integer::to_string (4, d, s);
  if (strcmp (s, str) !=0)
    exit (1);

  unsigned_integer::from_based_string (4, "100000000", 16, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  unsigned_integer::from_string (4, str, d);
  if (integer::overflow_bit)
    exit (1);
  unsigned_integer::to_based_string (4, d, 16, s);
  if (strcmp (s, "ffffffff") !=0)
    exit (1);

  unsigned_integer::from_based_string (4, "40000000000", 8, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  unsigned_integer::from_string (4, str, d);
  if (integer::overflow_bit)
    exit (1);
  unsigned_integer::to_based_string (4, d, 8, s);
  if (strcmp (s, "37777777777") !=0)
    exit (1);

  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer::from_string (4, str, d);
      if (integer::overflow_bit)
        exit (1);
      unsigned_integer::to_string (4, d, s);
      if (strcmp (s, str) !=0)
        exit (1);
    }
  for (b = 2; b <= 36; b++)
    for (i = 0; i < 4000 ; i++)
      {
        sprintf (str, "%u", i);
        unsigned_integer::from_string (4, str, d);
        if (integer::overflow_bit)
          exit (1);
        unsigned_integer::to_based_string (4, d, b, s);
        unsigned_integer::from_based_string (4, s, b, d1);
        if (!unsigned_integer::eq (4, d, d1))
          exit (1);
      }
  exit (0);
}
TEST2

        echo test 2:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 3.
if test $result = ok -a $start_test_number -le 3; then
        cat >$test_file <<'TEST3'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%d", INT_MAX);
  signed_integer::from_string (4, str, d);
  signed_integer::from_string (4, "1", e);
  signed_integer::add (4, d, e, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX - 4);
  signed_integer::from_string (4, str, d);
  sprintf (str, "%d", 4);
  signed_integer::from_string (4, str, e);
  signed_integer::add (4, d, e, d);
  if (integer::overflow_bit)
    exit (1);
  signed_integer::to_string (4, d, s);
  sprintf (str, "%d", INT_MAX);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      signed_integer::from_string (4, str, d);
      sprintf (str, "%d", i + 1);
      signed_integer::from_string (4, str, e);
      signed_integer::add (4, d, e, d);
      if (integer::overflow_bit)
        exit (1);
      signed_integer::to_string (4, d, s);
      if (atoi (s) != i + i + 1)
        exit (1);
    }
  exit (0);
}
TEST3

        echo test 3:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 4.
if test $result = ok -a $start_test_number -le 4; then
        cat >$test_file <<'TEST4'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%u", UINT_MAX);
  unsigned_integer::from_string (4, str, d);
  unsigned_integer::from_string (4, "1", e);
  unsigned_integer::add (4, d, e, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX - 4);
  unsigned_integer::from_string (4, str, d);
  sprintf (str, "%u", 4);
  unsigned_integer::from_string (4, str, e);
  unsigned_integer::add (4, d, e, d);
  if (integer::overflow_bit)
    exit (1);
  unsigned_integer::to_string (4, d, s);
  sprintf (str, "%u", UINT_MAX);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer::from_string (4, str, d);
      sprintf (str, "%u", i + 1);
      unsigned_integer::from_string (4, str, e);
      unsigned_integer::add (4, d, e, d);
      if (integer::overflow_bit)
        exit (1);
      unsigned_integer::to_string (4, d, s);
      if (atoi (s) != i + i + 1)
        exit (1);
    }
  exit (0);
}
TEST4

        echo test 4:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 5.
if test $result = ok -a $start_test_number -le 5; then
        cat >$test_file <<'TEST5'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%d", INT_MIN);
  signed_integer::from_string (4, str, d);
  signed_integer::from_string (4, "1", e);
  signed_integer::subtract (4, d, e, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN + 4);
  signed_integer::from_string (4, str, d);
  sprintf (str, "%d", 4);
  signed_integer::from_string (4, str, e);
  signed_integer::subtract (4, d, e, d);
  if (integer::overflow_bit)
    exit (1);
  signed_integer::to_string (4, d, s);
  sprintf (str, "%d", INT_MIN);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      signed_integer::from_string (4, str, d);
      sprintf (str, "%d", 10 - i);
      signed_integer::from_string (4, str, e);
      signed_integer::subtract (4, d, e, d);
      if (integer::overflow_bit)
        exit (1);
      signed_integer::to_string (4, d, s);
      if (atoi (s) != i + i - 10)
        exit (1);
    }
  exit (0);
}
TEST5

        echo test 5:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 6.
if test $result = ok -a $start_test_number -le 6; then
        cat >$test_file <<'TEST6'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%u", UINT_MAX - 2);
  unsigned_integer::from_string (4, str, d);
  sprintf (str, "%u", UINT_MAX - 1);
  unsigned_integer::from_string (4, str, e);
  unsigned_integer::subtract (4, d, e, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  unsigned_integer::from_string (4, str, d);
  unsigned_integer::subtract (4, d, d, d);
  if (integer::overflow_bit)
    exit (1);
  unsigned_integer::to_string (4, d, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer::from_string (4, str, d);
      sprintf (str, "%u",  i / 2);
      unsigned_integer::from_string (4, str, e);
      unsigned_integer::subtract (4, d, e, d);
      if (integer::overflow_bit)
        exit (1);
      unsigned_integer::to_string (4, d, s);
      if (atoi (s) != i - i/2)
        exit (1);
    }
  exit (0);
}
TEST6

        echo test 6:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 7.
if test $result = ok -a $start_test_number -le 7; then
        cat >$test_file <<'TEST7'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%d", INT_MAX / 2 + 1);
  signed_integer::from_string (4, str, d);
  signed_integer::from_string (4, "2", e);
  signed_integer::multiply (4, d, e, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN / 2 - 1);
  signed_integer::from_string (4, str, d);
  signed_integer::from_string (4, "2", e);
  signed_integer::multiply (4, d, e, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX / 3);
  signed_integer::from_string (4, str, d);
  sprintf (str, "%d", 3);
  signed_integer::from_string (4, str, e);
  signed_integer::multiply (4, d, e, d);
  if (integer::overflow_bit)
    exit (1);
  signed_integer::to_string (4, d, s);
  sprintf (str, "%d", (INT_MAX / 3) * 3);
  if (strcmp (s, str) != 0)
    exit (1);
  sprintf (str, "%d", INT_MIN / 2);
  signed_integer::from_string (4, str, d);
  sprintf (str, "%d", 2);
  signed_integer::from_string (4, str, e);
  signed_integer::multiply (4, d, e, d);
  if (integer::overflow_bit)
    exit (1);
  signed_integer::to_string (4, d, s);
  sprintf (str, "%d", (INT_MIN / 2) * 2);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      signed_integer::from_string (4, str, d);
      sprintf (str, "%d", i + 1000);
      signed_integer::from_string (4, str, e);
      signed_integer::multiply (4, d, e, d);
      if (integer::overflow_bit)
        exit (1);
      signed_integer::to_string (4, d, s);
      if (atoi (s) != i * (i + 1000))
        exit (1);
    }
  exit (0);
}
TEST7

        echo test 7:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 8.
if test $result = ok -a $start_test_number -le 8; then
        cat >$test_file <<'TEST8'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  sprintf (str, "%u", UINT_MAX / 5 + 1);
  unsigned_integer::from_string (4, str, d);
  sprintf (str, "%u", 5);
  unsigned_integer::from_string (4, str, e);
  unsigned_integer::multiply (4, d, e, d);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX / 2);
  unsigned_integer::from_string (4, str, d);
  sprintf (str, "%u", 2);
  unsigned_integer::from_string (4, str, e);
  unsigned_integer::multiply (4, d, e, d);
  if (integer::overflow_bit)
    exit (1);
  unsigned_integer::to_string (4, d, s);
  sprintf (str, "%u", (UINT_MAX / 2) * 2);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer::from_string (4, str, d);
      sprintf (str, "%u",  i / 2);
      unsigned_integer::from_string (4, str, e);
      unsigned_integer::multiply (4, d, e, d);
      if (integer::overflow_bit)
        exit (1);
      unsigned_integer::to_string (4, d, s);
      if (atoi (s) != i * (i/2))
        exit (1);
    }
  exit (0);
}
TEST8

        echo test 8:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 9.
if test $result = ok -a $start_test_number -le 9; then
        cat >$test_file <<'TEST9'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  signed_integer::from_string (4, "10", d);
  signed_integer::from_string (4, "0", e);
  signed_integer::divide (4, d, e, d);
  if (!integer::overflow_bit)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      signed_integer::from_string (4, str, d);
      sprintf (str, "%d", (i<0? - i/20 + 1 : - i/20 - 1));
      signed_integer::from_string (4, str, e);
      signed_integer::divide (4, d, e, d);
      if (integer::overflow_bit)
        exit (1);
      signed_integer::to_string (4, d, s);
      if (atoi (s) != i / (i<0? - i/20 + 1 : - i/20 - 1))
        exit (1);
      sprintf (str, "%d", i);
      signed_integer::from_string (4, str, d);
      signed_integer::divide (4, d, e, e);
      if (integer::overflow_bit)
        exit (1);
      signed_integer::to_string (4, e, s);
      if (atoi (s) != i / (i<0? - i/20 + 1 : - i/20 - 1))
        exit (1);
    }
  exit (0);
}
TEST9

        echo test 9:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 10.
if test $result = ok -a $start_test_number -le 10; then
        cat >$test_file <<'TEST10'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  unsigned_integer::from_string (4, "10", d);
  unsigned_integer::from_string (4, "0", e);
  unsigned_integer::divide (4, d, e, d);
  if (!integer::overflow_bit)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer::from_string (4, str, d);
      sprintf (str, "%u",  i / 20 + 1);
      unsigned_integer::from_string (4, str, e);
      unsigned_integer::divide (4, d, e, d);
      if (integer::overflow_bit)
        exit (1);
      unsigned_integer::to_string (4, d, s);
      if (atoi (s) != i / (i/20 + 1))
        exit (1);
    }
  exit (0);
}
TEST10

        echo test 10:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 11.
if test $result = ok -a $start_test_number -le 11; then
        cat >$test_file <<'TEST11'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  int i;
  char str [20], s[20], d[4], e[4];

  unsigned_integer::from_string (4, "10", d);
  unsigned_integer::from_string (4, "0", e);
  unsigned_integer::remainder (4, d, e, d);
  if (!integer::overflow_bit)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      unsigned_integer::from_string (4, str, d);
      sprintf (str, "%u",  i / 20 + 1);
      unsigned_integer::from_string (4, str, e);
      unsigned_integer::remainder (4, d, e, d);
      if (integer::overflow_bit)
        exit (1);
      unsigned_integer::to_string (4, d, s);
      if (atoi (s) != i % (i/20 + 1))
        exit (1);
    }
  exit (0);
}
TEST11

        echo test 11:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 12.
if test $result = ok -a $start_test_number -le 12; then
        cat >$test_file <<'TEST12'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::shift_right (4, d, 0, d);
  unsigned_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::shift_right (4, d, 32, d);
  unsigned_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "0") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::shift_right (4, d, 8, d);
  unsigned_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "5") != 0)
    exit (1);
  unsigned_integer::from_string (4, "134890", d);
  unsigned_integer::shift_right (4, d, 13, d);
  unsigned_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  unsigned_integer::from_string (4, "134890", d);
  unsigned_integer::shift_left (4, d, -13, d);
  unsigned_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  exit (0);
}
TEST12

        echo test 12:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 13.
if test $result = ok -a $start_test_number -le 13; then
        cat >$test_file <<'TEST13'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  signed_integer::from_string (4, "1348", d);
  signed_integer::shift_right (4, d, 0, d);
  signed_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d);
  signed_integer::shift_right (4, d, 32, d);
  signed_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "0") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d);
  signed_integer::shift_right (4, d, 8, d);
  signed_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "5") != 0)
    exit (1);
  signed_integer::from_string (4, "134890", d);
  signed_integer::shift_right (4, d, 13, d);
  signed_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  signed_integer::from_string (4, "134890", d);
  signed_integer::shift_left (4, d, -13, d);
  signed_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::shift_right (4, d, 0, d);
  signed_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "-1348") != 0)
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::shift_right (4, d, 32, d);
  signed_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "-1") != 0)
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::shift_right (4, d, 8, d);
  signed_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "-6") != 0)
    exit (1);
  signed_integer::from_string (4, "-134890", d);
  signed_integer::shift_right (4, d, 13, d);
  signed_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "-17") != 0)
    exit (1);
  signed_integer::from_string (4, "-134890", d);
  signed_integer::shift_left (4, d, -13, d);
  signed_integer::to_string (4, d, s);
  if (!integer::overflow_bit || strcmp (s, "-17") != 0)
    exit (1);
  exit (0);
}
TEST13

        echo test 13:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 14.
if test $result = ok -a $start_test_number -le 14; then
        cat >$test_file <<'TEST14'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::shift_left (4, d, 0, d);
  unsigned_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::shift_left (4, d, 22, d);
  if (!integer::overflow_bit)
    exit (1);
  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::shift_left (4, d, 8, d);
  unsigned_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "345088") != 0)
    exit (1);
  unsigned_integer::from_string (4, "134890", d);
  unsigned_integer::shift_left (4, d, 13, d);
  unsigned_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  unsigned_integer::from_string (4, "134890", d);
  unsigned_integer::shift_right (4, d, -13, d);
  unsigned_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  exit (0);
}
TEST14

        echo test 14:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 15.
if test $result = ok -a $start_test_number -le 15; then
        cat >$test_file <<'TEST15'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  signed_integer::from_string (4, "1348", d);
  signed_integer::shift_left (4, d, 0, d);
  signed_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d);
  signed_integer::shift_left (4, d, 21, d);
  if (!integer::overflow_bit)
    exit (1);
  signed_integer::from_string (4, "1348", d);
  signed_integer::shift_left (4, d, 8, d);
  signed_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "345088") != 0)
    exit (1);
  signed_integer::from_string (4, "134890", d);
  signed_integer::shift_left (4, d, 13, d);
  signed_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  signed_integer::from_string (4, "134890", d);
  signed_integer::shift_right (4, d, -13, d);
  signed_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::shift_left (4, d, 0, d);
  signed_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "-1348") != 0)
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::shift_left (4, d, 21, d);
  if (!integer::overflow_bit)
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::shift_left (4, d, 8, d);
  signed_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "-345088") != 0)
    exit (1);
  signed_integer::from_string (4, "-134890", d);
  signed_integer::shift_left (4, d, 13, d);
  signed_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "-1105018880") != 0)
    exit (1);
  signed_integer::from_string (4, "-134890", d);
  signed_integer::shift_right (4, d, -13, d);
  signed_integer::to_string (4, d, s);
  if (integer::overflow_bit || strcmp (s, "-1105018880") != 0)
    exit (1);
  exit (0);
}
TEST15

        echo test 15:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 16.
if test $result = ok -a $start_test_number -le 16; then
        cat >$test_file <<'TEST16'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  signed_integer::from_string (4, "-10", d);
  signed_integer::from_string (4, "1348", e);
  if (signed_integer::eq (4, d, e))
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::from_string (4, "-1348", e);
  if (!signed_integer::eq (4, d, e))
    exit (1);
  exit (0);
}
TEST16

        echo test 16:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 17.
if test $result = ok -a $start_test_number -le 17; then
        cat >$test_file <<'TEST17'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer::from_string (4, "10", d);
  unsigned_integer::from_string (4, "1348", e);
  if (unsigned_integer::eq (4, d, e))
    exit (1);
  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::from_string (4, "1348", e);
  if (!unsigned_integer::eq (4, d, e))
    exit (1);
  exit (0);
}
TEST17

        echo test 17:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 18.
if test $result = ok -a $start_test_number -le 18; then
        cat >$test_file <<'TEST18'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  signed_integer::from_string (4, "-10", d);
  signed_integer::from_string (4, "1348", e);
  if (!signed_integer::ne (4, d, e))
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::from_string (4, "-1348", e);
  if (signed_integer::ne (4, d, e))
    exit (1);
  exit (0);
}
TEST18

        echo test 18:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 19.
if test $result = ok -a $start_test_number -le 19; then
        cat >$test_file <<'TEST19'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer::from_string (4, "10", d);
  unsigned_integer::from_string (4, "1348", e);
  if (!unsigned_integer::ne (4, d, e))
    exit (1);
  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::from_string (4, "1348", e);
  if (unsigned_integer::ne (4, d, e))
    exit (1);
  exit (0);
}
TEST19

        echo test 19:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 20.
if test $result = ok -a $start_test_number -le 20; then
        cat >$test_file <<'TEST20'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  signed_integer::from_string (4, "-10", d);
  signed_integer::from_string (4, "1348", e);
  if (signed_integer::gt (4, d, e))
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::from_string (4, "-1348", e);
  if (signed_integer::gt (4, d, e))
    exit (1);
  signed_integer::from_string (4, "-1000000", d);
  signed_integer::from_string (4, "-1348", e);
  if (signed_integer::gt (4, d, e))
    exit (1);
  signed_integer::from_string (4, "1000000", d);
  signed_integer::from_string (4, "1348", e);
  if (!signed_integer::gt (4, d, e))
    exit (1);
  exit (0);
}
TEST20

        echo test 20:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 21.
if test $result = ok -a $start_test_number -le 21; then
        cat >$test_file <<'TEST21'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer::from_string (4, "10", d);
  unsigned_integer::from_string (4, "1348", e);
  if (unsigned_integer::gt (4, d, e))
    exit (1);
  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::from_string (4, "1348", e);
  if (unsigned_integer::gt (4, d, e))
    exit (1);
  unsigned_integer::from_string (4, "1000000", d);
  unsigned_integer::from_string (4, "1348", e);
  if (!unsigned_integer::gt (4, d, e))
    exit (1);
  exit (0);
}
TEST21

        echo test 21:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 22.
if test $result = ok -a $start_test_number -le 22; then
        cat >$test_file <<'TEST22'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  signed_integer::from_string (4, "-10", d);
  signed_integer::from_string (4, "1348", e);
  if (!signed_integer::lt (4, d, e))
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::from_string (4, "-1348", e);
  if (signed_integer::lt (4, d, e))
    exit (1);
  signed_integer::from_string (4, "-1000000", d);
  signed_integer::from_string (4, "-1348", e);
  if (!signed_integer::lt (4, d, e))
    exit (1);
  signed_integer::from_string (4, "1000000", d);
  signed_integer::from_string (4, "1348", e);
  if (signed_integer::lt (4, d, e))
    exit (1);
  exit (0);
}
TEST22

        echo test 22:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 23.
if test $result = ok -a $start_test_number -le 23; then
        cat >$test_file <<'TEST23'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer::from_string (4, "10", d);
  unsigned_integer::from_string (4, "1348", e);
  if (!unsigned_integer::lt (4, d, e))
    exit (1);
  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::from_string (4, "1348", e);
  if (unsigned_integer::lt (4, d, e))
    exit (1);
  unsigned_integer::from_string (4, "1000000", d);
  unsigned_integer::from_string (4, "1348", e);
  if (unsigned_integer::lt (4, d, e))
    exit (1);
  exit (0);
}
TEST23

        echo test 23:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 24.
if test $result = ok -a $start_test_number -le 24; then
        cat >$test_file <<'TEST24'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  signed_integer::from_string (4, "-10", d);
  signed_integer::from_string (4, "1348", e);
  if (signed_integer::ge (4, d, e))
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::from_string (4, "-1348", e);
  if (!signed_integer::ge (4, d, e))
    exit (1);
  signed_integer::from_string (4, "-1000000", d);
  signed_integer::from_string (4, "-1348", e);
  if (signed_integer::ge (4, d, e))
    exit (1);
  signed_integer::from_string (4, "1000000", d);
  signed_integer::from_string (4, "1348", e);
  if (!signed_integer::ge (4, d, e))
    exit (1);
  exit (0);
}
TEST24

        echo test 24:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 25.
if test $result = ok -a $start_test_number -le 25; then
        cat >$test_file <<'TEST25'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer::from_string (4, "10", d);
  unsigned_integer::from_string (4, "1348", e);
  if (unsigned_integer::ge (4, d, e))
    exit (1);
  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::from_string (4, "1348", e);
  if (!unsigned_integer::ge (4, d, e))
    exit (1);
  unsigned_integer::from_string (4, "1000000", d);
  unsigned_integer::from_string (4, "1348", e);
  if (!unsigned_integer::ge (4, d, e))
    exit (1);
  exit (0);
}
TEST25

        echo test 25:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 26.
if test $result = ok -a $start_test_number -le 26; then
        cat >$test_file <<'TEST26'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  signed_integer::from_string (4, "-10", d);
  signed_integer::from_string (4, "1348", e);
  if (!signed_integer::le (4, d, e))
    exit (1);
  signed_integer::from_string (4, "-1348", d);
  signed_integer::from_string (4, "-1348", e);
  if (!signed_integer::le (4, d, e))
    exit (1);
  signed_integer::from_string (4, "-1000000", d);
  signed_integer::from_string (4, "-1348", e);
  if (!signed_integer::le (4, d, e))
    exit (1);
  signed_integer::from_string (4, "1000000", d);
  signed_integer::from_string (4, "1348", e);
  if (signed_integer::le (4, d, e))
    exit (1);
  exit (0);
}
TEST26

        echo test 26:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 27.
if test $result = ok -a $start_test_number -le 27; then
        cat >$test_file <<'TEST27'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], e[4];

  unsigned_integer::from_string (4, "10", d);
  unsigned_integer::from_string (4, "1348", e);
  if (!unsigned_integer::le (4, d, e))
    exit (1);
  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::from_string (4, "1348", e);
  if (!unsigned_integer::le (4, d, e))
    exit (1);
  unsigned_integer::from_string (4, "1000000", d);
  unsigned_integer::from_string (4, "1348", e);
  if (unsigned_integer::le (4, d, e))
    exit (1);
  exit (0);
}
TEST27

        echo test 27:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 28.
if test $result = ok -a $start_test_number -le 28; then
        cat >$test_file <<'TEST28'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], g[6];

  unsigned_integer::from_string (4, "70000", d);
  unsigned_integer::change_size (4, d, 2, d);
  if (!integer::overflow_bit)
    exit (1);
  unsigned_integer::from_string (4, "30000", d);
  unsigned_integer::change_size (4, d, 2, d);
  signed_integer::to_string (2, d, s);
  if (integer::overflow_bit || strcmp (s, "30000") != 0)
    exit (1);
  unsigned_integer::from_string (4, "11230000", g);
  unsigned_integer::change_size (4, g, 6, g);
  signed_integer::to_string (6, g, s);
  if (integer::overflow_bit || strcmp (s, "11230000") != 0)
    exit (1);
  exit (0);
}
TEST28

        echo test 28:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 29.
if test $result = ok -a $start_test_number -le 29; then
        cat >$test_file <<'TEST29'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4], g[6];

  signed_integer::from_string (4, "40000", d);
  signed_integer::change_size (4, d, 2, d);
  if (!integer::overflow_bit)
    exit (1);
  signed_integer::from_string (4, "-33000", d);
  signed_integer::change_size (4, d, 2, d);
  if (!integer::overflow_bit)
    exit (1);
  signed_integer::from_string (4, "30000", d);
  signed_integer::change_size (4, d, 2, d);
  signed_integer::to_string (2, d, s);
  if (integer::overflow_bit || strcmp (s, "30000") != 0)
    exit (1);
  signed_integer::from_string (4, "-30000", d);
  signed_integer::change_size (4, d, 2, d);
  signed_integer::to_string (2, d, s);
  if (integer::overflow_bit || strcmp (s, "-30000") != 0)
    exit (1);
  signed_integer::from_string (4, "11230000", g);
  signed_integer::change_size (4, g, 6, g);
  signed_integer::to_string (6, g, s);
  if (integer::overflow_bit || strcmp (s, "11230000") != 0)
    exit (1);
  signed_integer::from_string (4, "-11230000", g);
  signed_integer::change_size (4, g, 6, g);
  signed_integer::to_string (6, g, s);
  if (integer::overflow_bit || strcmp (s, "-11230000") != 0)
    exit (1);
  exit (0);
}
TEST29

        echo test 29:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 30.
if test $result = ok -a $start_test_number -le 30; then
        cat >$test_file <<'TEST30'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "1348", d2);
  unsigned_integer::_or_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "0", d2);
  unsigned_integer::_or_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "4294967295", d2);
  unsigned_integer::_or_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "4294967295") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "96", d2);
  unsigned_integer::_or_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "1380") != 0)
    exit (1);
  exit (0);
}
TEST30

        echo test 30:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 31.
if test $result = ok -a $start_test_number -le 31; then
        cat >$test_file <<'TEST31'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "1348", d2);
  signed_integer::_or_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "0", d2);
  signed_integer::_or_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "-1", d2);
  signed_integer::_or_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "-1") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "96", d2);
  signed_integer::_or_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "1380") != 0)
    exit (1);
  exit (0);
}
TEST31

        echo test 31:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 32.
if test $result = ok -a $start_test_number -le 32; then
        cat >$test_file <<'TEST32'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "1348", d2);
  unsigned_integer::_and_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "0", d2);
  unsigned_integer::_and_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "4294967295", d2);
  unsigned_integer::_and_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "96", d2);
  unsigned_integer::_and_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "64") != 0)
    exit (1);
  exit (0);
}
TEST32

        echo test 32:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 33.
if test $result = ok -a $start_test_number -le 33; then
        cat >$test_file <<'TEST33'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "1348", d2);
  signed_integer::_and_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "0", d2);
  signed_integer::_and_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "-1", d2);
  signed_integer::_and_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "96", d2);
  signed_integer::_and_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "64") != 0)
    exit (1);
  exit (0);
}
TEST33

        echo test 33:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 34.
if test $result = ok -a $start_test_number -le 34; then
        cat >$test_file <<'TEST34'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "1348", d2);
  unsigned_integer::_xor_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "0", d2);
  unsigned_integer::_xor_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "4294967295", d2);
  unsigned_integer::_xor_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "4294965947") != 0)
    exit (1);
  unsigned_integer::from_string (4, "1348", d1);
  unsigned_integer::from_string (4, "96", d2);
  unsigned_integer::_xor_ (4, d1, d2, d2);
  unsigned_integer::to_string (4, d2, s);
  if (strcmp (s, "1316") != 0)
    exit (1);
  exit (0);
}
TEST34

        echo test 34:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 35.
if test $result = ok -a $start_test_number -le 35; then
        cat >$test_file <<'TEST35'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d1[4], d2[4];

  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "1348", d2);
  signed_integer::_xor_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "0", d2);
  signed_integer::_xor_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "-1", d2);
  signed_integer::_xor_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "-1349") != 0)
    exit (1);
  signed_integer::from_string (4, "1348", d1);
  signed_integer::from_string (4, "96", d2);
  signed_integer::_xor_ (4, d1, d2, d2);
  signed_integer::to_string (4, d2, s);
  if (strcmp (s, "1316") != 0)
    exit (1);
  exit (0);
}
TEST35

        echo test 35:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 36.
if test $result = ok -a $start_test_number -le 36; then
        cat >$test_file <<'TEST36'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  unsigned_integer::from_string (4, "1348", d);
  unsigned_integer::_not_ (4, d, d);
  unsigned_integer::to_string (4, d, s);
  if (strcmp (s, "4294965947") != 0)
    exit (1);
  unsigned_integer::from_string (4, "0", d);
  unsigned_integer::_not_ (4, d, d);
  unsigned_integer::to_string (4, d, s);
  if (strcmp (s, "4294967295") != 0)
    exit (1);
  unsigned_integer::from_string (4, "4294967295", d);
  unsigned_integer::_not_ (4, d, d);
  unsigned_integer::to_string (4, d, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  exit (0);
}
TEST36

        echo test 36:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 37.
if test $result = ok -a $start_test_number -le 37; then
        cat >$test_file <<'TEST37'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20], d[4];

  signed_integer::from_string (4, "1348", d);
  signed_integer::_not_ (4, d, d);
  signed_integer::to_string (4, d, s);
  if (strcmp (s, "-1349") != 0)
    exit (1);
  signed_integer::from_string (4, "0", d);
  signed_integer::_not_ (4, d, d);
  signed_integer::to_string (4, d, s);
  if (strcmp (s, "-1") != 0)
    exit (1);
  signed_integer::from_string (4, "-1", d);
  signed_integer::_not_ (4, d, d);
  signed_integer::to_string (4, d, s);
  if (strcmp (s, "0") != 0)
    exit (1);
  exit (0);
}
TEST37

        echo test 37:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

#------------------ Templates ------------------------------------------

# Test 38.
if test $result = ok -a $start_test_number -le 38; then
        cat >$test_file <<'TEST38'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i, b;
  char str [20], s[20];
  sint<4> d, d1;

  d.from_str ("-2147483649");
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN);
  d.from_str (str);
  if (d.overflow_bit)
    exit (1);
  d.to_str (s);
  if (strcmp (s, str) !=0)
    exit (1);

  d.from_based_str ("-80000001", 16);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN);
  d.from_str (str);
  if (d.overflow_bit)
    exit (1);
  d.to_based_str (16, s);
  if (strcmp (s, "-80000000") !=0)
    exit (1);

  d.from_based_str ("-20000000001", 8);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN);
  d.from_str (str);
  if (d.overflow_bit)
    exit (1);
  d.to_based_str (8, s);
  if (strcmp (s, "-20000000000") !=0)
    exit (1);

  d.from_str ("2147483648");
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX);
  d.from_str (str);
  if (integer::overflow_bit)
    exit (1);
  d.to_str (s);
  if (strcmp (s, str) !=0)
    exit (1);  

  d.from_based_str ("80000000", 16);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX);
  d.from_str (str);
  if (integer::overflow_bit)
    exit (1);
  d.to_based_str (16, s);
  if (strcmp (s, "7fffffff") !=0)
    exit (1);  

  d.from_based_str ("20000000000", 8);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX);
  d.from_str (str);
  if (integer::overflow_bit)
    exit (1);
  d.to_based_str (8, s);
  if (strcmp (s, "17777777777") !=0)
    exit (1);  

  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      d.from_str (str);
      if (d.overflow_bit)
        exit (1);
      d.to_str (s);
      if (strcmp (s, str) !=0)
        exit (1);
    }
  for (b = 2; b <= 36; b++)
    for (i = -2000; i < 2000; i++)
      {
        sprintf (str, "%d", i);
        d.from_str (str);
        if (d.overflow_bit)
          exit (1);
        d.to_based_str (b, s);
        d1.from_based_str (s, b);
        if (!(d == d1))
          exit (1);
    }
  exit (0);
}
TEST38

        echo test 38:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 39.
if test $result = ok -a $start_test_number -le 39; then
        cat >$test_file <<'TEST39'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i, b;
  char str [20], s[20];
  unsint<4> d, d1;

  d.from_str ("4294967296");
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  d.from_str (str);
  if (d.overflow_bit)
    exit (1);
  d.to_str (s);
  if (strcmp (s, str) !=0)
    exit (1);

  d.from_based_str ("100000000", 16);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  d.from_str (str);
  if (d.overflow_bit)
    exit (1);
  d.to_based_str (16, s);
  if (strcmp (s, "ffffffff") !=0)
    exit (1);

  d.from_based_str ("40000000000", 8);
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  d.from_str (str);
  if (d.overflow_bit)
    exit (1);
  d.to_based_str (8, s);
  if (strcmp (s, "37777777777") !=0)
    exit (1);

  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      d.from_str (str);
      if (d.overflow_bit)
        exit (1);
      d.to_str (s);
      if (strcmp (s, str) !=0)
        exit (1);
    }
  for (b = 2; b <= 36; b++)
    for (i = 0; i < 4000 ; i++)
      {
        sprintf (str, "%u", i);
        d.from_str (str);
        if (d.overflow_bit)
          exit (1);
        d.to_based_str (b, s);
        d1.from_based_str (s, b);
        if (!(d == d1))
          exit (1);
      }
  exit (0);
}
TEST39

        echo test 39:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 40.
if test $result = ok -a $start_test_number -le 40; then
        cat >$test_file <<'TEST40'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20];
  sint<4> d, e;

  sprintf (str, "%d", INT_MAX);
  d.from_str (str);
  e.from_str ("1");
  d = d + e;
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX - 4);
  d.from_str (str);
  sprintf (str, "%d", 4);
  e.from_str (str);
  d = d + e;
  if (integer::overflow_bit)
    exit (1);
  d.to_str (s);
  sprintf (str, "%d", INT_MAX);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      d.from_str (str);
      sprintf (str, "%d", i + 1);
      e.from_str (str);
      d = d + e;
      if (integer::overflow_bit)
        exit (1);
      d.to_str (s);
      if (atoi (s) != i + i + 1)
        exit (1);
    }
  exit (0);
}
TEST40

        echo test 40:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 41.
if test $result = ok -a $start_test_number -le 41; then
        cat >$test_file <<'TEST41'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20];
  unsint<4> d, e;

  sprintf (str, "%u", UINT_MAX);
  d.from_str (str);
  e.from_str ("1");
  d = d + e;
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX - 4);
  d.from_str (str);
  sprintf (str, "%u", 4);
  e.from_str (str);
  d = d + e;
  if (integer::overflow_bit)
    exit (1);
  d.to_str (s);
  sprintf (str, "%u", UINT_MAX);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      d.from_str (str);
      sprintf (str, "%u", i + 1);
      e.from_str (str);
      d = d + e;
      if (integer::overflow_bit)
        exit (1);
      d.to_str (s);
      if (atoi (s) != i + i + 1)
        exit (1);
    }
  exit (0);
}
TEST41

        echo test 41:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 42.
if test $result = ok -a $start_test_number -le 42; then
        cat >$test_file <<'TEST42'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20];
  sint<4> d, e;

  sprintf (str, "%d", INT_MIN);
  d.from_str (str);
  e.from_str ("1");
  d = d - e;
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN + 4);
  d.from_str (str);
  sprintf (str, "%d", 4);
  e.from_str (str);
  d = d - e;
  if (integer::overflow_bit)
    exit (1);
  d.to_str (s);
  sprintf (str, "%d", INT_MIN);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      d.from_str (str);
      sprintf (str, "%d", 10 - i);
      e.from_str (str);
      d = d - e;
      if (integer::overflow_bit)
        exit (1);
      d.to_str (s);
      if (atoi (s) != i + i - 10)
        exit (1);
    }
  exit (0);
}
TEST42

        echo test 42:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 43.
if test $result = ok -a $start_test_number -le 43; then
        cat >$test_file <<'TEST43'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20];
  unsint<4> d, e;

  sprintf (str, "%u", UINT_MAX - 2);
  d.from_str (str);
  sprintf (str, "%u", UINT_MAX - 1);
  e.from_str (str);
  d = d - e;
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX);
  d.from_str (str);
  d = d - d;
  if (integer::overflow_bit)
    exit (1);
  d.to_str (s);
  if (strcmp (s, "0") != 0)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      d.from_str (str);
      sprintf (str, "%u",  i / 2);
      e.from_str (str);
      d = d - e;
      if (integer::overflow_bit)
        exit (1);
      d.to_str (s);
      if (atoi (s) != i - i/2)
        exit (1);
    }
  exit (0);
}
TEST43

        echo test 43:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 44.
if test $result = ok -a $start_test_number -le 44; then
        cat >$test_file <<'TEST44'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20];
  sint<4> d, e;

  sprintf (str, "%d", INT_MAX / 2 + 1);
  d.from_str (str);
  e.from_str ("2");
  d = d * e;
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MIN / 2 - 1);
  d.from_str (str);
  e.from_str ("2");
  d = d * e;
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%d", INT_MAX / 3);
  d.from_str (str);
  sprintf (str, "%d", 3);
  e.from_str (str);
  d = d * e;
  if (integer::overflow_bit)
    exit (1);
  d.to_str (s);
  sprintf (str, "%d", (INT_MAX / 3) * 3);
  if (strcmp (s, str) != 0)
    exit (1);
  sprintf (str, "%d", INT_MIN / 2);
  d.from_str (str);
  sprintf (str, "%d", 2);
  e.from_str (str);
  d = d * e;
  if (integer::overflow_bit)
    exit (1);
  d.to_str (s);
  sprintf (str, "%d", (INT_MIN / 2) * 2);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      d.from_str (str);
      sprintf (str, "%d", i + 1000);
      e.from_str (str);
      d = d * e;
      if (integer::overflow_bit)
        exit (1);
      d.to_str (s);
      if (atoi (s) != i * (i + 1000))
        exit (1);
    }
  exit (0);
}
TEST44

        echo test 44:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 45.
if test $result = ok -a $start_test_number -le 45; then
        cat >$test_file <<'TEST45'

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"
#include <limits.h>
int main()
{
  int i;
  char str [20], s[20];
  unsint<4> d, e;

  sprintf (str, "%u", UINT_MAX / 5 + 1);
  d.from_str (str);
  sprintf (str, "%u", 5);
  e.from_str (str);
  d = d * e;
  if (!integer::overflow_bit)
    exit (1);
  sprintf (str, "%u", UINT_MAX / 2);
  d.from_str (str);
  sprintf (str, "%u", 2);
  e.from_str (str);
  d = d * e;
  if (integer::overflow_bit)
    exit (1);
  d.to_str (s);
  sprintf (str, "%u", (UINT_MAX / 2) * 2);
  if (strcmp (s, str) != 0)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      d.from_str (str);
      sprintf (str, "%u",  i / 2);
      e.from_str (str);
      d = d * e;
      if (integer::overflow_bit)
        exit (1);
      d.to_str (s);
      if (atoi (s) != i * (i/2))
        exit (1);
    }
  exit (0);
}
TEST45

        echo test 45:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 46.
if test $result = ok -a $start_test_number -le 46; then
        cat >$test_file <<'TEST46'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  int i;
  char str [20], s[20];
  sint<4> d, e;

  d.from_str ("10");
  e.from_str ("0");
  d = d / e;
  if (!integer::overflow_bit)
    exit (1);
  for (i = -2000; i < 2000 ; i++)
    {
      sprintf (str, "%d", i);
      d.from_str (str);
      sprintf (str, "%d", (i<0? - i/20 + 1 : - i/20 - 1));
      e.from_str (str);
      d = d / e;
      if (integer::overflow_bit)
        exit (1);
      d.to_str (s);
      if (atoi (s) != i / (i<0? - i/20 + 1 : - i/20 - 1))
        exit (1);
      sprintf (str, "%d", i);
      d.from_str (str);
      e = d / e;
      if (integer::overflow_bit)
        exit (1);
      e.to_str (s);
      if (atoi (s) != i / (i<0? - i/20 + 1 : - i/20 - 1))
        exit (1);
    }
  exit (0);
}
TEST46

        echo test 46:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 47.
if test $result = ok -a $start_test_number -le 47; then
        cat >$test_file <<'TEST47'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  int i;
  char str [20], s[20];
  unsint<4> d, e;

  d.from_str ("10");
  e.from_str ("0");
  d = d / e;
  if (!integer::overflow_bit)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      d.from_str (str);
      sprintf (str, "%u",  i / 20 + 1);
      e.from_str (str);
      d = d / e;
      if (integer::overflow_bit)
        exit (1);
      d.to_str (s);
      if (atoi (s) != i / (i/20 + 1))
        exit (1);
    }
  exit (0);
}
TEST47

        echo test 47:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 48.
if test $result = ok -a $start_test_number -le 48; then
        cat >$test_file <<'TEST48'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  int i;
  char str [20], s[20];
  unsint<4> d, e;

  d.from_str ("10");
  e.from_str ("0");
  d = d % e;
  if (!integer::overflow_bit)
    exit (1);
  for (i = 0; i < 4000 ; i++)
    {
      sprintf (str, "%u", i);
      d.from_str (str);
      sprintf (str, "%u",  i / 20 + 1);
      e.from_str (str);
      d = d % e;
      if (integer::overflow_bit)
        exit (1);
      d.to_str (s);
      if (atoi (s) != i % (i/20 + 1))
        exit (1);
    }
  exit (0);
}
TEST48

        echo test 48:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 49.
if test $result = ok -a $start_test_number -le 49; then
        cat >$test_file <<'TEST49'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d;

  d.from_str ("1348");
  d = d >> 0;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  d.from_str ("1348");
  d = d >> 32;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "0") != 0)
    exit (1);
  d.from_str ("1348");
  d = d >> 8;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "5") != 0)
    exit (1);
  d.from_str ("134890");
  d = d >> 13;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  d.from_str ("134890");
  d = d << -13;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  exit (0);
}
TEST49

        echo test 49:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 50.
if test $result = ok -a $start_test_number -le 50; then
        cat >$test_file <<'TEST50'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d;

  d.from_str ("1348");
  d = d >> 0;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  d.from_str ("1348");
  d = d >> 32;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "0") != 0)
    exit (1);
  d.from_str ("1348");
  d = d >> 8;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "5") != 0)
    exit (1);
  d.from_str ("134890");
  d = d >> 13;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  d.from_str ("134890");
  d = d << -13;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "16") != 0)
    exit (1);
  d.from_str ("-1348");
  d = d >> 0;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "-1348") != 0)
    exit (1);
  d.from_str ("-1348");
  d = d >> 32;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "-1") != 0)
    exit (1);
  d.from_str ("-1348");
  d = d >> 8;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "-6") != 0)
    exit (1);
  d.from_str ("-134890");
  d = d >> 13;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "-17") != 0)
    exit (1);
  d.from_str ("-134890");
  d = d << -13;
  d.to_str (s);
  if (!integer::overflow_bit || strcmp (s, "-17") != 0)
    exit (1);
  exit (0);
}
TEST50

        echo test 50:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 51.
if test $result = ok -a $start_test_number -le 51; then
        cat >$test_file <<'TEST51'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d;

  d.from_str ("1348");
  d = d << 0;;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  d.from_str ("1348");
  d = d << 22;
  if (!integer::overflow_bit)
    exit (1);
  d.from_str ("1348");
  d = d << 8;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "345088") != 0)
    exit (1);
  d.from_str ("134890");
  d = d << 13;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  d.from_str ("134890");
  d = d >> -13;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  exit (0);
}
TEST51

        echo test 51:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 52.
if test $result = ok -a $start_test_number -le 52; then
        cat >$test_file <<'TEST52'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d;

  d.from_str ("1348");
  d = d << 0;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "1348") != 0)
    exit (1);
  d.from_str ("1348");
  d = d << 21;
  if (!integer::overflow_bit)
    exit (1);
  d.from_str ("1348");
  d = d << 8;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "345088") != 0)
    exit (1);
  d.from_str ("134890");
  d = d << 13;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  d.from_str ("134890");
  d = d >> -13;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "1105018880") != 0)
    exit (1);
  d.from_str ("-1348");
  d = d << 0;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "-1348") != 0)
    exit (1);
  d.from_str ("-1348");
  d = d << 21;
  if (!integer::overflow_bit)
    exit (1);
  d.from_str ("-1348");
  d = d << 8;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "-345088") != 0)
    exit (1);
  d.from_str ("-134890");
  d = d << 13;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "-1105018880") != 0)
    exit (1);
  d.from_str ("-134890");
  d = d >> -13;
  d.to_str (s);
  if (integer::overflow_bit || strcmp (s, "-1105018880") != 0)
    exit (1);
  exit (0);
}
TEST52

        echo test 52:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 53.
if test $result = ok -a $start_test_number -le 53; then
        cat >$test_file <<'TEST53'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d, e;

  d.from_str ("-10");
  e.from_str ("1348");
  if (d == e)
    exit (1);
  d.from_str ("-1348");
  e.from_str ("-1348");
  if (!(d == e))
    exit (1);
  exit (0);
}
TEST53

        echo test 53:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 54.
if test $result = ok -a $start_test_number -le 54; then
        cat >$test_file <<'TEST54'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d,e;

  d.from_str ("10");
  e.from_str ("1348");
  if (d == e)
    exit (1);
  d.from_str ("1348");
  e.from_str ("1348");
  if (!(d == e))
    exit (1);
  exit (0);
}
TEST54

        echo test 54:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 55.
if test $result = ok -a $start_test_number -le 55; then
        cat >$test_file <<'TEST55'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d, e;
  sint<4> c1 (-10), c2 (1348);

  d = c1;
  e = c2;
  if (!(d != e))
    exit (1);
  d.from_str ("-1348");
  e.from_str ("-1348");
  if (d != e)
    exit (1);
  exit (0);
}
TEST55

        echo test 55:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 56.
if test $result = ok -a $start_test_number -le 56; then
        cat >$test_file <<'TEST56'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d, e;
  unsint<4> c1 (10), c2 (1348);

  d = c1;
  e = c2;
  if (!(d != e))
    exit (1);
  d.from_str ("1348");
  e.from_str ("1348");
  if (d != e)
    exit (1);
  exit (0);
}
TEST56

        echo test 56:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 57.
if test $result = ok -a $start_test_number -le 57; then
        cat >$test_file <<'TEST57'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d, e;

  d.from_str ("-10");
  e.from_str ("1348");
  if (d > e)
    exit (1);
  d.from_str ("-1348");
  e.from_str ("-1348");
  if (d > e)
    exit (1);
  d.from_str ("-1000000");
  e.from_str ("-1348");
  if (d > e)
    exit (1);
  d.from_str ("1000000");
  e.from_str ("1348");
  if (!( d >  e))
    exit (1);
  exit (0);
}
TEST57

        echo test 57:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 58.
if test $result = ok -a $start_test_number -le 58; then
        cat >$test_file <<'TEST58'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d, e;

  d.from_str ("10");
  e.from_str ("1348");
  if (d > e)
    exit (1);
  d.from_str ("1348");
  e.from_str ("1348");
  if (d > e)
    exit (1);
  d.from_str ("1000000");
  e.from_str ("1348");
  if (!(d > e))
    exit (1);
  exit (0);
}
TEST58

        echo test 58:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 59.
if test $result = ok -a $start_test_number -le 59; then
        cat >$test_file <<'TEST59'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d, e;

  d.from_str ("-10");
  e.from_str ("1348");
  if (!(d < e))
    exit (1);
  d.from_str ("-1348");
  e.from_str ("-1348");
  if (d < e)
    exit (1);
  d.from_str ("-1000000");
  e.from_str ("-1348");
  if (!(d < e))
    exit (1);
  d.from_str ("1000000");
  e.from_str ("1348");
  if (d < e)
    exit (1);
  exit (0);
}
TEST59

        echo test 59:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 60.
if test $result = ok -a $start_test_number -le 60; then
        cat >$test_file <<'TEST60'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d, e;

  d.from_str ("10");
  e.from_str ("1348");
  if (!(d < e))
    exit (1);
  d.from_str ("1348");
  e.from_str ("1348");
  if (d < e)
    exit (1);
  d.from_str ("1000000");
  e.from_str ("1348");
  if (d < e)
    exit (1);
  exit (0);
}
TEST60

        echo test 60:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 61.
if test $result = ok -a $start_test_number -le 61; then
        cat >$test_file <<'TEST61'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d, e;

  d.from_str ("-10");
  e.from_str ("1348");
  if (d >= e)
    exit (1);
  d.from_str ("-1348");
  e.from_str ("-1348");
  if (!(d >= e))
    exit (1);
  d.from_str ("-1000000");
  e.from_str ("-1348");
  if (d >= e)
    exit (1);
  d.from_str ("1000000");
  e.from_str ("1348");
  if (!(d >= e))
    exit (1);
  exit (0);
}
TEST61

        echo test 61:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 62.
if test $result = ok -a $start_test_number -le 62; then
        cat >$test_file <<'TEST62'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d, e;

  d.from_str ("10");
  e.from_str ("1348");
  if (d >= e)
    exit (1);
  d.from_str ("1348");
  e.from_str ("1348");
  if (!(d >= e))
    exit (1);
  d.from_str ("1000000");
  e.from_str ("1348");
  if (!(d >= e))
    exit (1);
  exit (0);
}
TEST62

        echo test 62:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 63.
if test $result = ok -a $start_test_number -le 63; then
        cat >$test_file <<'TEST63'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d, e;

  d.from_str ("-10");
  e.from_str ("1348");
  if (!(d <= e))
    exit (1);
  d.from_str ("-1348");
  e.from_str ("-1348");
  if (!(d <= e))
    exit (1);
  d.from_str ("-1000000");
  e.from_str ("-1348");
  if (!(d <= e))
    exit (1);
  d.from_str ("1000000");
  e.from_str ("1348");
  if (d <= e)
    exit (1);
  exit (0);
}
TEST63

        echo test 63:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 64.
if test $result = ok -a $start_test_number -le 64; then
        cat >$test_file <<'TEST64'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d, e;

  d.from_str ("10");
  e.from_str ("1348");
  if (!(d <= e))
    exit (1);
  d.from_str ("1348");
  e.from_str ("1348");
  if (!(d <= e))
    exit (1);
  d.from_str ("1000000");
  e.from_str ("1348");
  if (d <= e)
    exit (1);
  exit (0);
}
TEST64

        echo test 64:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 65.
if test $result = ok -a $start_test_number -le 65; then
        cat >$test_file <<'TEST65'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<2> c;
  unsint<4> d, g;
  unsint<6> h;

  d.from_str ("70000");
  new_size (d, c);
  if (!integer::overflow_bit)
    exit (1);
  d.from_str ("30000");
  new_size (d, c);
  c.to_str (s);
  if (integer::overflow_bit || strcmp (s, "30000") != 0)
    exit (1);
  g.from_str ("11230000");
  new_size (g, h);
  h.to_str (s);
  if (integer::overflow_bit || strcmp (s, "11230000") != 0)
    exit (1);
  exit (0);
}
TEST65

        echo test 65:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 66.
if test $result = ok -a $start_test_number -le 66; then
        cat >$test_file <<'TEST66'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<2> c;
  sint<4> d, g;
  sint<6> h;

  d.from_str ("40000");
  new_size (d, c);
  if (!integer::overflow_bit)
    exit (1);
  d.from_str ("-33000");
  new_size (d, c);
  if (!integer::overflow_bit)
    exit (1);
  d.from_str ("30000");
  new_size (d, c);
  c.to_str (s);
  if (integer::overflow_bit || strcmp (s, "30000") != 0)
    exit (1);
  d.from_str ("-30000");
  new_size (d, c);
  c.to_str (s);
  if (integer::overflow_bit || strcmp (s, "-30000") != 0)
    exit (1);
  g.from_str ("11230000");
  new_size (g, h);
  h.to_str (s);
  if (integer::overflow_bit || strcmp (s, "11230000") != 0)
    exit (1);
  g.from_str ("-11230000");
  new_size (g, h);
  h.to_str (s);
  if (integer::overflow_bit || strcmp (s, "-11230000") != 0)
    exit (1);
  exit (0);
}
TEST66

        echo test 66:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 67.
if test $result = ok -a $start_test_number -le 67; then
        cat >$test_file <<'TEST67'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d1, d2;

  d1.from_str ("1348");
  d2.from_str ("1348");
  d2 = d1 | d2;
  d2.to_str (s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("0");
  d2 = d1 | d2;
  d2.to_str (s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("4294967295");
  d2 = d1 | d2;
  d2.to_str (s);
  if (strcmp (s, "4294967295") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("96");
  d2 = d1 | d2;
  d2.to_str (s);
  if (strcmp (s, "1380") != 0)
    exit (1);
  exit (0);
}
TEST67

        echo test 67:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 68.
if test $result = ok -a $start_test_number -le 68; then
        cat >$test_file <<'TEST68'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d1, d2;

  d1.from_str ("1348");
  d2.from_str ("1348");
  d2 = d1 | d2;
  d2.to_str (s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("0");
  d2 = d1 | d2;
  d2.to_str (s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("-1");
  d2 = d1 | d2;
  d2.to_str (s);
  if (strcmp (s, "-1") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("96");
  d2 = d1 | d2;
  d2.to_str (s);
  if (strcmp (s, "1380") != 0)
    exit (1);
  exit (0);
}
TEST68

        echo test 68:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 69.
if test $result = ok -a $start_test_number -le 69; then
        cat >$test_file <<'TEST69'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d1, d2;

  d1.from_str ("1348");
  d2.from_str ("1348");
  d2 = d1 & d2;
  d2.to_str (s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("0");
  d2 = d1 & d2;
  d2.to_str (s);
  if (strcmp (s, "0") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("4294967295");
  d2 = d1 & d2;
  d2.to_str (s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("96");
  d2 = d1 & d2;
  d2.to_str (s);
  if (strcmp (s, "64") != 0)
    exit (1);
  exit (0);
}
TEST69

        echo test 69:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 70.
if test $result = ok -a $start_test_number -le 70; then
        cat >$test_file <<'TEST70'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d1, d2;

  d1.from_str ("1348");
  d2.from_str ("1348");
  d2 = d1 & d2;
  d2.to_str (s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("0");
  d2 = d1 & d2;
  d2.to_str (s);
  if (strcmp (s, "0") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("-1");
  d2 = d1 & d2;
  d2.to_str (s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("96");
  d2 = d1 & d2;
  d2.to_str (s);
  if (strcmp (s, "64") != 0)
    exit (1);
  exit (0);
}
TEST70

        echo test 70:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 71.
if test $result = ok -a $start_test_number -le 71; then
        cat >$test_file <<'TEST71'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d1, d2;

  d1.from_str ("1348");
  d2.from_str ("1348");
  d2 = d1 ^ d2;
  d2.to_str (s);
  if (strcmp (s, "0") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("0");
  d2 = d1 ^ d2;
  d2.to_str (s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("4294967295");
  d2 = d1 ^ d2;
  d2.to_str (s);
  if (strcmp (s, "4294965947") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("96");
  d2 = d1 ^ d2;
  d2.to_str (s);
  if (strcmp (s, "1316") != 0)
    exit (1);
  exit (0);
}
TEST71

        echo test 71:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 72.
if test $result = ok -a $start_test_number -le 72; then
        cat >$test_file <<'TEST72'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d1, d2;

  d1.from_str ("1348");
  d2.from_str ("1348");
  d2 = d1 ^ d2;
  d2.to_str (s);
  if (strcmp (s, "0") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("0");
  d2 = d1 ^ d2;
  d2.to_str (s);
  if (strcmp (s, "1348") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("-1");
  d2 = d1 ^ d2;
  d2.to_str (s);
  if (strcmp (s, "-1349") != 0)
    exit (1);
  d1.from_str ("1348");
  d2.from_str ("96");
  d2 = d1 ^ d2;
  d2.to_str (s);
  if (strcmp (s, "1316") != 0)
    exit (1);
  exit (0);
}
TEST72

        echo test 72:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 73.
if test $result = ok -a $start_test_number -le 73; then
        cat >$test_file <<'TEST73'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  unsint<4> d;

  d.from_str ("1348");
  d = ~d;
  d.to_str (s);
  if (strcmp (s, "4294965947") != 0)
    exit (1);
  d.from_str ("0");
  d = ~d;
  d.to_str (s);
  if (strcmp (s, "4294967295") != 0)
    exit (1);
  d.from_str ("4294967295");
  d = ~d;
  d.to_str (s);
  if (strcmp (s, "0") != 0)
    exit (1);
  exit (0);
}
TEST73

        echo test 73:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 74.
if test $result = ok -a $start_test_number -le 74; then
        cat >$test_file <<'TEST74'
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "arithm.h"

int main()
{
  char s[20];
  sint<4> d;

  d.from_str ("1348");
  d = ~d;
  d.to_str (s);
  if (strcmp (s, "-1349") != 0)
    exit (1);
  d.from_str ("0");
  d = ~d;
  d.to_str (s);
  if (strcmp (s, "-1") != 0)
    exit (1);
  d.from_str ("-1");
  d = ~d;
  d.to_str (s);
  if (strcmp (s, "0") != 0)
    exit (1);
  exit (0);
}
TEST74

        echo test 74:
        echo '      ' $CXX $CXX_options $test_file $addfiles -o $outfile
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Final message

if test $result = ok; then
        echo $script_file: it is all ok
        rm -f $addfiles $test_file $outfile
        exit 0
else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
fi
