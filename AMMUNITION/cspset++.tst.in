#!/bin/sh
# @configure_input@

#
# Script to test compact sparse package (files `cspset.h', `cspsetcpp.C').
#
#   Copyright (C) 2014 Vladimir Makarov.
#
#   Written by Vladimir Makarov <vmakarov@gcc.gnu.org>
#
#   This is part of package for work with hash tables; you can
#   redistribute it and/or modify it under the terms of the GNU Library
#   General Public License as published by the Free Software
#   Foundation; either version 2, or (at your option) any later
#   version.
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with GNU CC; see the file COPYING.  If not, write to
#   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
#   MA 02111-1307, USA.
#
#
# Usage: cspset++.tst [start_test_number]
#
# The script outputs self-explanatory messages and returns zero exit code if 
# it is all ok.
#

script_file=$0
prefix=`basename $script_file .tst`
CXX='@CXX@'
CXX_options='@CXXFLAGS@ @DEFS@ -I. -I@srcdir@/'
source_addfiles='@srcdir@/allocatecpp.C @srcdir@/tickercpp.C @srcdir@/spsetcpp.C @srcdir@/cspsetcpp.C'
addfiles="${prefix}_allocatecpp.o ${prefix}_tickercpp.o ${prefix}_spsetcpp.o ${prefix}_cspsetcpp.o"
test_file=${prefix}_tcspset.C
outfile=./${prefix}_a.out
include_file=${prefix}_temp.h

if test x$1 = x
then
    start_test_number=1
else
    if expr $1 + 0 >/dev/null
    then
        start_test_number=`expr $1 + 0`
    else
        echo $script_file:invalid argument $1 2>&1
        exit 1
    fi
fi

# Compilation of addfiles

for i in $source_addfiles; do
  echo '      ' $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o
  if $CXX $CXX_options -c $i -o ${prefix}_`basename $i .C`.o; then
        result=ok
  else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
  fi
done

cat <<EOF >${include_file}
#include <stdlib.h>
#include <string.h>
#include "cspset.h"
static int
cmp (const void *p1, const void *p2)
{
   cspset_elem_t el1 = *(const cspset_elem_t *) p1;
   cspset_elem_t el2 = *(const cspset_elem_t *) p2;
   return (el1 == el2 ? 0 : el1 < el2 ? -1 : 1);
}

static cspset_elem_t els_vec[1000];

static size_t
get_vec_set (cspset *s)
{
   cspset_iterator si;
   cspset_elem_t el;
   size_t n = 0;

   EXECUTE_FOR_EACH_CSPSET_ELEM (s, el, si)
     els_vec[n++] = el;

   qsort (els_vec, n, sizeof (cspset_elem_t), cmp);
   return n;
}

static void
check (cspset *s, cspset_elem_t *els, size_t num)
{
  size_t n = get_vec_set (s);
  if (n != num || memcmp (els, els_vec, sizeof (cspset_elem_t) * n) != 0)
    exit (1);
}
EOF

# Test 1.
if test $result = ok -a $start_test_number -le 1; then
        cat >$test_file <<'TEST1'
#include "cspset++_temp.h"
int main ()
{
  cspset s;
  cspset_elem_t v[] = {1, 2, 3, 4};
  int i;

  check (&s, v, 0);
  for (i = 0; i < sizeof (v) / sizeof (cspset_elem_t); i++)
    if (! s.insert (v[i]))
      exit (1);
  check (&s, v, sizeof (v) / sizeof (cspset_elem_t));
  if (s.insert (1))
    exit (1);
  check (&s, v, sizeof (v) / sizeof (cspset_elem_t));
  exit (0);
}
TEST1
        echo test 1:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 2.
if test $result = ok -a $start_test_number -le 2; then
        cat >$test_file <<'TEST2'
#include "cspset++_temp.h"
int main ()
{
  cspset s;
  cspset_elem_t v[] = {1, 2, 3, 4};
  int i;

  check (&s, v, 0);
  for (i = 0; i < sizeof (v) / sizeof (cspset_elem_t); i++)
    s.insert (v[i]);
  if (s.remove (20))
    exit (1);
  if (s.remove (10000))
    exit (1);
  check (&s, v, sizeof (v) / sizeof (cspset_elem_t));
  for (i = 0; i < sizeof (v) / sizeof (cspset_elem_t); i++)
    if (! s.remove (v[i]))
      exit (1);
  s.shrink ();
  if (s.size () != 7)
    exit (1);
  check (&s, v, 0);
  exit (0);
}

TEST2
        echo test 2:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 3.
if test $result = ok -a $start_test_number -le 3; then
        cat >$test_file <<'TEST3'
#include "cspset++_temp.h"
int main ()
{
  cspset s1(0), s2(0);
  cspset_elem_t v[] = {1, 2, 3, 4};
  int i;

  s1.copy (&s1);
  check (&s1, v, 0);
  for (i = 0; i < sizeof (v) / sizeof (cspset_elem_t); i++)
    s2.insert (v[i]);
  s1.copy (&s2);
  check (&s1, v, sizeof (v) / sizeof (cspset_elem_t));
  check (&s2, v, sizeof (v) / sizeof (cspset_elem_t));
  exit (0);
}

TEST3
        echo test 3:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 4.
if test $result = ok -a $start_test_number -le 4; then
        cat >$test_file <<'TEST4'
#include "cspset++_temp.h"
int main ()
{
  cspset s1(0), s2(0);
  cspset_elem_t v1[] = {1, 2, 3, 4};
  cspset_elem_t v2[] = {0, 2, 5};
  int i;

  s1.swap (&s1);
  check (&s1, v1, 0);
  check (&s2, v1, 0);
  for (i = 0; i < sizeof (v1) / sizeof (cspset_elem_t); i++)
    s1.insert (v1[i]);
  for (i = 0; i < sizeof (v2) / sizeof (cspset_elem_t); i++)
    s2.insert (v2[i]);
  s1.swap (&s2);
  check (&s1, v2, sizeof (v2) / sizeof (cspset_elem_t));
  check (&s2, v1, sizeof (v1) / sizeof (cspset_elem_t));
  if (s1.cardinality () != 3 || s2.cardinality () != 4)
    exit (1);
  exit (0);
}
TEST4
        echo test 4:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 5.
if test $result = ok -a $start_test_number -le 5; then
        cat >$test_file <<'TEST5'
#include "cspset++_temp.h"
int main ()
{
  cspset s;
  cspset_elem_t v[] = {1, 2, 3, 4};
  int i;

  if (s.size () != 7 || s.cardinality () != 0)
    exit (1);
  for (i = 0; i < sizeof (v) / sizeof (cspset_elem_t); i++)
    s.insert (v[i]);
  if (s.size () != 7 || s.cardinality () != 4)
    exit (1);
  exit (0);
}
TEST5
        echo test 5:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 6.
if test $result = ok -a $start_test_number -le 6; then
        cat >$test_file <<'TEST6'
#include "cspset++_temp.h"
int main ()
{
  cspset s;
  cspset_elem_t v[] = {1, 2, 3, 4};
  int i;

  if (s.in_p (1) || s.in_p (4) || s.in_p (1000000))
    exit (1);
  for (i = 0; i < sizeof (v) / sizeof (cspset_elem_t); i++)
    s.insert (v[i]);
  for (i = 0; i < sizeof (v) / sizeof (cspset_elem_t); i++)
    if (! s.in_p (v[i]))
      exit (1);
  if (s.in_p (0) || s.in_p (5))
    exit (1);
  exit (0);
}
TEST6
        echo test 6:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 7.
if test $result = ok -a $start_test_number -le 7; then
        cat >$test_file <<'TEST7'
#include "cspset++_temp.h"
int main ()
{
  cspset s;
  cspset_elem_t v[] = {1, 2, 3, 4};
  int i;

  if (s.clear ())
    exit (1);
  for (i = 0; i < sizeof (v) / sizeof (cspset_elem_t); i++)
    s.insert (v[i]);
  if (! s.clear ())
    exit (1);
  if (s.cardinality () != 0)
    exit (1);
  check (&s, v, 0);
  exit (0);
}
TEST7
        echo test 7:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 8.
if test $result = ok -a $start_test_number -le 8; then
        cat >$test_file <<'TEST8'
#include "cspset++_temp.h"
int main ()
{
  cspset s1(0), s2(0);
  cspset_elem_t v1[] = {1, 2, 3, 4};
  cspset_elem_t v2[] = {0, 2, 5};
  int i;

  if (! s1.equal_p (&s2))
    exit (1);
  for (i = 0; i < sizeof (v1) / sizeof (cspset_elem_t); i++)
    s1.insert (v1[i]);
  if (! s1.equal_p (&s1))
    exit (1);
  for (i = 0; i < sizeof (v2) / sizeof (cspset_elem_t); i++)
    s2.insert (v2[i]);
  if (s1.equal_p (&s2))
    exit (1);
  exit (0);
}
TEST8
        echo test 8:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 9.
if test $result = ok -a $start_test_number -le 9; then
        cat >$test_file <<'TEST9'
#include "cspset++_temp.h"
int main ()
{
  cspset s1(0), s2(0);
  cspset_elem_t v1[] = {1, 2, 3, 4};
  cspset_elem_t v2[] = {0, 2, 5};
  cspset_elem_t v3[] = {0, 1, 2, 3, 4, 5};
  int i;

  if (s2.unity (&s1))
    exit (1);
  check (&s2, NULL, 0);
  for (i = 0; i < sizeof (v1) / sizeof (cspset_elem_t); i++)
    s1.insert (v1[i]);
  if (s1.unity (&s2))
    exit (1);
  check (&s1, v1, sizeof (v1) / sizeof (cspset_elem_t));
  check (&s2, NULL, 0);
  if (s1.unity (&s1))
    exit (1);
  check (&s1, v1, sizeof (v1) / sizeof (cspset_elem_t));
  for (i = 0; i < sizeof (v2) / sizeof (cspset_elem_t); i++)
    s2.insert (v2[i]);
  if (! s1.unity (&s2))
    exit (1);
  check (&s1, v3, sizeof (v3) / sizeof (cspset_elem_t));
  check (&s2, v2, sizeof (v2) / sizeof (cspset_elem_t));
  exit (0);
}
TEST9
        echo test 9:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 10.
if test $result = ok -a $start_test_number -le 10; then
        cat >$test_file <<'TEST10'
#include "cspset++_temp.h"
int main ()
{
  cspset s1(0), s2(0);
  cspset_elem_t v1[] = {1, 2, 3, 4};
  cspset_elem_t v2[] = {0, 2, 5};
  cspset_elem_t v3[] = {2};
  int i;

  s2.intersect (&s1);
  check (&s2, NULL, 0);
  for (i = 0; i < sizeof (v1) / sizeof (cspset_elem_t); i++)
    s1.insert (v1[i]);
  if (! s1.intersect (&s2))
    exit (1);
  check (&s1, NULL, 0);
  check (&s2, NULL, 0);
  for (i = 0; i < sizeof (v1) / sizeof (cspset_elem_t); i++)
    s1.insert (v1[i]);
  if (s1.intersect (&s1))
    exit (1);
  check (&s1, v1, sizeof (v1) / sizeof (cspset_elem_t));
  for (i = 0; i < sizeof (v2) / sizeof (cspset_elem_t); i++)
    s2.insert (v2[i]);
  if (! s1.intersect (&s2))
    exit (1);
  check (&s1, v3, sizeof (v3) / sizeof (cspset_elem_t));
  check (&s2, v2, sizeof (v2) / sizeof (cspset_elem_t));
  for (i = 0; i < sizeof (v1) / sizeof (cspset_elem_t); i++)
    s1.insert (v1[i]);
  if (! s2.intersect (&s1))
    exit (1);
  check (&s2, v3, sizeof (v3) / sizeof (cspset_elem_t));
  check (&s1, v1, sizeof (v1) / sizeof (cspset_elem_t));
  exit (0);
}
TEST10
        echo test 10:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 11.
if test $result = ok -a $start_test_number -le 11; then
        cat >$test_file <<'TEST11'
#include "cspset++_temp.h"
int main ()
{
  cspset s1(0), s2(0);
  cspset_elem_t v1[] = {1, 2, 3, 4};
  cspset_elem_t v2[] = {0, 2, 5};
  cspset_elem_t v3[] = {1, 3, 4};
  cspset_elem_t v4[] = {0, 5};
  int i;

  if (s2.diff (&s1))
    exit (1);
  check (&s2, NULL, 0);
  check (&s1, NULL, 0);
  for (i = 0; i < sizeof (v1) / sizeof (cspset_elem_t); i++)
    s1.insert (v1[i]);
  if (s1.diff (&s2))
    exit (1);
  check (&s1, v1, sizeof (v1) / sizeof (cspset_elem_t));
  check (&s2, NULL, 0);
  if (! s1.diff (&s1))
    exit (1);
  check (&s1, NULL, 0);
  for (i = 0; i < sizeof (v1) / sizeof (cspset_elem_t); i++)
    s1.insert (v1[i]);
  for (i = 0; i < sizeof (v2) / sizeof (cspset_elem_t); i++)
    s2.insert (v2[i]);
  if (! s1.diff (&s2))
    exit (1);
  check (&s1, v3, sizeof (v3) / sizeof (cspset_elem_t));
  check (&s2, v2, sizeof (v2) / sizeof (cspset_elem_t));
  for (i = 0; i < sizeof (v1) / sizeof (cspset_elem_t); i++)
    s1.insert (v1[i]);
  if (! s2.diff (&s1))
    exit (1);
  check (&s2, v4, sizeof (v4) / sizeof (cspset_elem_t));
  check (&s1, v1, sizeof (v1) / sizeof (cspset_elem_t));
  exit (0);
}
TEST11
        echo test 11:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 12.
if test $result = ok -a $start_test_number -le 12; then
        cat >$test_file <<'TEST12'
#include "cspset++_temp.h"
int main ()
{
  spset s;
  cspset s1(0), s2(0);
  int i;

  for (i = 0; i < 1000; i++)
    s1.insert (random () % 10000);
  s1.to_spset (&s);
  s2.from_spset (&s);
  if (! s1.equal_p (&s2))
    exit (1);
  exit (0);
}
TEST12
        echo test 12:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 13.
if test $result = ok -a $start_test_number -le 13; then
        cat >$test_file <<'TEST13'
#include "cspset++_temp.h"
#include "ticker.h"
#ifdef linux
#include <unistd.h>
#endif

int n;
int main ()
{
  cspset s1(0), s2(0), s3(0), s4(0);
  int i, iter;
  ticker_t t;
#ifdef linux
  char *start = (char *) sbrk (0);
#endif

  for (iter = 0; iter < 1000; iter++)
    {
      if (s2.diff (&s1))
        exit (1);
      check (&s2, NULL, 0);
      check (&s1, NULL, 0);
      for (i = 0; i < 1000; i++)
        s1.insert (random () % 10000);
      for (i = 0; i < 10000; i++)
        if (s1.in_p (i))
          n++;
      for (i = 0; i < 10000; i += 3)
        s1.remove (i);
      s3.copy (&s1);
      for (i = 0; i < 1000; i++)
        s2.insert (random () % 10000);
      s4.copy (&s2);
      s4.intersect (&s1);
      for (i = 0; i < 10; i++)
       {
         s1.unity (&s2);
         s1.diff (&s2);
         s1.unity (&s4);
         s1.shrink ();
         if (! s1.equal_p (&s3))
           exit (1);
      }
      cspset::release_unused_memory ();
      s4.copy (&s1);
      s4.diff (&s2);
      for (i = 0; i < 10; i++)
       {
         s1.intersect (&s2);
         s1.unity (&s4);
         s1.shrink ();
         if (! s1.equal_p (&s3))
           exit (1);
      }
      s1.clear ();
      s2.clear ();
      s3.clear ();
      s4.clear ();
      cspset::release_unused_memory ();
    }
#ifndef NDEBUG
#ifdef linux
  printf ("all time %.2f, memory=%.1fkB, searches=%d, collisions=%d\n",
          t.active_time (), ((char *) sbrk (0) - start) / 1024.,
          cspset::all_searches, cspset::all_collisions);
#else
  printf ("all time %.2f, searches=%d, collisions=%d\n", t.active_time (),
          cspset::all_searches, cspset::all_collisions);
#endif
#else
#ifdef linux
  printf ("all time %.2f, memory=%.1fkB\n",
          t.active_time (), ((char *) sbrk (0) - start) / 1024.);
#else
  printf ("all time %.2f\n", t.active_time ());
#endif
#endif
  exit (0);
}
TEST13
        echo test 13:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Test 14.
if test $result = ok -a $start_test_number -le 14; then
        cat >$test_file <<'TEST14'
#include "cspset++_temp.h"
#include "ticker.h"
#ifdef linux
#include <unistd.h>
#endif

#define NITER 200
#define NBB 1000
#define NPS 5000
int main ()
{
  int i, n, iter;
  ticker_t t1, t2;
#ifdef linux
  char *start = (char *) sbrk (0);
  size_t diff1, diff2;
#endif
  t2.ticker_off ();
  for (iter = 0; iter < NITER; iter++)
    {
      cspset ct, cin[NBB], cout[NBB], cgen[NBB];

      for (i = 0; i < NBB; i++)
        cgen[i].insert (random () % NPS);
      for (n = 0; n < 2; n++)
	{
	  for (i = 0; i < NBB; i++)
	    {
	      if (i > 0)
		cin[i].copy (&cout[i - 1]);
	      ct.copy (&cin[i]);
	      cgen[i].remove (random () % NPS);
	      ct.unity (&cgen[i]);
	      if (! cout[i].equal_p (&ct))
		cout[i].copy (&ct);
	    }
	}
#ifdef linux
      diff1 = (char *) sbrk (0) - start;
#endif
    }
  t1.ticker_off ();
#ifdef linux
  start = (char *) sbrk (0);
#endif
  t2.ticker_on ();
  for (iter = 0; iter < NITER; iter++)
    {
      spset t, in[NBB], out[NBB], gen[NBB];
      for (i = 0; i < NBB; i++)
        gen[i].insert (random () % NPS);
      for (n = 0; n < 2; n++)
	{
	  for (i = 0; i < NBB; i++)
	    {
	      if (i > 0)
		in[i].copy (&out[i - 1]);
	      t.copy (&in[i]);
	      t.remove (random () % NPS);
	      t.unity (&gen[i]);
	      if (! out[i].equal_p (&t))
		out[i].copy (&t);
	    }
	}
#ifdef linux
      diff2 = (char *) sbrk (0) - start;
#endif
    }
#ifdef linux
  printf ("all time cpspset=%.2f(%.1fkB), spset=%.2f(%.1fkB)\n",
          t1.active_time (), diff1 / 1024., t2.active_time (), diff2 / 1024.);
#else
  printf ("all time cspset=%.2f, spset=%.2f\n", t1.active_time (), t2.active_time ());
#endif
  exit (0);
}
TEST14
        echo test 14:
        echo '      ' $CXX $CXX_options $test_file $addfiles
        if $CXX $CXX_options $test_file $addfiles -o $outfile; then
                echo '      ' $outfile
                if $outfile; then
                        result=ok
                else
                        result=fail
                fi
        else
                result=fail
        fi
fi

# Final message

if test $result = ok; then
        echo $script_file: it is all ok
        rm -f $addfiles $test_file $outfile ${include_file}
        exit 0
else
        echo '***' $script_file: test is failed see file $test_file
        exit 1
fi
