#!/bin/sh
#
# Script to comparison of Gperf and Shilka.
#

#
# Usage: compare.tst
#
# The script requires GPERF.
#

GPERF=gperf
SHILKA=./shilka
CC='@CC@ -O2'
outfile=./a.out


echo This script compares speed of recognition of C keywords in real C program.
echo The code is generated by GPERF and SHILKA in the best way.

if $GPERF -g -j1 -i 1 -o -G -k1,3,$ @srcdir@/c.gperf >cg.c 2>/dev/null; then
  echo '  ' $GPERF -g -j1 -i 1 -o -G -k1,3,$ @srcdir@/c.gperf ">cg.c"
else
  echo Failure in $GPERF
  exit 1
fi

if $SHILKA -strip -inline -fast 5 @srcdir@/c.shilka 2>/dev/null; then
  echo '  ' $SHILKA -strip -inline -fast 5 @srcdir@/c.shilka
else
  echo Failure in $GPERF
  exit 1
fi

echo Now compilation and testing speed \(recognition of C keywords in gen.c\)

cat >test.c <<'EOF'
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include "objstack.h"
#include "ticker.h"

#ifdef GPERF
#include "cg.c"
#else
#include "c.c"
#endif

static os_t ids;

static const char *
get_id (void) {
  int c, prev_c, end;
  char *result;

  for (;;) {
    c = getchar ();
    switch (c) {
    case EOF:
      return NULL;
      break;
    case '/':
      c = getchar ();
      if (c == '*') {
        for (;;) {
          c = getchar ();
          if (c == '*') {
            c = getchar ();
            if (c == '/') break;
            else {
              ungetc (c, stdin);
              continue;
            }
          }
          else if (c == EOF) {
            ungetc (c, stdin);
            break;
          }
        }
      }
      break;
    case '"':
    case '\'':
      end = c;
      do {
        prev_c = c;
        c = getchar ();
        if (c == '\\' && prev_c == '\\')
          c = 'a';
      } while (c != end || prev_c == '\\');
      break;
    default:
      if (isalpha (c) || c == '_') {
        do {
          OS_TOP_ADD_BYTE (ids, c);
          c = getchar ();
        } while (isalpha (c) || isdigit (c) || c == '_');
        OS_TOP_ADD_BYTE (ids, '\0');
        result = OS_TOP_BEGIN (ids);
        OS_TOP_FINISH (ids);
        ungetc (c, stdin);
        return result;
      }
    }
  }
}

struct id {
  const char *kw;
  int length;
  struct id *next;
};

int
main ()
{
  const char *str; struct id id, *prev, *list, *curr;
  ticker_t t;
  ticker_t dummy;
  int kw, nid;
  int i;

  OS_CREATE (ids, 0);
  list = NULL;
  prev = NULL;
  while ((str = get_id ()) != NULL) {
    id.kw = str;
    id.length = strlen (str);
    id.next = NULL;
    OS_TOP_ADD_MEMORY (ids, &id, sizeof (id));
    if (prev == NULL)
      prev = list = OS_TOP_BEGIN (ids);
    else {
      prev = prev->next = OS_TOP_BEGIN (ids);
    }
    OS_TOP_FINISH (ids);
  }
  dummy = create_ticker ();
  kw = nid = 0;
  for (i = 0; i < 100; i++)
    for (curr = list; curr != NULL; curr = curr->next)
        if (nid == 0)
          nid++;
        else
          kw++;
  ticker_off (&dummy);
  t = create_ticker ();
  kw = nid = 0;
  for (i = 0; i < 100; i++)
    for (curr = list; curr != NULL; curr = curr->next)
#ifdef GPERF
      if (in_word_set (curr->kw, curr->length) == NULL)
#else
        if (KR_find_keyword (curr->kw, curr->length) == KR__not_found)
#endif
          nid++;
        else
          kw++;
  printf ("ids=%d, kws=%d, all time %.2f\n", nid, kw,
          active_time (t) - active_time (dummy));
  exit (0);
}
EOF

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../AMMUNITION/.libs

if $CC -DGPERF -O2 -I@srcdir@/../AMMUNITION -L../AMMUNITION/.libs test.c -lcocom -o $outfile; then
  echo '  ' gperf: time:
  $CC -E -I. -I@srcdir@ -I@srcdir@/../AMMUNITION @srcdir@/gen.c | time $outfile
else
  echo Failure in compilation test program
  exit 1
fi

if $CC -O2 -I@srcdir@/../AMMUNITION -L../AMMUNITION/.libs test.c -lcocom -o $outfile; then
  echo '  ' shilka: time:
  $CC -E -I. -I@srcdir@ -I@srcdir@/../AMMUNITION @srcdir@/gen.c | time $outfile
else
  echo Failure in compilation test program
  exit 1
fi

echo Now compilation and testing speed \(recognition of GCC keywords in gen.c\)

if $GPERF -g -j1 -i 1 -o -G -k1,3,$ @srcdir@/gcc.gperf >cg.c 2>/dev/null; then
  echo '  ' $GPERF -g -j1 -i 1 -o -G -k1,3,$ @srcdir@/gcc.gperf ">cg.c"
else
  echo Failure in $GPERF
  exit 1
fi

if $SHILKA -strip -inline -fast 5 @srcdir@/gcc.shilka 2>/dev/null; then
  echo '  ' $SHILKA -strip -inline -fast 5 @srcdir@/gcc.shilka
  mv gcc.c c.c
else
  echo Failure in $SHILKA
  exit 1
fi

if $CC -DGPERF -O2 -I@srcdir@/../AMMUNITION -L../AMMUNITION/.libs test.c -lcocom -o $outfile; then
  echo '  ' gperf: time:
  $CC -E -I. -I@srcdir@ -I@srcdir@/../AMMUNITION @srcdir@/gen.c | time $outfile
else
  echo Failure in compilation test program
  exit 1
fi


if $CC -O2 -I@srcdir@/../AMMUNITION -L../AMMUNITION/.libs test.c -lcocom -o $outfile; then
  echo '  ' shilka: time:
  $CC -E -I. -I@srcdir@ -I@srcdir@/../AMMUNITION @srcdir@/gen.c | time $outfile
else
  echo Failure in compilation test program
  exit 1
fi

rm -f $outfile
rm -f cg.c c.c test.c
