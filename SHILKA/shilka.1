.\" Process this file with
.\" groff -man -Tascii foo.1
.\"
.TH SHILKA 1 "5 APR 2001" COCOM "User Manuals"
.SH NAME
shilka \- keywords description translator
.SH SYNOPSIS
.B shilka [ -c++ --statistics -inline -strip -length -case
.B          -no-definitions -interface -export -enum -pprefix
.B          -time -fast n -w -h -help -v]
.I specification-file
.SH DESCRIPTION
.B SHILKA
generates code for fast recognition of pipeline hazards of
processor which is described in specification file.  The specification
file must have suffix
.B `.shilka'
.
.PP
The generated code consists of optional interface and implementation files
having the same names as one of specification file and correspondingly
suffixes
.B `.h'
(if option
.B -interface
is given) and
.B `.c'
(C code) or
.B `.cpp'
(C++ code).
.PP
The fast recognition of keywords is based on structure called as
minimal prunned O-trie.
Full documentation of SHILKA is in SHILKA User's manual.
.SH OPTIONS
The options which are known for SHILKA are:
.IP -c++
Output of C++ code instead of C code (which is default).
.IP -statistics
Generation of macro definition which switches on gathering and
printing keyword occurrence statistics.  Then such statistics can be used
for setting up frequencies in the description file for faster
recognition of keywords.
.IP -inline
Generation of function of keyword recognition as inline (take care
with used C compiler).  This can be speed up keyword recognition.
.IP -strip
Striping off code for gathering and printing statistics.  By default
the code is present in the implementation file.  The code can be
switched on by definition of a macro (see option
.B -statistics
).
.IP -length
Usage of strncmp instead of strcmp to compare keywords.  This can
be useful if keyword is represented by a string without C string end
marker ('\0').
.IP -case
Keywords case is ignored during their recognition.  This is useful
for recognition keywords (or standard identifiers) in such language
as Fortran.
.IP -no-definitions
No generation of macros (or enumeration) defining identifiers of
keywords.
.IP -interface
Generation of additional interface file (with suffix
.B `.h'
).
.IP -export
SHILKA generates macros defining identifiers of keywords in the
interface file (instead of in the implementation file).  This option
has sense only when
.B -interface
is present.
.IP -enum
Output of enumeration instead of macro definitions for identifiers of
keywords.
.IP -pprefix
Usage of prefix instead of
.B `KR_'
(default) for names of generated objects.
.IP -time
Output of time statistics of the SHILKA run into stderr.
.IP "-fast n"
If number of rested unchecked characters is less or equal n, then
functions
.B `strcmp'
or
.B `strncmp'
is not used at all.  Instead of this, simply comparing rested
unchecked characters is used.  This can speed up keyword recognition.
The default value of the parameter is 3.
.IP -w
Disable generation of all warnings.
.IP "-h, -help"
Output of brief help message about SHILKA usage.
.IP -v
Creation of description file containing details how the code
generated by SHILKA will recognize the keywords.
.SH FILES
.I file.shilka
.RS
SHILKA specification file
.RE
.I file.c
.RS
generated C implementation file
.RE
.I file.cpp
.RS
generated C++ implementation file
.RE
.I file.h
.RS
generated interface file
.RE

There are no any temporary files used by SHILKA.
.SH ENVIRONMENT
There are no environment variables which affect SHILKA behavior.
.SH DIAGNOSTICS
SHILKA diagnostics is self-explanatory.
.SH AUTHOR
Vladimir N. Makarov, vmakarov@gcc.gnu.org
.SH "SEE ALSO"
.BR msta (1),
.BR oka (1),
.BR sprut (1),
.BR nona (1).
SHILKA manual.
.SH BUGS
Please, report bugs to https://github.com/dino-lang/dino/issues.
